export default [
  {
    id: "Accordion",
    element:
      'import React from "react";\nimport { useState } from "react";\nimport { cn } from "../utils/lib";\n\nconst Accordion = ({\n  title,\n  content,\n  className = "",\n  defaultOpen = false,\n  open = false,\n  isOpen = null,\n  onToggle,\n}) => {\n  const [visible, setVisible] = useState(defaultOpen);\n  const toggleAccordion = () => {\n    setVisible(!visible);\n  };\n\n  return (\n    <>\n      <div>\n        <div\n          onClick={onToggle ?? toggleAccordion}\n          className={cn(\n            "cursor-pointer bg-gray-800  hover:bg-gray-900 flex  items-center justify-between min-w-2xs  min-h-md ease-in-out",\n          )}\n        >\n          <div className="ml-2 px-2 py-2 text-white"> {title} </div>\n          <svg\n            className={`mr-2 transform transition-transform duration-300 \n          ${(isOpen ?? visible) ? "rotate-180" : "rotate-0"}`}\n            width="20"\n            height="15"\n            viewBox="0 0 24 24"\n            fill="none"\n          >\n            <path\n              d="M6 9l6 6 6-6"\n              stroke="#fff"\n              strokeWidth={2}\n              strokeLinecap="round"\n              strokeLinejoin="round"\n            />\n          </svg>\n        </div>\n        <div\n          className={` overflow-hidden transition-all duration-300 ease-in-out hover:bg-gray-800 \n        ${(isOpen ?? visible) ? "max-h-40 opacity-100 translate-y-0" : "max-h-0 opacity-0 -translate-y-5"}`}\n        >\n          <div className="bg-gray-800 text-left -z-1 px-4 py-1 text-sm text-white">\n            {content}\n          </div>\n        </div>\n\n        <hr className="w-m h-px  bg-gray-500 border-0 " />\n        {/* <div className=\'flex h-14 items-center justify-between border-b border-zinc-200 \' > </div> */}\n      </div>\n    </>\n  );\n};\n\nconst AccordionWrapper = ({ children }) => {\n  const [activeIndex, setActiveIndex] = useState(null);\n  return (\n    <>\n      <div>\n        {React.Children.map(children, (child, index) =>\n          React.cloneElement(child, {\n            isOpen: activeIndex === index,\n            onToggle: () =>\n              setActiveIndex(activeIndex === index ? null : index),\n          }),\n        )}\n      </div>\n    </>\n  );\n};\n\nexport { AccordionWrapper, Accordion };\n',
  },
  {
    id: "Avatar",
    element:
      'import React from "react";\nimport { cn } from "../utils/lib";\n\nconst Avatar = ({ url, alt, className = "", ...props }) => {\n  return (\n    <div className="flex gap-4 mt-2">\n      <img\n        className={cn(`rounded-full h-12 w-12 object-cover`, className)}\n        src={url}\n        alt={alt}\n      />\n    </div>\n  );\n};\n\nexport default Avatar;\n',
  },
  {
    id: "Button",
    element:
      'import React, { useState, useEffect } from "react";\nimport { cn } from "../utils/lib";\nimport { cva } from "class-variance-authority";\nimport { Spinner } from "./Spinner";\n\nexport const Button = React.forwardRef(\n  (\n    {\n      children,\n      size,\n      className = "",\n      isLoading,\n      icon,\n      variant,\n      fullWidth,\n      animatedBorder = false,\n      gradientBorder = false,\n      responsiveSize,\n      ...props\n    },\n    ref,\n  ) => {\n    const [animationPosition, setAnimationPosition] = useState({ x: 0, y: 0 });\n\n    useEffect(() => {\n      if (!animatedBorder) return;\n\n      const interval = setInterval(() => {\n        setAnimationPosition((prev) => ({\n          x: (prev.x + 1) % 100,\n          y: (prev.y + 1) % 100,\n        }));\n      }, 50);\n\n      return () => clearInterval(interval);\n    }, [animatedBorder]);\n\n    const buttonVariants = cva(\n      "inline-flex text-4xl items-center cursor-pointer justify-center whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 relative",\n      {\n        variants: {\n          variant: {\n            primary: "bg-[#305CDE] text-white hover:bg-blue-600",\n            destructive: "bg-red-500 text-white hover:bg-red-600",\n            success: "bg-[#00b306] text-white hover:bg-green-600",\n            warning: "bg-[#ff8a00] text-white hover:bg-yellow-600",\n            outline: "border border-gray-500 bg-transparent hover:bg-gray-700",\n            secondary: "bg-rose-500 text-white hover:bg-gray-600",\n            ghost:\n              "dark:hover:bg-gray-700 dark:text-white text-gray-700 hover:bg-gray-800 hover:text-gray-100",\n            glass:\n              "dark:bg-white/10 backdrop-blur-md border border-black/10 dark:border-white/20 dark:text-white dark:hover:bg-white/20 hover:bg-white/60",\n            gradient:\n              "bg-gradient-to-r from-[#d60db8] to-[#1919e0] text-white hover:from-blue-600 hover:to-purple-700",\n            dark: "bg-black text-white hover:bg-black/70",\n            light: "bg-gray-50 text-black hover:bg-gray-100",\n            movingBorder: "text-white bg-black border-none",\n          },\n          size: {\n            default: "h-10 px-4 py-2 min-w-[90px]",\n            sm: "h-9 rounded-md px-3 min-w-[80px]",\n            lg: "h-11 rounded-md px-8 min-w-[110px]",\n            xl: "h-12 rounded-md px-10 min-w-[130px] text-base",\n            icon: "h-10 w-10 min-w-[40px]",\n          },\n          fullWidth: {\n            true: "w-full",\n            false: "",\n          },\n          responsiveSize: {\n            auto: "md:text-base text-xs md:h-10 h-8 md:px-4 px-2",\n            compact:\n              "lg:h-10 md:h-9 h-8 lg:px-4 md:px-3 px-2 lg:text-sm text-xs",\n            expand: "lg:h-12 md:h-11 h-10 lg:px-8 md:px-6 px-4",\n          },\n        },\n        defaultVariants: {\n          variant: "default",\n          size: "default",\n          fullWidth: false,\n          responsiveSize: null,\n        },\n      },\n    );\n\n    const getBorderStyle = () => {\n      if (animatedBorder) {\n        return {\n          backgroundImage: `linear-gradient(90deg, #00f0ff, #00ff6a, #ff00e6, #0096ff)`,\n          backgroundSize: "300% 300%",\n          backgroundPosition: `${animationPosition.x}% ${animationPosition.y}%`,\n          padding: "2px",\n          borderRadius: "0.375rem",\n          animation: "5s ease infinite",\n        };\n      }\n      if (gradientBorder) {\n        return {\n          backgroundImage:\n            "linear-gradient(to right, #4f46e5, #9333ea, #e11d48)",\n          padding: "2px",\n          borderRadius: "0.375rem",\n        };\n      }\n      return null;\n    };\n\n    const buttonContent = (\n      <>\n        {isLoading ? (\n          <Spinner className={cn(children ? "mr-2" : "")} />\n        ) : icon ? (\n          <span className={cn(children ? "mr-2" : "")}>{icon}</span>\n        ) : null}\n        {children}\n      </>\n    );\n\n    const renderButton = () => (\n      <button\n        {...props}\n        ref={ref}\n        className={cn(\n          buttonVariants({\n            variant: animatedBorder || gradientBorder ? "dark" : variant,\n            size,\n            fullWidth,\n            responsiveSize,\n            className: cn(\n              (animatedBorder || gradientBorder) &&\n                "w-full m-0 rounded-[calc(0.375rem-1px)]",\n              className,\n            ),\n          }),\n        )}\n      >\n        {buttonContent}\n      </button>\n    );\n\n    const borderStyle = getBorderStyle();\n\n    return borderStyle ? (\n      <div\n        className={cn("inline-flex", fullWidth && "w-full")}\n        style={borderStyle}\n      >\n        {renderButton()}\n      </div>\n    ) : (\n      renderButton()\n    );\n  },\n);\n\nButton.displayName = "Button";\n',
  },
  {
    id: "DatePicker",
    element:
      'import React from "react";\nimport { cn } from "../utils/lib";\n\nexport const Textarea = ({ className, ...props }) => {\n  return (\n    <textarea\n      className={cn(\n        "flex min-h-[80px] w-full rounded-xl border border-gray-700 bg-gray-800 px-4 py-3 text-sm text-white placeholder:text-gray-400 shadow-sm transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-cyan-400 focus-visible:ring-offset-2 focus-visible:ring-offset-gray-900 disabled:opacity-50 disabled:cursor-not-allowed  ",\n        className,\n      )}\n      {...props}\n    />\n  );\n};\n',
  },
  {
    id: "DropDown",
    element:
      'import React from "react";\nimport { cn } from "../utils/lib";\n\nexport const Textarea = ({ className, ...props }) => {\n  return (\n    <textarea\n      className={cn(\n        "flex min-h-[80px] w-full rounded-xl border border-gray-700 bg-gray-800 px-4 py-3 text-sm text-white placeholder:text-gray-400 shadow-sm transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-cyan-400 focus-visible:ring-offset-2 focus-visible:ring-offset-gray-900 disabled:opacity-50 disabled:cursor-not-allowed  ",\n        className,\n      )}\n      {...props}\n    />\n  );\n};\n',
  },
  {
    id: "Footer",
    element:
      'import React from "react";\nimport { cn } from "../utils/lib";\n\nexport const Textarea = ({ className, ...props }) => {\n  return (\n    <textarea\n      className={cn(\n        "flex min-h-[80px] w-full rounded-xl border border-gray-700 bg-gray-800 px-4 py-3 text-sm text-white placeholder:text-gray-400 shadow-sm transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-cyan-400 focus-visible:ring-offset-2 focus-visible:ring-offset-gray-900 disabled:opacity-50 disabled:cursor-not-allowed  ",\n        className,\n      )}\n      {...props}\n    />\n  );\n};\n',
  },
  {
    id: "Input",
    element:
      'import React from "react";\nimport { cn } from "../utils/lib";\n\nexport const Textarea = ({ className, ...props }) => {\n  return (\n    <textarea\n      className={cn(\n        "flex min-h-[80px] w-full rounded-xl border border-gray-700 bg-gray-800 px-4 py-3 text-sm text-white placeholder:text-gray-400 shadow-sm transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-cyan-400 focus-visible:ring-offset-2 focus-visible:ring-offset-gray-900 disabled:opacity-50 disabled:cursor-not-allowed  ",\n        className,\n      )}\n      {...props}\n    />\n  );\n};\n',
  },
  {
    id: "MessageBot",
    element:
      'import React, { useState } from "react";\nimport { cn } from "../utils/lib";\n\nconst MessageBot = ({\n  orgName = "UIgnite",\n  themeColor = "bg-gray-800",\n  url,\n  alt,\n}) => {\n  const [isOpen, setIsOpen] = useState(false);\n  const [input, setInput] = useState("");\n  const [count, setCount] = useState(1);\n  // messages will be array of objects and objects should have a sender and the text\n  const [messages, setMessages] = useState([]);\n  const sendMessage = () => {\n    if (!input.trim()) return;\n\n    const newMessage = { text: input, sender: "user" };\n    const updatedMessages = [...messages, newMessage];\n    setMessages(updatedMessages);\n    setInput("");\n    // console.log(messages)\n\n    const botResponse = { text: `bot response ${count + 1} `, sender: "bot" };\n    setCount(count + 1);\n    // console.log(count)\n    setTimeout(() => {\n      setMessages((currentMessages) => [...currentMessages, botResponse]);\n      console.log(messages);\n    }, 800);\n  };\n\n  return (\n    <>\n      <div className=" fixed bottom-5 right-5">\n        <button\n          className={`cursor-pointer w-16 h-16 ${themeColor} text-white rounded-full shadow-lg flex items-center justify-center text-2xl`}\n          onClick={() => setIsOpen(!isOpen)}\n        >\n          💬\n        </button>\n\n        {isOpen && (\n          <div className=" fixed bottom-23 right-8 w-80 h-120 bg-white rounded-lg ">\n            <div className="flex flex-col ">\n              <div\n                className={`p-3 ${themeColor} text-white flex justify-between items-center rounded-t-lg`}\n              >\n                <span>{orgName}</span>\n                <button\n                  className=" cursor-pointer p-1 text-white text-sm font-bold"\n                  onClick={() => setIsOpen(false)}\n                >\n                  <img src="circle-x.svg" alt="" />\n                </button>\n              </div>\n\n              <div className="flex-1 p-3 overflow-y-auto bg-white">\n                <p>Welcome to {orgName} chatbot </p>\n              </div>\n            </div>\n\n            {/* Chat Messages  */}\n\n            <div className="flex flex-col   p-3 overflow-y-auto space-y-2 min-h-[65%] max-h-[65%]">\n              <div className="flex-grow"></div>\n              {messages.map((msg, index) => (\n                <>\n                  <div className="flex">\n                    {msg.sender === "user" && (\n                      <img\n                        className="rounded-full  m-2 h-5 w-5 object-cover"\n                        src={msg.sender == "user" ? url : alt}\n                        alt={alt}\n                      />\n                    )}\n                    <div\n                      key={index}\n                      className={` text-black p-2 min-w-[80%] overflow-x-clip rounded-md  ${msg.sender === "user" ? "bg-gray-200 self-start text-left mr-30000 " : "bg-orange-200 self-end text-right ml-9 "}`}\n                    >\n                      {msg.text}\n                    </div>\n                    {msg.sender === "bot" && (\n                      <img\n                        className="rounded-full m-2 h-5 w-5 object-cover"\n                        src={msg.sender == "user" ? url : alt}\n                        alt={alt}\n                      />\n                    )}\n                  </div>\n                </>\n              ))}\n            </div>\n\n            <div className="flex justify-between p-3 border-t border-gray-300 ">\n              <input\n                type="text"\n                placeholder="Type a message..."\n                className=" p-2 text-black border rounded-md outline-none min-w-[80%]"\n                onChange={(e) => {\n                  setInput(e.target.value);\n                }}\n              />\n\n              <button\n                className={`cursor-pointer ml-2 px-4 py-2 ${themeColor} text-white rounded-md`}\n                onClick={sendMessage}\n              >\n                ➤\n              </button>\n            </div>\n          </div>\n        )}\n      </div>\n    </>\n  );\n};\n\nexport default MessageBot;\n',
  },
  {
    id: "Navbar",
    element:
      'import React from "react";\nimport { cn } from "../utils/lib";\n\nexport const Textarea = ({ className, ...props }) => {\n  return (\n    <textarea\n      className={cn(\n        "flex min-h-[80px] w-full rounded-xl border border-gray-700 bg-gray-800 px-4 py-3 text-sm text-white placeholder:text-gray-400 shadow-sm transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-cyan-400 focus-visible:ring-offset-2 focus-visible:ring-offset-gray-900 disabled:opacity-50 disabled:cursor-not-allowed  ",\n        className,\n      )}\n      {...props}\n    />\n  );\n};\n',
  },
  {
    id: "NavMenu",
    element:
      'import React from "react";\nimport { cn } from "../utils/lib";\n\nexport const Textarea = ({ className, ...props }) => {\n  return (\n    <textarea\n      className={cn(\n        "flex min-h-[80px] w-full rounded-xl border border-gray-700 bg-gray-800 px-4 py-3 text-sm text-white placeholder:text-gray-400 shadow-sm transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-cyan-400 focus-visible:ring-offset-2 focus-visible:ring-offset-gray-900 disabled:opacity-50 disabled:cursor-not-allowed  ",\n        className,\n      )}\n      {...props}\n    />\n  );\n};\n',
  },
  {
    id: "Preview",
    element:
      'import React from "react";\nimport { cn } from "../utils/lib";\n\nexport const Textarea = ({ className, ...props }) => {\n  return (\n    <textarea\n      className={cn(\n        "flex min-h-[80px] w-full rounded-xl border border-gray-700 bg-gray-800 px-4 py-3 text-sm text-white placeholder:text-gray-400 shadow-sm transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-cyan-400 focus-visible:ring-offset-2 focus-visible:ring-offset-gray-900 disabled:opacity-50 disabled:cursor-not-allowed  ",\n        className,\n      )}\n      {...props}\n    />\n  );\n};\n',
  },
  {
    id: "PricingCard",
    element:
      'import React from "react";\nimport { cn } from "../utils/lib";\n\nexport const Textarea = ({ className, ...props }) => {\n  return (\n    <textarea\n      className={cn(\n        "flex min-h-[80px] w-full rounded-xl border border-gray-700 bg-gray-800 px-4 py-3 text-sm text-white placeholder:text-gray-400 shadow-sm transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-cyan-400 focus-visible:ring-offset-2 focus-visible:ring-offset-gray-900 disabled:opacity-50 disabled:cursor-not-allowed  ",\n        className,\n      )}\n      {...props}\n    />\n  );\n};\n',
  },
  {
    id: "Resizable",
    element:
      'import React, { useCallback, useEffect, useRef, useState } from "react";\nimport { cn } from "../utils/lib";\n\nexport default function Resizable({\n  className,\n  defaultPosition,\n  horizontal: horizontalValue,\n  children,\n}) {\n  // refrence of the container\n  const containerRef = useRef(null);\n  const draggerRef = useRef(null);\n\n  const [dividerPosition, setDividerPosition] = useState(\n    (defaultPosition ?? horizontalValue)\n      ? window.innerHeight - window.innerHeight / 3\n      : window.innerWidth / 5,\n  );\n  const [mouseX, setMouseX] = useState(0);\n  const [mouseDown, setMouseDown] = useState(false);\n\n  const handleMouseUpDown = useCallback(() => {\n    const controller = new AbortController();\n    if (draggerRef.current) {\n      draggerRef.current.addEventListener(\n        "mousedown",\n        () => {\n          setMouseDown(true);\n        },\n        {\n          signal: controller.signal,\n        },\n      );\n\n      draggerRef.current.addEventListener(\n        "mouseup",\n        () => {\n          setMouseDown(false);\n        },\n        {\n          signal: controller.signal,\n        },\n      );\n    }\n    return () => {\n      controller.abort();\n    };\n  }, [draggerRef.current, setMouseDown]);\n\n  React.useEffect(() => {\n    handleMouseUpDown();\n  }, [draggerRef]);\n\n  useEffect(() => {\n    if (mouseDown) setDividerPosition(mouseX);\n  }, [mouseX, mouseDown]);\n\n  return (\n    <div\n      ref={containerRef}\n      onMouseMove={(ev) => {\n        setMouseX(horizontalValue ? ev.clientY : ev.clientX);\n      }}\n      className={cn(\n        `w-full h-full flex ${horizontalValue ? "flex-col" : null}`,\n        className,\n      )}\n    >\n      <div\n        style={{\n          width: horizontalValue ? "100%" : dividerPosition,\n          height: horizontalValue ? dividerPosition : "100%",\n        }}\n      >\n        {children[0]}\n      </div>\n      <div\n        ref={draggerRef}\n        className={`${\n          horizontalValue\n            ? "w-auto h-1 cursor-row-resize"\n            : "h-full w-1 cursor-col-resize"\n        } relative group`}\n      >\n        <div\n          role="span"\n          aria-checked={mouseDown ? "true" : "false"}\n          className={`${\n            horizontalValue\n              ? "top-1/2 left-0 right-0 bottom-1/2 -translate-y-1/2 h-0.5 group-hover:h-1"\n              : "top-0 left-1/2 right-1/2 bottom-0 -translate-x-1/2 w-0.5 group-hover:w-1"\n          } absolute z-10  bg-[#263147] transition-all group-hover:bg-amber-300 aria-checked:bg-amber-300`}\n        />\n      </div>\n      <div\n        style={{\n          width: horizontalValue\n            ? "w-full"\n            : containerRef.current\n              ? containerRef.current.offsetWidth - dividerPosition\n              : 0,\n          height: horizontalValue\n            ? containerRef.current\n              ? containerRef.current.offsetHeight - dividerPosition\n              : 0\n            : "h-full",\n        }}\n      >\n        {children[1]}\n      </div>\n    </div>\n  );\n}\n',
  },
  {
    id: "Skeleton",
    element:
      'import { cn } from "../utils/lib";\n\nconst Skeleton = ({ className }) => {\n  return (\n    <div\n      className={cn(`bg-gray-600 animate-pulse rounded-full ${className}`)}\n    ></div>\n  );\n};\n\nexport default Skeleton;\n',
  },
  {
    id: "Spinner",
    element:
      'import React from "react";\nimport { cn } from "../utils/lib";\nimport { useTheme } from "../hooks/theme";\nexport const Spinner = ({ className = "" }) => {\n  const { theme } = useTheme();\n  return (\n    <div class={cn("flex space-x-2 justify-center items-center ", className)}>\n      <div\n        class={`h-3 w-3 ${theme === "dark" ? "bg-white" : "bg-black"} rounded-full animate-bounce [animation-delay:-0.3s]`}\n      ></div>\n      <div\n        class={`h-3 w-3 ${theme === "dark" ? "bg-white" : "bg-black"}  rounded-full animate-bounce [animation-delay:-0.15s]`}\n      ></div>\n      <div\n        class={`h-3 w-3 ${theme === "dark" ? "bg-white" : "bg-black"} rounded-full animate-bounce`}\n      ></div>\n    </div>\n  );\n};\n',
  },
  {
    id: "Switch",
    element:
      'import React, { useState } from "react";\n\nexport default function Switch({ defaultState = false }) {\n  const [state, setState] = useState(defaultState);\n\n  return (\n    <div\n      role="switch"\n      tabIndex={0}\n      onClick={() => setState(!state)}\n      className={`w-8 h-5 cursor-pointer bg-neutral-100 rounded-full relative`}\n    >\n      <div\n        className={`size-4 bg-black rounded-full absolute transition-all ease-in-out duration-300 top-1/2 ${\n          state ? "translate-x-0.5" : "translate-x-3.5"\n        } -translate-y-1/2`}\n      />\n    </div>\n  );\n}\n',
  },
  {
    id: "Tabs",
    element:
      'import React, { useCallback, useEffect, useRef, useState } from "react";\nimport { cn } from "../utils/lib";\n\nexport default function Resizable({\n  className,\n  defaultPosition,\n  horizontal: horizontalValue,\n  children,\n}) {\n  // refrence of the container\n  const containerRef = useRef(null);\n  const draggerRef = useRef(null);\n\n  const [dividerPosition, setDividerPosition] = useState(\n    (defaultPosition ?? horizontalValue)\n      ? window.innerHeight - window.innerHeight / 3\n      : window.innerWidth / 5,\n  );\n  const [mouseX, setMouseX] = useState(0);\n  const [mouseDown, setMouseDown] = useState(false);\n\n  const handleMouseUpDown = useCallback(() => {\n    const controller = new AbortController();\n    if (draggerRef.current) {\n      draggerRef.current.addEventListener(\n        "mousedown",\n        () => {\n          setMouseDown(true);\n        },\n        {\n          signal: controller.signal,\n        },\n      );\n\n      draggerRef.current.addEventListener(\n        "mouseup",\n        () => {\n          setMouseDown(false);\n        },\n        {\n          signal: controller.signal,\n        },\n      );\n    }\n    return () => {\n      controller.abort();\n    };\n  }, [draggerRef.current, setMouseDown]);\n\n  React.useEffect(() => {\n    handleMouseUpDown();\n  }, [draggerRef]);\n\n  useEffect(() => {\n    if (mouseDown) setDividerPosition(mouseX);\n  }, [mouseX, mouseDown]);\n\n  return (\n    <div\n      ref={containerRef}\n      onMouseMove={(ev) => {\n        setMouseX(horizontalValue ? ev.clientY : ev.clientX);\n      }}\n      className={cn(\n        `w-full h-full flex ${horizontalValue ? "flex-col" : null}`,\n        className,\n      )}\n    >\n      <div\n        style={{\n          width: horizontalValue ? "100%" : dividerPosition,\n          height: horizontalValue ? dividerPosition : "100%",\n        }}\n      >\n        {children[0]}\n      </div>\n      <div\n        ref={draggerRef}\n        className={`${\n          horizontalValue\n            ? "w-auto h-1 cursor-row-resize"\n            : "h-full w-1 cursor-col-resize"\n        } relative group`}\n      >\n        <div\n          role="span"\n          aria-checked={mouseDown ? "true" : "false"}\n          className={`${\n            horizontalValue\n              ? "top-1/2 left-0 right-0 bottom-1/2 -translate-y-1/2 h-0.5 group-hover:h-1"\n              : "top-0 left-1/2 right-1/2 bottom-0 -translate-x-1/2 w-0.5 group-hover:w-1"\n          } absolute z-10  bg-[#263147] transition-all group-hover:bg-amber-300 aria-checked:bg-amber-300`}\n        />\n      </div>\n      <div\n        style={{\n          width: horizontalValue\n            ? "w-full"\n            : containerRef.current\n              ? containerRef.current.offsetWidth - dividerPosition\n              : 0,\n          height: horizontalValue\n            ? containerRef.current\n              ? containerRef.current.offsetHeight - dividerPosition\n              : 0\n            : "h-full",\n        }}\n      >\n        {children[1]}\n      </div>\n    </div>\n  );\n}\n',
  },
  {
    id: "Testimonial",
    element:
      'import React, { useCallback, useEffect, useRef, useState } from "react";\nimport { cn } from "../utils/lib";\n\nexport default function Resizable({\n  className,\n  defaultPosition,\n  horizontal: horizontalValue,\n  children,\n}) {\n  // refrence of the container\n  const containerRef = useRef(null);\n  const draggerRef = useRef(null);\n\n  const [dividerPosition, setDividerPosition] = useState(\n    (defaultPosition ?? horizontalValue)\n      ? window.innerHeight - window.innerHeight / 3\n      : window.innerWidth / 5,\n  );\n  const [mouseX, setMouseX] = useState(0);\n  const [mouseDown, setMouseDown] = useState(false);\n\n  const handleMouseUpDown = useCallback(() => {\n    const controller = new AbortController();\n    if (draggerRef.current) {\n      draggerRef.current.addEventListener(\n        "mousedown",\n        () => {\n          setMouseDown(true);\n        },\n        {\n          signal: controller.signal,\n        },\n      );\n\n      draggerRef.current.addEventListener(\n        "mouseup",\n        () => {\n          setMouseDown(false);\n        },\n        {\n          signal: controller.signal,\n        },\n      );\n    }\n    return () => {\n      controller.abort();\n    };\n  }, [draggerRef.current, setMouseDown]);\n\n  React.useEffect(() => {\n    handleMouseUpDown();\n  }, [draggerRef]);\n\n  useEffect(() => {\n    if (mouseDown) setDividerPosition(mouseX);\n  }, [mouseX, mouseDown]);\n\n  return (\n    <div\n      ref={containerRef}\n      onMouseMove={(ev) => {\n        setMouseX(horizontalValue ? ev.clientY : ev.clientX);\n      }}\n      className={cn(\n        `w-full h-full flex ${horizontalValue ? "flex-col" : null}`,\n        className,\n      )}\n    >\n      <div\n        style={{\n          width: horizontalValue ? "100%" : dividerPosition,\n          height: horizontalValue ? dividerPosition : "100%",\n        }}\n      >\n        {children[0]}\n      </div>\n      <div\n        ref={draggerRef}\n        className={`${\n          horizontalValue\n            ? "w-auto h-1 cursor-row-resize"\n            : "h-full w-1 cursor-col-resize"\n        } relative group`}\n      >\n        <div\n          role="span"\n          aria-checked={mouseDown ? "true" : "false"}\n          className={`${\n            horizontalValue\n              ? "top-1/2 left-0 right-0 bottom-1/2 -translate-y-1/2 h-0.5 group-hover:h-1"\n              : "top-0 left-1/2 right-1/2 bottom-0 -translate-x-1/2 w-0.5 group-hover:w-1"\n          } absolute z-10  bg-[#263147] transition-all group-hover:bg-amber-300 aria-checked:bg-amber-300`}\n        />\n      </div>\n      <div\n        style={{\n          width: horizontalValue\n            ? "w-full"\n            : containerRef.current\n              ? containerRef.current.offsetWidth - dividerPosition\n              : 0,\n          height: horizontalValue\n            ? containerRef.current\n              ? containerRef.current.offsetHeight - dividerPosition\n              : 0\n            : "h-full",\n        }}\n      >\n        {children[1]}\n      </div>\n    </div>\n  );\n}\n',
  },
  {
    id: "Textarea",
    element:
      'import React, { useCallback, useEffect, useRef, useState } from "react";\nimport { cn } from "../utils/lib";\n\nexport default function Resizable({\n  className,\n  defaultPosition,\n  horizontal: horizontalValue,\n  children,\n}) {\n  // refrence of the container\n  const containerRef = useRef(null);\n  const draggerRef = useRef(null);\n\n  const [dividerPosition, setDividerPosition] = useState(\n    (defaultPosition ?? horizontalValue)\n      ? window.innerHeight - window.innerHeight / 3\n      : window.innerWidth / 5,\n  );\n  const [mouseX, setMouseX] = useState(0);\n  const [mouseDown, setMouseDown] = useState(false);\n\n  const handleMouseUpDown = useCallback(() => {\n    const controller = new AbortController();\n    if (draggerRef.current) {\n      draggerRef.current.addEventListener(\n        "mousedown",\n        () => {\n          setMouseDown(true);\n        },\n        {\n          signal: controller.signal,\n        },\n      );\n\n      draggerRef.current.addEventListener(\n        "mouseup",\n        () => {\n          setMouseDown(false);\n        },\n        {\n          signal: controller.signal,\n        },\n      );\n    }\n    return () => {\n      controller.abort();\n    };\n  }, [draggerRef.current, setMouseDown]);\n\n  React.useEffect(() => {\n    handleMouseUpDown();\n  }, [draggerRef]);\n\n  useEffect(() => {\n    if (mouseDown) setDividerPosition(mouseX);\n  }, [mouseX, mouseDown]);\n\n  return (\n    <div\n      ref={containerRef}\n      onMouseMove={(ev) => {\n        setMouseX(horizontalValue ? ev.clientY : ev.clientX);\n      }}\n      className={cn(\n        `w-full h-full flex ${horizontalValue ? "flex-col" : null}`,\n        className,\n      )}\n    >\n      <div\n        style={{\n          width: horizontalValue ? "100%" : dividerPosition,\n          height: horizontalValue ? dividerPosition : "100%",\n        }}\n      >\n        {children[0]}\n      </div>\n      <div\n        ref={draggerRef}\n        className={`${\n          horizontalValue\n            ? "w-auto h-1 cursor-row-resize"\n            : "h-full w-1 cursor-col-resize"\n        } relative group`}\n      >\n        <div\n          role="span"\n          aria-checked={mouseDown ? "true" : "false"}\n          className={`${\n            horizontalValue\n              ? "top-1/2 left-0 right-0 bottom-1/2 -translate-y-1/2 h-0.5 group-hover:h-1"\n              : "top-0 left-1/2 right-1/2 bottom-0 -translate-x-1/2 w-0.5 group-hover:w-1"\n          } absolute z-10  bg-[#263147] transition-all group-hover:bg-amber-300 aria-checked:bg-amber-300`}\n        />\n      </div>\n      <div\n        style={{\n          width: horizontalValue\n            ? "w-full"\n            : containerRef.current\n              ? containerRef.current.offsetWidth - dividerPosition\n              : 0,\n          height: horizontalValue\n            ? containerRef.current\n              ? containerRef.current.offsetHeight - dividerPosition\n              : 0\n            : "h-full",\n        }}\n      >\n        {children[1]}\n      </div>\n    </div>\n  );\n}\n',
  },
  {
    id: "Toast",
    element:
      'import React, { useCallback, useEffect, useRef, useState } from "react";\nimport { cn } from "../utils/lib";\n\nexport default function Resizable({\n  className,\n  defaultPosition,\n  horizontal: horizontalValue,\n  children,\n}) {\n  // refrence of the container\n  const containerRef = useRef(null);\n  const draggerRef = useRef(null);\n\n  const [dividerPosition, setDividerPosition] = useState(\n    (defaultPosition ?? horizontalValue)\n      ? window.innerHeight - window.innerHeight / 3\n      : window.innerWidth / 5,\n  );\n  const [mouseX, setMouseX] = useState(0);\n  const [mouseDown, setMouseDown] = useState(false);\n\n  const handleMouseUpDown = useCallback(() => {\n    const controller = new AbortController();\n    if (draggerRef.current) {\n      draggerRef.current.addEventListener(\n        "mousedown",\n        () => {\n          setMouseDown(true);\n        },\n        {\n          signal: controller.signal,\n        },\n      );\n\n      draggerRef.current.addEventListener(\n        "mouseup",\n        () => {\n          setMouseDown(false);\n        },\n        {\n          signal: controller.signal,\n        },\n      );\n    }\n    return () => {\n      controller.abort();\n    };\n  }, [draggerRef.current, setMouseDown]);\n\n  React.useEffect(() => {\n    handleMouseUpDown();\n  }, [draggerRef]);\n\n  useEffect(() => {\n    if (mouseDown) setDividerPosition(mouseX);\n  }, [mouseX, mouseDown]);\n\n  return (\n    <div\n      ref={containerRef}\n      onMouseMove={(ev) => {\n        setMouseX(horizontalValue ? ev.clientY : ev.clientX);\n      }}\n      className={cn(\n        `w-full h-full flex ${horizontalValue ? "flex-col" : null}`,\n        className,\n      )}\n    >\n      <div\n        style={{\n          width: horizontalValue ? "100%" : dividerPosition,\n          height: horizontalValue ? dividerPosition : "100%",\n        }}\n      >\n        {children[0]}\n      </div>\n      <div\n        ref={draggerRef}\n        className={`${\n          horizontalValue\n            ? "w-auto h-1 cursor-row-resize"\n            : "h-full w-1 cursor-col-resize"\n        } relative group`}\n      >\n        <div\n          role="span"\n          aria-checked={mouseDown ? "true" : "false"}\n          className={`${\n            horizontalValue\n              ? "top-1/2 left-0 right-0 bottom-1/2 -translate-y-1/2 h-0.5 group-hover:h-1"\n              : "top-0 left-1/2 right-1/2 bottom-0 -translate-x-1/2 w-0.5 group-hover:w-1"\n          } absolute z-10  bg-[#263147] transition-all group-hover:bg-amber-300 aria-checked:bg-amber-300`}\n        />\n      </div>\n      <div\n        style={{\n          width: horizontalValue\n            ? "w-full"\n            : containerRef.current\n              ? containerRef.current.offsetWidth - dividerPosition\n              : 0,\n          height: horizontalValue\n            ? containerRef.current\n              ? containerRef.current.offsetHeight - dividerPosition\n              : 0\n            : "h-full",\n        }}\n      >\n        {children[1]}\n      </div>\n    </div>\n  );\n}\n',
  },
  {
    id: "ToolTip",
    element:
      'import React, { useState } from "react";\nimport { cn } from "../utils/lib.js";\n\nexport const Tooltip = ({\n  children,\n  title = "",\n  options = {\n    delay: 300,\n    containerClassName: "",\n    tooltipStyle: {},\n  },\n}) => {\n  const [visible, setVisible] = useState(false);\n  let timeout;\n\n  const showTooltip = () => {\n    timeout = setTimeout(() => {\n      setVisible(true);\n    }, options.delay);\n  };\n  const hideTooltip = () => {\n    timeout = setTimeout(() => {\n      clearTimeout(timeout);\n      setVisible(false);\n    }, options.delay);\n  };\n\n  return (\n    <div\n      className={cn("relative inline-block mt-10", options?.containerClassName)}\n    >\n      {visible && (\n        <div\n          style={options?.tootipStyle}\n          className={cn(\n            "absolute bottom-full truncate left-1/2 -translate-x-1/2 text-sm text-center w-28 h-8 font-sans font-medium  px-4 py-1 rounded-md  text-black bg-white shadow-lg transition-opacity duration-300 opacity-100",\n            options.tooltipClassName,\n          )}\n        >\n          {title}\n        </div>\n      )}\n\n      <div\n        onMouseEnter={showTooltip}\n        onMouseLeave={hideTooltip}\n        aria-label={title}\n        className="px-2 py-1 rounded-sm"\n      >\n        {children}\n      </div>\n    </div>\n  );\n};\n',
  },
  {
    id: "VideoPlayer",
    element:
      'import { Star } from "lucide-react";\n\nconst Testimonials = ({ imageSrc, name, title, rating = 5, message }) => {\n  return (\n    <div className="m-4 flex flex-col gap-2.5 shadow-sm p-4 text-black grainy-light max-w-xl rounded-xs">\n      <div className="flex items-center justify-between">\n        <div className="flex gap-2 justify-center items-center">\n          <img\n            src={imageSrc ? imageSrc : "hitesh-sir.png"}\n            alt={"../hitesh-sir.png"}\n            className="w-10 h-10 rounded-full object-cover"\n          />\n          <div className="flex flex-col items-start">\n            <div>{name}</div>\n            <div className="text-[12.8px] opacity-60">{title}</div>\n          </div>\n        </div>\n\n        <div className="flex gap-0.5 mb-2">\n          {Array.from({ length: 5 }).map((_, index) => (\n            <Star\n              key={index}\n              className={`h-5 w-5 ${\n                index < rating\n                  ? "text-yellow-400 fill-yellow-400"\n                  : "text-gray-300 fill-gray-300"\n              }`}\n            />\n          ))}\n        </div>\n      </div>\n\n      <p className="text-left">{message}</p>\n    </div>\n  );\n};\n\nexport default Testimonials;\n',
  },
];
