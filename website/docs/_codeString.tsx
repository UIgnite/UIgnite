export default [
  {
    id: 'Accordion',
    element:
      "import React, {useState} from 'react';\r\nimport {ReactElement} from 'react';\r\nimport {cn} from '@/lib/utils';\r\nimport {ChevronDown} from 'lucide-react';\r\n\r\nexport interface AccordionParams {\r\n  title: string;\r\n  content: string;\r\n  className?: string;\r\n  defaultOpen?: boolean;\r\n  isOpen?: boolean | null;\r\n  onToggle?: () => void;\r\n}\r\n\r\nconst Accordion = ({\r\n  title,\r\n  content,\r\n  className = '',\r\n  defaultOpen = false,\r\n  isOpen = null,\r\n  onToggle,\r\n}: AccordionParams) => {\r\n  const [visible, setVisible] = useState(defaultOpen);\r\n  const toggleAccordion = () => {\r\n    setVisible(!visible);\r\n  };\r\n  return (\r\n    <div\r\n      className={cn(\r\n        'border-[0.5px] border-zinc-700/20 rounded-xl mt-[0.5px] overflow-hidden',\r\n        className\r\n      )}\r\n    >\r\n      {/* Accordion Header */}\r\n      {/* Bg color rendering inssue in switching modes  */}\r\n      <div\r\n        onClick={onToggle ?? toggleAccordion}\r\n        className=\"cursor-pointer dark:bg-zinc-900 dark:hover:bg-neutral-800   px-4 py-3 flex items-center justify-between  duration-300  \"\r\n      >\r\n        <span className=\"text-black dark:text-white font-medium  \">\r\n          {title}\r\n        </span>\r\n\r\n        <ChevronDown\r\n          className={cn(\r\n            'transition-transform duration-300 transform text-black dark:text-white mr-4 ',\r\n            (isOpen ?? visible) ? 'rotate-180' : 'rotate-0'\r\n          )}\r\n        />\r\n      </div>\r\n\r\n      {/* Accordion Content */}\r\n      <div\r\n        className={cn(\r\n          'transition-all duration-300  dark:bg-zinc-800 px-4 dark:text-white text-sm',\r\n          (isOpen ?? visible)\r\n            ? 'max-h-96 opacity-100 py-3'\r\n            : 'max-h-0 opacity-0 py-0 overflow-hidden'\r\n        )}\r\n      >\r\n        {content}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\ninterface AccordionWrapperParams {\r\n  children: ReactElement<AccordionParams> | ReactElement<AccordionParams>[];\r\n}\r\n\r\nconst AccordionWrapper = ({children}: AccordionWrapperParams) => {\r\n  const [activeIndex, setActiveIndex] = useState<number | null>(null);\r\n\r\n  return (\r\n    <div>\r\n      {React.Children.map(children, (child, index) =>\r\n        React.isValidElement(child)\r\n          ? React.cloneElement(child, {\r\n              isOpen: activeIndex === index,\r\n              onToggle: () =>\r\n                setActiveIndex(activeIndex === index ? null : index),\r\n            })\r\n          : child\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport {AccordionWrapper, Accordion as default};\r\n",
  },
  {
    id: 'Avatar',
    element:
      "import React from 'react';\r\nimport {cn} from '@/lib/utils';\r\n\r\nexport interface AvatarProps extends React.ImgHTMLAttributes<HTMLImageElement> {\r\n  url: string;\r\n  alt: string;\r\n  className?: string;\r\n}\r\n\r\nconst Avatar = React.forwardRef<HTMLImageElement, AvatarProps>(\r\n  ({url, alt, className = '', ...props}, ref) => {\r\n    return (\r\n      <div className=\"flex gap-4 mt-2\">\r\n        <img\r\n          ref={ref}\r\n          src={url ? url : 'https://avatar.iran.liara.run/public'}\r\n          alt={alt}\r\n          className={cn(\r\n            'size-12 rounded-full border border-neutral-300',\r\n            className\r\n          )}\r\n          {...props}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n);\r\n\r\nAvatar.displayName = 'Avatar';\r\n\r\nexport default Avatar;\r\n",
  },
  {
    id: 'Button',
    element:
      "import React, {useEffect, useState} from 'react';\r\nimport {cn} from '@/lib/utils';\r\nimport {cva} from 'class-variance-authority';\r\nimport {Spinner} from '@/components/Spinner';\r\n\r\nexport interface ButtonParams\r\n  extends React.ButtonHTMLAttributes<HTMLButtonElement> {\r\n  size?: 'default' | 'sm' | 'lg' | 'xl' | 'icon';\r\n  className?: string;\r\n  isLoading?: boolean;\r\n  icon?: React.ReactNode;\r\n  variant?:\r\n    | 'primary'\r\n    | 'destructive'\r\n    | 'success'\r\n    | 'warning'\r\n    | 'outline'\r\n    | 'secondary'\r\n    | 'ghost'\r\n    | 'glass'\r\n    | 'gradient'\r\n    | 'dark'\r\n    | 'light'\r\n    | 'movingBorder';\r\n  fullWidth?: boolean;\r\n  animatedBorder?: boolean;\r\n  gradientBorder?: boolean;\r\n  responsiveSize?: 'auto' | 'compact' | 'expand';\r\n}\r\n\r\nexport const Button = React.forwardRef<\r\n  HTMLButtonElement,\r\n  React.PropsWithChildren<ButtonParams>\r\n>(\r\n  (\r\n    {\r\n      children,\r\n      size = 'default',\r\n      className = '',\r\n      isLoading = false,\r\n      icon,\r\n      variant = 'primary',\r\n      fullWidth,\r\n      animatedBorder = false,\r\n      gradientBorder = false,\r\n      responsiveSize,\r\n      ...props\r\n    },\r\n    ref\r\n  ) => {\r\n    const [animationPosition, setAnimationPosition] = useState({x: 0, y: 0});\r\n\r\n    useEffect(() => {\r\n      if (!animatedBorder) return;\r\n\r\n      const interval = setInterval(() => {\r\n        setAnimationPosition((prev) => ({\r\n          x: (prev.x + 1) % 100,\r\n          y: (prev.y + 1) % 100,\r\n        }));\r\n      }, 50);\r\n\r\n      return () => clearInterval(interval);\r\n    }, [animatedBorder]);\r\n\r\n    const buttonVariants = cva(\r\n      'inline-flex text-4xl items-center cursor-pointer justify-center whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 relative',\r\n      {\r\n        variants: {\r\n          variant: {\r\n            primary: 'bg-[#305CDE] text-white hover:bg-blue-600',\r\n            destructive: 'bg-red-500 text-white hover:bg-red-600',\r\n            success: 'bg-[#00b306] text-white hover:bg-green-600',\r\n            warning: 'bg-[#ff8a00] text-white hover:bg-yellow-600',\r\n            outline: 'border border-gray-500 bg-transparent hover:bg-gray-700',\r\n            secondary: 'bg-rose-500 text-white hover:bg-rose-400',\r\n            ghost:\r\n              'dark:hover:bg-gray-700 dark:text-white text-gray-700 hover:bg-gray-800 hover:text-gray-100',\r\n            glass:\r\n              'dark:bg-white/10 backdrop-blur-md border border-black/10 dark:border-white/20 dark:text-white dark:hover:bg-white/20 hover:bg-white/60',\r\n            gradient:\r\n              'bg-gradient-to-r from-[#d60db8] to-[#1919e0] text-white hover:from-blue-600 hover:to-purple-700',\r\n            dark: 'bg-black text-white hover:bg-black/70',\r\n            light: 'bg-gray-50 text-black hover:bg-gray-100',\r\n            movingBorder: 'text-white bg-black border-none',\r\n          },\r\n          size: {\r\n            default: 'h-10 px-4 py-2 min-w-[90px]',\r\n            sm: 'h-9 rounded-md px-3 min-w-[80px]',\r\n            lg: 'h-11 rounded-md px-8 min-w-[110px]',\r\n            xl: 'h-12 rounded-md px-10 min-w-[130px] text-base',\r\n            icon: 'h-10 w-10 min-w-[40px]',\r\n          },\r\n          fullWidth: {\r\n            true: 'w-full',\r\n            false: '',\r\n          },\r\n          responsiveSize: {\r\n            auto: 'md:text-base text-xs md:h-10 h-8 md:px-4 px-2',\r\n            compact:\r\n              'lg:h-10 md:h-9 h-8 lg:px-4 md:px-3 px-2 lg:text-sm text-xs',\r\n            expand: 'lg:h-12 md:h-11 h-10 lg:px-8 md:px-6 px-4',\r\n          },\r\n        },\r\n        defaultVariants: {\r\n          variant: 'primary',\r\n          size: 'default',\r\n          fullWidth: false,\r\n          responsiveSize: undefined,\r\n        },\r\n      }\r\n    );\r\n\r\n    const getBorderStyle = () => {\r\n      if (animatedBorder) {\r\n        return {\r\n          backgroundImage: `linear-gradient(90deg, #00f0ff, #00ff6a, #ff00e6, #0096ff)`,\r\n          backgroundSize: '300% 300%',\r\n          backgroundPosition: `${animationPosition.x}% ${animationPosition.y}%`,\r\n          padding: '2px',\r\n          borderRadius: '0.375rem',\r\n          animation: '5s ease infinite',\r\n        };\r\n      }\r\n      if (gradientBorder) {\r\n        return {\r\n          backgroundImage:\r\n            'linear-gradient(to right, #4f46e5, #9333ea, #e11d48)',\r\n          padding: '2px',\r\n          borderRadius: '0.375rem',\r\n        };\r\n      }\r\n      return undefined;\r\n    };\r\n\r\n    const buttonContent = (\r\n      <>\r\n        {isLoading ? (\r\n          <Spinner className={cn(children ? 'mr-2' : '')} />\r\n        ) : icon ? (\r\n          <span className={cn(children ? 'mr-2' : '')}>{icon}</span>\r\n        ) : null}\r\n        {children}\r\n      </>\r\n    );\r\n\r\n    const renderButton = () => (\r\n      <button\r\n        {...props}\r\n        ref={ref}\r\n        className={cn(\r\n          buttonVariants({\r\n            variant: animatedBorder || gradientBorder ? 'dark' : variant,\r\n            size,\r\n            fullWidth,\r\n            responsiveSize,\r\n            className: cn(\r\n              (animatedBorder || gradientBorder) &&\r\n                'w-full m-0 rounded-[calc(0.375rem-1px)]',\r\n              className\r\n            ),\r\n          })\r\n        )}\r\n      >\r\n        {buttonContent}\r\n      </button>\r\n    );\r\n\r\n    const borderStyle = getBorderStyle();\r\n\r\n    return borderStyle ? (\r\n      <div\r\n        className={cn('inline-flex', fullWidth && 'w-full')}\r\n        style={borderStyle}\r\n      >\r\n        {renderButton()}\r\n      </div>\r\n    ) : (\r\n      renderButton()\r\n    );\r\n  }\r\n);\r\n\r\nButton.displayName = 'Button';\r\n",
  },
  {
    id: 'Dropdown',
    element:
      'import React, {useCallback, useRef, useState} from \'react\';\nimport {Button} from \'@/components/Button\';\n\nexport default function Dropdown({\n  children,\n  button,\n  title = \'Open\',\n}: React.PropsWithChildren<{button?: React.ReactNode; title?: string}>) {\n  const buttonRef = useRef<HTMLDivElement | null>(null);\n  const dropDownRef = useRef(null);\n\n  const [open, setOpen] = useState(false);\n\n  const handleToogleOpen = useCallback(() => {\n    setOpen(!open);\n  }, [open, setOpen]);\n\n  return (\n    <React.Fragment>\n      {open ? (\n        <span\n          onClick={handleToogleOpen}\n          className="fixed z-10 bg-black/20 inset-0"\n        ></span>\n      ) : null}\n      <div>\n        {open ? (\n          <div\n            ref={dropDownRef}\n            style={{\n              top: (buttonRef.current?.getBoundingClientRect()?.top ?? 0) + 50,\n            }}\n            className="min-w-56 fixed z-20 bg-neutral-200 min-h-5 rounded-lg border border-neutral-400 shadow p-1 flex flex-col gap-y-1"\n          >\n            {children}\n          </div>\n        ) : null}\n        <div ref={buttonRef} role="button" onClick={handleToogleOpen}>\n          {button ?? <Button>{title}</Button>}\n        </div>\n      </div>\n    </React.Fragment>\n  );\n}\n',
  },
  {
    id: 'Footer',
    element:
      '// import {\n//   FaLinkedinIn,\n//   FaXTwitter,\n//   FaInstagram,\n//   FaYoutube,\n// } from "react-icons/fa6";\n\n// interface FooterParams {\n\n// }\n// const socialIconsMap = {\n//   linkedin: <FaLinkedinIn />,\n//   twitter: <FaXTwitter />,\n//   instagram: <FaInstagram />,\n//   youtube: <FaYoutube />,\n// };\n\n// const Footer = ({\n//   lightLogo,\n//   darkLogo,\n//   description = "",\n//   socials = [],\n//   sections = [],\n//   copyright,\n// }) => {\n//   return (\n//     <footer className="!dark py-10 px-6 md:px-20 transition-all shadow-lg">\n//       <div className="flex flex-col md:flex-row justify-between gap-10">\n//         {/* Logo & Description */}\n//         <div className="max-w-sm">\n//           <img\n//             src={lightLogo}\n//             alt="Logo"\n//             className="h-10 w-auto mb-4 block dark:hidden"\n//           />\n//           <img\n//             src={darkLogo}\n//             alt="Logo"\n//             className="h-10 w-auto mb-4 hidden dark:block"\n//           />\n\n//           <p className="!dark text-sm text-gray-700 dark:text-gray-400 text-shadow-md">\n//             {description}\n//           </p>\n\n//           {/* Social Icons */}\n//           <div className="flex gap-4 mt-6">\n//             {socials.map((social, idx) => (\n//               <a\n//                 key={idx}\n//                 href={social.link}\n//                 target="_blank"\n//                 rel="noopener noreferrer"\n//                 className="!dark w-10 h-10 flex items-center justify-center rounded-full transition-all duration-300\n//                   bg-gray-200 hover:bg-black hover:text-white hover:shadow-lg\n//                   dark:bg-gray-900 dark:hover:bg-white dark:hover:text-black"\n//               >\n//                 {socialIconsMap[social.type]}\n//               </a>\n//             ))}\n//           </div>\n//         </div>\n\n//         {/* Footer Links */}\n//         <div className="grid grid-cols-2 sm:grid-cols-4 gap-6 text-sm">\n//           {sections.map((section, idx) => (\n//             <div key={idx}>\n//               <h3 className="!dark font-semibold mb-4 text-shadow-lg text-black dark:text-white">\n//                 {section.title}\n//               </h3>\n//               <ul className="!dark space-y-2 text-gray-600 dark:text-gray-400">\n//                 {section.links.map((link, index) => (\n//                   <li key={index}>\n//                     <a\n//                       href={link.href}\n//                       className="!dark transition-all hover:underline hover:text-black dark:hover:text-white"\n//                     >\n//                       {link.label}\n//                     </a>\n//                   </li>\n//                 ))}\n//               </ul>\n//             </div>\n//           ))}\n//         </div>\n//       </div>\n\n//       {/* Copyright */}\n//       <div\n//         className="!dark text-center text-sm mt-10 pt-4 border-t\n//         border-gray-300 text-gray-600\n//         dark:border-gray-800 dark:text-gray-500"\n//       >\n//         {copyright}\n//       </div>\n//     </footer>\n//   );\n// };\n\n// export default Footer;\n',
  },
  {
    id: 'Input',
    element:
      "import React from 'react';\r\nimport {cn} from '@/lib/utils';\r\n\r\nexport interface InputProps\r\n  extends React.InputHTMLAttributes<HTMLInputElement> {}\r\n\r\nconst Input = React.forwardRef<HTMLInputElement, InputProps>(\r\n  ({className, type = 'text', ...props}, ref) => {\r\n    return (\r\n      <input\r\n        ref={ref}\r\n        type={type}\r\n        className={cn(\r\n          'flex h-9 w-full rounded-md border border-input bg-transparent px-4 py-2 text-base shadow-sm transition-colors file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-[1.2px] focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50 md:text-sm',\r\n          className\r\n        )}\r\n        {...props}\r\n      />\r\n    );\r\n  }\r\n);\r\n\r\nInput.displayName = 'Input';\r\n\r\nexport {Input};\r\n",
  },
  {
    id: 'MessageBot',
    element:
      "import {useState} from 'react';\n\nexport interface MessageBotParams {\n  orgName?: string;\n  themeColor?: string;\n  url?: string;\n  alt?: string;\n}\n\nexport interface Message {\n  text: string;\n  sender: 'user' | 'bot';\n}\n\nconst MessageBot = ({\n  orgName = 'UIgnite',\n  themeColor = 'bg-blue-600',\n  url = '/assets/logo.webp',\n  // alt,\n}: MessageBotParams) => {\n  const [isOpen, setIsOpen] = useState(false);\n  const [input, setInput] = useState('');\n  const [count, setCount] = useState(1);\n  const [messages, setMessages] = useState<Message[]>([\n    {\n      text: `Hi I am ${orgName} bot. How can I help you?`,\n      sender: 'bot',\n    },\n  ]);\n\n  const sendMessage = () => {\n    if (!input.trim()) return;\n\n    const userMessage: Message = {text: input, sender: 'user'};\n    const botMessage: Message = {\n      text: `bot response ${count + 1}`,\n      sender: 'bot',\n    };\n\n    setMessages((prev) => [...prev, userMessage]);\n    setInput('');\n    setCount(count + 1);\n\n    setTimeout(() => {\n      setMessages((prev) => [...prev, botMessage]);\n    }, 800);\n  };\n\n  return (\n    <div className=\"z-[1000] fixed bottom-5 right-5\">\n      {/* Overlay: Jab isOpen true ho, toh poori screen dark ya blur karne ke liye */}\n      {isOpen && (\n        <div\n          className=\"fixed inset-0 bg-black/30 z-[1000]\"\n          onClick={() => setIsOpen(false)} // Overlay click se chatbot close hoga\n        ></div>\n      )}\n\n      {/* Floating Button */}\n      <button\n        className={`cursor-pointer z-[1000] w-16 h-16 ${themeColor} text-white rounded-full shadow-lg flex items-center justify-center text-2xl hover:scale-105 transition-transform duration-200`}\n        onClick={() => setIsOpen(!isOpen)}\n      >\n        💬\n      </button>\n\n      {/* Chatbot Box */}\n      {isOpen && (\n        <div className=\"z-[1000] fixed bottom-[6.5rem] right-8 w-80 h-[32rem] bg-white rounded-lg shadow-2xl flex flex-col overflow-hidden\">\n          {/* Header */}\n          <div\n            className={`p-4 ${themeColor} text-white text-left items-center`}\n          >\n            <button\n              className=\"p-1 rounded-full hover:bg-white hover:text-black transition-colors duration-200\"\n              onClick={() => setIsOpen(false)}\n            >\n              <img src=\"/assets/logo.webp\" alt=\"Close\" className=\"w-6 h-6\" />\n            </button>\n            <span className=\"text-lg font-semibold\">{orgName}</span>\n          </div>\n\n          {/* Messages */}\n          <div className=\"flex-1 px-3 py-4 overflow-y-auto space-y-3 bg-gray-50\">\n            {messages.map((msg, index) => (\n              <div\n                key={index}\n                className={`flex items-end ${msg.sender === 'user' ? 'justify-start' : 'justify-end'}`}\n              >\n                {msg.sender === 'user' && (\n                  <img\n                    className=\"rounded-full h-6 w-6 object-cover mr-2\"\n                    src={url || 'https://avatar.iran.liara.run/public'}\n                    alt=\"User\"\n                  />\n                )}\n                <div\n                  className={`max-w-[75%] px-3 py-2 text-sm rounded-md shadow-sm ${\n                    msg.sender === 'user'\n                      ? 'bg-gray-200 text-black rounded-bl-none'\n                      : 'bg-blue-100 text-black rounded-br-none'\n                  }`}\n                >\n                  {msg.text}\n                </div>\n                {msg.sender === 'bot' && (\n                  <img\n                    className=\"rounded-full h-6 w-6 object-cover ml-2\"\n                    src={'https://avatar.iran.liara.run/public'}\n                    alt=\"Bot\"\n                  />\n                )}\n              </div>\n            ))}\n          </div>\n\n          {/* Input Area */}\n          <div className=\"p-3 border border-t border-  flex items-center gap-2\">\n            <input\n              type=\"text\"\n              placeholder=\"Type a message...\"\n              className=\"flex-1 p-2 border dark:border-gray-400 text-black rounded-md dark:text:black text-sm\"\n              value={input}\n              onChange={(e) => setInput(e.target.value)}\n              onKeyDown={(e) => e.key === 'Enter' && sendMessage()}\n            />\n            <button\n              className={`px-4 py-2 ${themeColor} text-white rounded-md hover:opacity-90 transition`}\n              onClick={sendMessage}\n            >\n              ➤\n            </button>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default MessageBot;\n",
  },
  {
    id: 'Navbar',
    element:
      'import {GitHubLogoIcon} from \'@radix-ui/react-icons\';\r\nimport {ThemeToggleBtn} from \'@/lib/ThemeToggleBtn\';\r\n\r\nexport const Navbar = () => {\r\n  return (\r\n    <div className="relative  max-w-[88rem] px-4 sm:px-6 lg:px-8 flex flex-col w-full py-5 mx-auto md:flex-row md:items-center md:justify-between">\r\n      {/* logo */}\r\n      <div className="flex flex-row gap-12 items-center justify-between text-[1rem] lg:justify-start">\r\n        <img src="/favicon.png" className="w-8 object-contain" alt="Logo" />\r\n        <h4 className="text-2xl font-semibold -mt-1">\r\n          UI<span className="text-primary">gnite</span>\r\n        </h4>\r\n\r\n        {/* nav links */}\r\n        <nav className="flex justify-end space-x-2">\r\n          <a\r\n            href="/pricing"\r\n            className="cursor-pointer p-2 rounded opacity-70 hover:opacity-100"\r\n          >\r\n            <p>Docs</p>\r\n          </a>\r\n          <a\r\n            href="/components"\r\n            className="cursor-pointer p-2 rounded opacity-70 hover:opacity-100"\r\n          >\r\n            <p>Components</p>\r\n          </a>\r\n          <a\r\n            href="/"\r\n            className="cursor-pointer p-2 rounded opacity-70 hover:opacity-100"\r\n          >\r\n            <p>About</p>\r\n          </a>\r\n        </nav>\r\n      </div>\r\n\r\n      {/* github and mode switch */}\r\n      <div className="hidden md:flex md:justify-center md:items-center md:gap-1">\r\n        {/* md:justify-end md:space-x-4 */}\r\n        <ThemeToggleBtn />\r\n        <a\r\n          href="https://github.com/UIgnite/UIgnite"\r\n          target="_blank"\r\n          rel="noopener noreferrer"\r\n        >\r\n          <div className="!dark cursor-pointer p-2 rounded hover:bg-zinc-200 dark:hover:bg-zinc-700">\r\n            <GitHubLogoIcon className=" h-4 w-4 " />\r\n          </div>\r\n        </a>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n',
  },
  {
    id: 'NavMenu',
    element:
      'import React from \'react\';\n\nexport interface NavMenuProps {\n  items: string[];\n}\n\n// Dropdown Component\nconst Dropdown: React.FC<{label: string}> = ({label}) => {\n  const defaultContent: Record<string, string[]> = {\n    home: [\'GitHub\', \'Docs & Setup Guide\'],\n    resources: [\'React + Tailwind Guide\', \'Advanced UI Components\'],\n    about: [\'About Team\', \'Meet Developers\'],\n  };\n\n  const links = defaultContent[label.toLowerCase()] || [\n    \'Default Link 1\',\n    \'Default Link 2\',\n  ];\n\n  return (\n    <div className="absolute bg-gray-800 text-white p-3 rounded-md shadow-lg transition-all duration-300 ease-in-out mt-4 z-50 min-w-max max-w-md overflow-x-auto left-1/2 transform -translate-x-1/2">\n      <ul>\n        {links.map((link, idx) => (\n          <li key={idx}>\n            <a href="#" className="hover:text-cyan-300 transition duration-200">\n              {link}\n            </a>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\n// NavMenu Component\nconst NavMenu: React.FC<NavMenuProps> = ({items}) => {\n  return (\n    <div className="flex justify-center w-full mt-6">\n      <nav className="bg-gray-800 px-6 py-2 rounded-full shadow-lg shadow-cyan-500/50">\n        <ul className="flex space-x-6 items-center text-cyan-500">\n          {items.map((label) => (\n            <li key={label} className="relative group">\n              <button className="cursor-pointer hover:text-cyan-300 transition duration-200 capitalize">\n                {label}\n              </button>\n              <div className="invisible group-hover:visible opacity-0 group-hover:opacity-100 transition duration-200">\n                <Dropdown label={label} />\n              </div>\n            </li>\n          ))}\n        </ul>\n      </nav>\n    </div>\n  );\n};\n\nexport default NavMenu;\n',
  },
  {
    id: 'PricingCard',
    element:
      'import {themes} from \'@/lib/theme\';\r\n\r\ninterface ThemeSelectorParams {\r\n  currentTheme: string;\r\n  setTheme: (theme: string) => void;\r\n}\r\n\r\ninterface PricingParams {\r\n  title: string;\r\n  price: string;\r\n  validity?: string;\r\n  description: string;\r\n  features: string[];\r\n  highlighted?: boolean;\r\n  theme: string;\r\n  popular?: boolean;\r\n}\r\nexport const ThemeSelector = ({\r\n  currentTheme,\r\n  setTheme,\r\n}: ThemeSelectorParams) => {\r\n  return (\r\n    <div className="flex justify-center mb-12">\r\n      <div\r\n        className={`inline-flex rounded-md p-1 ${themes[currentTheme].border} border`}\r\n      >\r\n        {Object.keys(themes).map((theme) => (\r\n          <button\r\n            key={theme}\r\n            className={`!dark px-4 py-2 rounded-md text-sm font-medium transition-colors duration-200 ${\r\n              currentTheme === theme\r\n                ? `${themes[theme].selectBg} ${themes[theme].selectText}`\r\n                : \'text-gray-500 hover:text-gray-900 dark:text-gray-400 dark:hover:text-white\'\r\n            }`}\r\n            onClick={() => setTheme(theme)}\r\n          >\r\n            {themes[theme].name}\r\n          </button>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport const PricingCard = ({\r\n  title,\r\n  price,\r\n  validity,\r\n  description,\r\n  features,\r\n  highlighted = false,\r\n  theme,\r\n  popular = false,\r\n}: PricingParams) => {\r\n  const currentTheme = themes[theme];\r\n\r\n  return (\r\n    <div\r\n      className={`rounded-xl p-8 flex flex-col h-full relative transition-all duration-300 transform hover:scale-105 ${\r\n        highlighted ? currentTheme.highlightedCard : currentTheme.cardBackground\r\n      } ${popular ? \'ring-2 ring-offset-2 ring-offset-slate-900 ring-cyan-500\' : \'\'}`}\r\n    >\r\n      {popular && (\r\n        <div\r\n          className={`absolute -top-4 left-1/2 transform -translate-x-1/2 px-4 py-1 bg-cyan-500 text-black rounded-full text-sm font-bold`}\r\n        >\r\n          Most Popular\r\n        </div>\r\n      )}\r\n\r\n      <div className={`${currentTheme.headerText} text-sm mb-2`}>{title}</div>\r\n      <div className={`text-4xl font-bold ${currentTheme.priceText} mb-4`}>\r\n        {price} <span className="-ml-2 text-2xl">{validity}</span>\r\n      </div>\r\n      <p className={`${currentTheme.descriptionText} mb-4`}>{description}</p>\r\n      <hr className={`${currentTheme.line} mb-4 border-1.8 w-[96%]`} />\r\n      <div className="flex-grow">\r\n        {features.map((feature, index) => (\r\n          <div key={index} className="flex items-start mb-4 group">\r\n            <div className="mr-3 mt-1 transition-transform duration-300 group-hover:scale-110">\r\n              <div\r\n                className={`w-5 h-5 rounded-full ${currentTheme.checkmarkBg} flex items-center justify-center`}\r\n              >\r\n                <svg\r\n                  xmlns="http://www.w3.org/2000/svg"\r\n                  className={`h-3 w-3 ${currentTheme.checkmarkText}`}\r\n                  viewBox="0 0 20 20"\r\n                  fill="currentColor"\r\n                >\r\n                  <path\r\n                    fillRule="evenodd"\r\n                    d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z"\r\n                    clipRule="evenodd"\r\n                  />\r\n                </svg>\r\n              </div>\r\n            </div>\r\n            <div\r\n              className={`${currentTheme.featureText} group-hover:text-white transition-colors duration-300`}\r\n            >\r\n              {feature}\r\n            </div>\r\n          </div>\r\n        ))}\r\n      </div>\r\n\r\n      <a\r\n        href="https://rzp.io/rzp/FuM0wyrD"\r\n        className={`mt-8 py-3 px-4 rounded-lg font-medium transition-all text-center cursor-pointer duration-300 ${\r\n          highlighted\r\n            ? \'bg-gradient-to-r from-cyan-500 to-blue-500 text-white hover:from-cyan-600 hover:to-blue-600\'\r\n            : \'bg-gradient-to-r from-gray-700 to-gray-600 text-white hover:from-gray-600 hover:to-gray-500\'\r\n        }`}\r\n      >\r\n        Get Started\r\n      </a>\r\n    </div>\r\n  );\r\n};\r\n',
  },
  {
    id: 'Resizable',
    element:
      "import React, {\r\n  useCallback,\r\n  useEffect,\r\n  useRef,\r\n  useState,\r\n  ReactNode,\r\n} from 'react';\r\nimport {cn} from '@/lib/utils';\r\n\r\nexport interface ResizableProps {\r\n  className?: string;\r\n  defaultPosition?: number;\r\n  horizontal?: boolean;\r\n  children: [ReactNode, ReactNode]; // exactly two children expected\r\n}\r\n\r\nexport default function Resizable({\r\n  className,\r\n  defaultPosition,\r\n  horizontal: horizontalValue,\r\n  children,\r\n}: ResizableProps) {\r\n  const containerRef = useRef<HTMLDivElement | null>(null);\r\n  const draggerRef = useRef<HTMLDivElement | null>(null);\r\n\r\n  const [dividerPosition, setDividerPosition] = useState(\r\n    (defaultPosition ?? horizontalValue)\r\n      ? window.innerHeight - window.innerHeight / 3\r\n      : window.innerWidth / 5\r\n  );\r\n  const [mouseX, setMouseX] = useState(0);\r\n  const [mouseDown, setMouseDown] = useState(false);\r\n\r\n  const handleMouseUpDown = useCallback(() => {\r\n    const controller = new AbortController();\r\n    if (draggerRef.current) {\r\n      draggerRef.current.addEventListener(\r\n        'mousedown',\r\n        () => setMouseDown(true),\r\n        {signal: controller.signal}\r\n      );\r\n      draggerRef.current.addEventListener(\r\n        'mouseup',\r\n        () => setMouseDown(false),\r\n        {signal: controller.signal}\r\n      );\r\n    }\r\n    return () => {\r\n      controller.abort();\r\n    };\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    handleMouseUpDown();\r\n  }, [handleMouseUpDown]);\r\n\r\n  useEffect(() => {\r\n    if (mouseDown) setDividerPosition(mouseX);\r\n  }, [mouseX, mouseDown]);\r\n\r\n  return (\r\n    <div\r\n      ref={containerRef}\r\n      onMouseMove={(ev: React.MouseEvent<HTMLDivElement>) => {\r\n        console.log(ev);\r\n        setMouseX(horizontalValue ? ev.clientY : ev.clientX);\r\n      }}\r\n      className={cn(\r\n        `w-full h-full flex ${horizontalValue ? 'flex-col' : ''}`,\r\n        className\r\n      )}\r\n    >\r\n      <div\r\n        style={{\r\n          width: horizontalValue ? '100%' : dividerPosition,\r\n          height: horizontalValue ? dividerPosition : '100%',\r\n        }}\r\n      >\r\n        {children[0]}\r\n      </div>\r\n      <div\r\n        ref={draggerRef}\r\n        className={`${\r\n          horizontalValue\r\n            ? 'w-auto h-1 cursor-row-resize'\r\n            : 'h-full w-1 cursor-col-resize'\r\n        } relative group`}\r\n      >\r\n        <div\r\n          role=\"separator\"\r\n          aria-checked={mouseDown ? 'true' : 'false'}\r\n          className={`${\r\n            horizontalValue\r\n              ? 'top-1/2 left-0 right-0 bottom-1/2 -translate-y-1/2 h-0.5 group-hover:h-1'\r\n              : 'top-0 left-1/2 right-1/2 bottom-0 -translate-x-1/2 w-0.5 group-hover:w-1'\r\n          } absolute z-10 bg-[#263147] transition-all group-hover:bg-amber-300 aria-checked:bg-amber-300`}\r\n        />\r\n      </div>\r\n      <div\r\n        style={{\r\n          width: horizontalValue\r\n            ? '100%'\r\n            : containerRef.current\r\n              ? containerRef.current.offsetWidth - dividerPosition\r\n              : 0,\r\n          height: horizontalValue\r\n            ? containerRef.current\r\n              ? containerRef.current.offsetHeight - dividerPosition\r\n              : 0\r\n            : '100%',\r\n        }}\r\n      >\r\n        {children[1]}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n",
  },
  {
    id: 'Skeleton',
    element:
      "import {cn} from '@/lib/utils';\r\n\r\nexport interface SkeletonParams {\r\n  className?: string;\r\n}\r\nconst Skeleton = ({className}: SkeletonParams) => {\r\n  return (\r\n    <div\r\n      className={cn(`bg-gray-600 animate-pulse rounded-full ${className}`)}\r\n    ></div>\r\n  );\r\n};\r\n\r\nexport default Skeleton;\r\n",
  },
  {
    id: 'Spinner',
    element:
      "import {cn} from '@/lib/utils';\r\nimport {useEffect, useState, FC} from 'react';\r\n\r\ntype SpinnerProps = {\r\n  className?: string;\r\n  variant?:\r\n    | 'bounce'\r\n    | 'circular'\r\n    | 'bars'\r\n    | 'grid'\r\n    | 'ripple'\r\n    | 'terminal'\r\n    | 'loader';\r\n  text?: string;\r\n};\r\n\r\nexport const Spinner: FC<SpinnerProps> = ({\r\n  className = '',\r\n  variant = 'bounce',\r\n  text = 'Loading...',\r\n}) => {\r\n  // dots\r\n  if (variant === 'bounce') {\r\n    return (\r\n      <div\r\n        className={cn('flex space-x-2 justify-center items-center', className)}\r\n      >\r\n        <div className=\"h-3 w-3 dark:bg-light-primary bg-dark-primary rounded-full animate-bounce [animation-delay:-0.3s]\" />\r\n        <div className=\"h-3 w-3 dark:bg-light-primary bg-dark-primary rounded-full animate-bounce [animation-delay:-0.15s]\" />\r\n        <div className=\"h-3 w-3 dark:bg-light-primary bg-dark-primary rounded-full animate-bounce\" />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  // circular\r\n  if (variant === 'circular') {\r\n    return (\r\n      <div className={cn('flex justify-center items-center', className)}>\r\n        <div className=\"loader-circle\" />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  // bars\r\n  if (variant === 'bars') {\r\n    return (\r\n      <div\r\n        className={cn(\r\n          'flex space-x-1 justify-center items-center h-10',\r\n          className\r\n        )}\r\n      >\r\n        {[0, 0.2, 0.4, 0.6, 0.8].map((delay, idx) => (\r\n          <div\r\n            key={idx}\r\n            className=\"w-2 h-5 bg-dark-primary dark:bg-light-primary rounded animate-grow-shrink\"\r\n            style={{animationDelay: `${delay}s`}}\r\n          />\r\n        ))}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  // ripple\r\n  if (variant === 'ripple') {\r\n    return (\r\n      <div\r\n        className={cn('relative flex justify-center items-center', className)}\r\n      >\r\n        <div className=\"absolute h-16 w-16 rounded-full border-4 border-dark-primary dark:border-light-primary animate-ping opacity-20\" />\r\n        <div className=\"absolute h-12 w-12 rounded-full border-4 border-dark-primary dark:border-light-primary animate-ping opacity-40 [animation-delay:0.3s]\" />\r\n        <div className=\"h-8 w-8 rounded-full border-4 border-dark-primary dark:border-light-primary\" />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  // terminal\r\n  if (variant === 'terminal') {\r\n    const [displayText, setDisplayText] = useState('');\r\n    const [showCursor, setShowCursor] = useState(true);\r\n    const [textIndex, setTextIndex] = useState(0);\r\n\r\n    useEffect(() => {\r\n      if (textIndex < text.length) {\r\n        const timer = setTimeout(() => {\r\n          setDisplayText((prev) => prev + text[textIndex]);\r\n          setTextIndex((prev) => prev + 1);\r\n        }, 150);\r\n        return () => clearTimeout(timer);\r\n      } else {\r\n        const resetTimer = setTimeout(() => {\r\n          setDisplayText('');\r\n          setTextIndex(0);\r\n        }, 1000);\r\n        return () => clearTimeout(resetTimer);\r\n      }\r\n    }, [textIndex, text]);\r\n\r\n    useEffect(() => {\r\n      const blinkTimer = setInterval(() => {\r\n        setShowCursor((prev) => !prev);\r\n      }, 500);\r\n      return () => clearInterval(blinkTimer);\r\n    }, []);\r\n\r\n    return (\r\n      <div\r\n        className={cn(\r\n          'flex items-center justify-start bg-gray-900 text-green-500 p-4 font-mono rounded-md w-[270px]',\r\n          className\r\n        )}\r\n      >\r\n        <div className=\"flex flex-col w-full\">\r\n          <div className=\"flex mb-2 items-center\">\r\n            <span className=\"text-sm mr-auto text-gray-400\">Status</span>\r\n            <div className=\"ml-2 h-3 w-3 rounded-full bg-red-500\" />\r\n            <div className=\"ml-2 h-3 w-3 rounded-full bg-yellow-500\" />\r\n            <div className=\"ml-2 h-3 w-3 rounded-full bg-green-500\" />\r\n          </div>\r\n          <div className=\"h-22 w-full bg-black/50 p-2 rounded-md overflow-hidden text-sm flex items-center\">\r\n            {displayText}\r\n            {showCursor && (\r\n              <span className=\"inline-block w-[1px] h-5 bg-green-500 ml-1\" />\r\n            )}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  // loader\r\n  if (variant === 'loader') {\r\n    return (\r\n      <div className={cn('flex items-center justify-center', className)}>\r\n        <div className=\"relative w-10 h-10\">\r\n          {Array.from({length: 12}).map((_, i) => (\r\n            <div\r\n              key={i}\r\n              className=\"absolute top-0 left-1/2 w-[2px] h-3 bg-dark-primary dark:bg-light-primary origin-center loader-line\"\r\n              style={{\r\n                transform: `rotate(${i * 30}deg) translateY(-20px)`,\r\n                opacity: (i + 1) / 12,\r\n                animation: 'fade 1.2s linear infinite',\r\n                animationDelay: `${(i * 0.1).toFixed(1)}s`,\r\n              }}\r\n            />\r\n          ))}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  // fallback (dots)\r\n  return (\r\n    <div\r\n      className={cn('flex space-x-2 justify-center items-center', className)}\r\n    >\r\n      <div className=\"h-3 w-3 dark:bg-light-primary bg-dark-primary rounded-full animate-bounce [animation-delay:-0.3s]\" />\r\n      <div className=\"h-3 w-3 dark:bg-light-primary bg-dark-primary rounded-full animate-bounce [animation-delay:-0.15s]\" />\r\n      <div className=\"h-3 w-3 dark:bg-light-primary bg-dark-primary rounded-full animate-bounce\" />\r\n    </div>\r\n  );\r\n};\r\n",
  },
  {
    id: 'Switch',
    element:
      'import  { useState } from "react";\r\n\r\ninterface Switch{\r\n    defaultState?: boolean\r\n}\r\n\r\nexport  function Switch({ defaultState = false }: Switch) {\r\n  const [state, setState] = useState<boolean>(defaultState);\r\n\r\n  return (\r\n    <div\r\n      role="switch"\r\n      tabIndex={0}\r\n      onClick={() => setState(!state)}\r\n      className={`w-8 h-5 cursor-pointer bg-neutral-100 rounded-full relative`}\r\n    >\r\n      <div\r\n        className={`size-4 bg-black rounded-full absolute transition-all ease-in-out duration-300 top-1/2 ${\r\n          state ? "translate-x-0.5" : "translate-x-3.5"\r\n        } -translate-y-1/2`}\r\n      />\r\n    </div>\r\n  );\r\n}',
  },
  {
    id: 'Tabs',
    element:
      "import React from 'react';\r\nimport {useState} from 'react';\r\nimport {cn} from '@/lib/utils';\r\nimport {ReactElement} from 'react';\r\n\r\ninterface TabContentParams {\r\n  value: string;\r\n  activeTab?: string;\r\n  content: any;\r\n}\r\ninterface TabParams {\r\n  title: string;\r\n  value: string;\r\n  activeTab?: string;\r\n  setActiveTab?: any;\r\n  className?: string;\r\n}\r\ninterface TabListParams {\r\n  children: ReactElement<TabParams> | ReactElement<TabParams>[];\r\n  activeTab?: any;\r\n  setActiveTab?: (value: string) => void;\r\n  className?: string;\r\n}\r\ninterface TabsParams {\r\n  children: ReactElement<TabListParams> | ReactElement<TabListParams>[];\r\n  defaultVal?: string;\r\n  className?: string;\r\n}\r\n\r\nconst Tabs = ({children, defaultVal = '', className = ''}: TabsParams) => {\r\n  const [activeTab, setActiveTab] = useState<string>(defaultVal);\r\n\r\n  return (\r\n    <>\r\n      <div\r\n        className={`  w-[90%] dark:text-white  text-black  ring-[0.5px] ring-neutral-200  dark:ring-neutral-700 rounded-md ${className}`}\r\n      >\r\n        {React.Children.map(children, (child) => {\r\n          return React.cloneElement(child, {\r\n            activeTab,\r\n            setActiveTab,\r\n          });\r\n        })}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nconst TabList = ({\r\n  children,\r\n  activeTab,\r\n  setActiveTab,\r\n  className = '',\r\n}: TabListParams) => {\r\n  return (\r\n    <div className={cn(`flex space-x-2   rounded-md`, className)}>\r\n      {React.Children.map(children, (child) =>\r\n        React.cloneElement(child, {activeTab, setActiveTab})\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nconst Tab = ({\r\n  title = 'Here is the Title',\r\n  value,\r\n  activeTab = '',\r\n  setActiveTab,\r\n  className = '',\r\n}: TabParams) => {\r\n  const isActive = activeTab === value;\r\n  return (\r\n    <button\r\n      onClick={() => setActiveTab(value)}\r\n      className={cn(\r\n        ` px-6 py-2 rounded-md text-md font-medium cursor-pointer\r\n        ${isActive ? ' dark:text-white dark:bg-neutral-900 text-black bg-neutral-200 ' : ' text-gray-500 hover:text-black dark:text-gray-600 dark:hover:text-white'}\r\n      `,\r\n        className\r\n      )}\r\n    >\r\n      {title}\r\n    </button>\r\n  );\r\n};\r\n\r\nconst TabContent = ({value, activeTab, content}: TabContentParams) => {\r\n  if (activeTab === value)\r\n    return (\r\n      <div className=\" dark:text-white  text-black   rounded-md flex overflow-x-auto scrollable-content  mt-3\">\r\n        {content}\r\n      </div>\r\n    );\r\n};\r\n\r\nexport {Tabs, Tab, TabList, TabContent};\r\n",
  },
  {
    id: 'Testimonials',
    element:
      'import React from \'react\';\r\nimport {Star} from \'lucide-react\';\r\nimport {cn} from \'@/lib/utils\';\r\n\r\nexport interface TestimonialsProps {\r\n  imageSrc?: string;\r\n  name: string;\r\n  title: string;\r\n  rating?: number;\r\n  message: string;\r\n  className?: string;\r\n}\r\n\r\nconst Testimonials: React.FC<TestimonialsProps> = ({\r\n  imageSrc,\r\n  name,\r\n  title,\r\n  rating = 5,\r\n  message,\r\n  className,\r\n}) => {\r\n  return (\r\n    <div\r\n      className={cn(\r\n        `w-full max-w-sm sm:max-w-md md:max-w-lg m-4 flex flex-col gap-2 shadow-sm p-4 text-black grainy-light rounded-lg`,\r\n        className\r\n      )}\r\n    >\r\n      <div className="flex flex-col sm:flex-row items-start sm:items-center justify-between gap-2 sm:gap-4">\r\n        <div className="flex gap-2 justify-center items-center">\r\n          <img\r\n            src={imageSrc || \'https://avatar.iran.liara.run/public\'}\r\n            alt={name}\r\n            className="w-10 h-10 rounded-full object-cover"\r\n          />\r\n          <div className="flex flex-col items-start">\r\n            <div className="font-medium">{name}</div>\r\n            <div className="text-xs opacity-60">{title}</div>\r\n          </div>\r\n        </div>\r\n\r\n        <div className="flex gap-0.5">\r\n          {Array.from({length: 5}).map((_, index) => (\r\n            <Star\r\n              key={index}\r\n              className={`h-4 w-4 ${\r\n                index < rating\r\n                  ? \'text-yellow-400 fill-yellow-400\'\r\n                  : \'text-gray-300 fill-gray-300\'\r\n              }`}\r\n            />\r\n          ))}\r\n        </div>\r\n      </div>\r\n\r\n      <p className="text-base mt-2 overflow-y-auto scrollable-content">\r\n        {message}\r\n      </p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Testimonials;\r\n',
  },
  {
    id: 'Textarea',
    element:
      "import React from 'react';\r\nimport {cn} from '@/lib/utils';\r\n\r\nexport interface TextareaProps\r\n  extends React.TextareaHTMLAttributes<HTMLTextAreaElement> {}\r\n\r\nexport const Textarea = React.forwardRef<HTMLTextAreaElement, TextareaProps>(\r\n  ({className, ...props}, ref) => {\r\n    return (\r\n      <textarea\r\n        ref={ref}\r\n        className={cn(\r\n          'flex min-h-[80px] w-full rounded-xl border border-gray-700 bg-gray-800 px-4 py-3 text-sm text-white placeholder:text-gray-400 shadow-sm transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-cyan-400 focus-visible:ring-offset-2 focus-visible:ring-offset-gray-900 disabled:opacity-50 disabled:cursor-not-allowed',\r\n          className\r\n        )}\r\n        {...props}\r\n      />\r\n    );\r\n  }\r\n);\r\n\r\nTextarea.displayName = 'Textarea';\r\n",
  },
  {
    id: 'ToastUi',
    element:
      "import {cn} from '@/lib/utils';\r\n\r\nexport interface ToastUiParams {\r\n  idx: number;\r\n  title: string;\r\n  hovered?: boolean;\r\n  options: {\r\n    containerClassName?: string;\r\n    titleClassName?: string;\r\n    desc?: string;\r\n    descClassName?: string;\r\n  };\r\n}\r\n\r\nexport default function ToastUi({\r\n  idx,\r\n  title,\r\n  options,\r\n  hovered = false,\r\n}: ToastUiParams) {\r\n  return (\r\n    <div\r\n      style={{\r\n        bottom: hovered ? 40 + idx * 80 : 40 + idx * 20,\r\n        zIndex: 10 + idx,\r\n        scale: hovered ? 1 : 1 + idx * 0.05,\r\n      }}\r\n      className={cn(\r\n        'fixed right-10 transition-all min-w-[300px]',\r\n        options.containerClassName\r\n      )}\r\n    >\r\n      <div className=\"rounded-lg border border-neutral-300 bg-neutral-100 dark:bg-neutral-950 dark:border-neutral-700 shadow-lg px-5 py-3\">\r\n        <div\r\n          className={cn(\r\n            'font-semibold text-neutral-900 dark:text-neutral-100 truncate text-sm',\r\n            options.titleClassName\r\n          )}\r\n        >\r\n          {title}\r\n        </div>\r\n        {options.desc ? (\r\n          <div\r\n            className={cn(\r\n              'font-medium text-neutral-700 text-xs dark:text-neutral-300 mt-0.5',\r\n              options.descClassName\r\n            )}\r\n          >\r\n            {options.desc}\r\n          </div>\r\n        ) : null}\r\n      </div>\r\n      <div className=\"h-3.5\" />\r\n    </div>\r\n  );\r\n}\r\n",
  },
  {
    id: 'Tooltip',
    element:
      "import React, {useState} from 'react';\r\nimport {cn} from '@/lib/utils.js';\r\n\r\nexport interface TooltipParams {\r\n  title: string;\r\n  options?: {\r\n    delay?: number;\r\n    containerClassName?: string;\r\n    tooltipStyle?: React.CSSProperties;\r\n  };\r\n}\r\n\r\nexport const Tooltip = ({\r\n  children,\r\n  title = '',\r\n  options = {\r\n    delay: 300,\r\n    containerClassName: '',\r\n    tooltipStyle: {},\r\n  },\r\n}: React.PropsWithChildren<TooltipParams>) => {\r\n  const [visible, setVisible] = useState(false);\r\n  let timeout: ReturnType<typeof setTimeout>;\r\n\r\n  const showTooltip = () => {\r\n    timeout = setTimeout(() => {\r\n      setVisible(true);\r\n    }, options.delay);\r\n  };\r\n  const hideTooltip = () => {\r\n    timeout = setTimeout(() => {\r\n      clearTimeout(timeout);\r\n      setVisible(false);\r\n    }, options.delay);\r\n  };\r\n\r\n  return (\r\n    <div\r\n      className={cn('relative inline-block mt-10', options?.containerClassName)}\r\n    >\r\n      {visible && (\r\n        <div\r\n          style={options?.tooltipStyle}\r\n          className={cn(\r\n            'absolute bottom-full truncate left-1/2 -translate-x-1/2 text-sm text-center w-28 h-8 font-heading font-medium  px-4 py-1 rounded-md  text-black bg-white shadow-lg transition-opacity duration-300 opacity-100',\r\n            options.containerClassName\r\n          )}\r\n        >\r\n          {title}\r\n        </div>\r\n      )}\r\n\r\n      <div\r\n        onMouseEnter={showTooltip}\r\n        onMouseLeave={hideTooltip}\r\n        aria-label={title}\r\n        className=\"px-2 py-1 rounded-sm\"\r\n      >\r\n        {children}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n",
  },
  {
    id: 'VideoPlayer',
    element:
      'import React from \'react\';\r\nimport {Star} from \'lucide-react\';\r\nimport {cn} from \'@/lib/utils\';\r\n\r\nexport interface TestimonialsProps {\r\n  imageSrc?: string;\r\n  name: string;\r\n  title: string;\r\n  rating?: number;\r\n  message: string;\r\n  className?: string;\r\n}\r\n\r\nconst Testimonials: React.FC<TestimonialsProps> = ({\r\n  imageSrc,\r\n  name,\r\n  title,\r\n  rating = 5,\r\n  message,\r\n  className,\r\n}) => {\r\n  return (\r\n    <div\r\n      className={cn(\r\n        `w-full max-w-sm sm:max-w-md md:max-w-lg m-4 flex flex-col gap-2 shadow-sm p-4 text-black grainy-light rounded-lg`,\r\n        className\r\n      )}\r\n    >\r\n      <div className="flex flex-col sm:flex-row items-start sm:items-center justify-between gap-2 sm:gap-4">\r\n        <div className="flex gap-2 justify-center items-center">\r\n          <img\r\n            src={imageSrc || \'https://avatar.iran.liara.run/public\'}\r\n            alt={name}\r\n            className="w-10 h-10 rounded-full object-cover"\r\n          />\r\n          <div className="flex flex-col items-start">\r\n            <div className="font-medium">{name}</div>\r\n            <div className="text-xs opacity-60">{title}</div>\r\n          </div>\r\n        </div>\r\n\r\n        <div className="flex gap-0.5">\r\n          {Array.from({length: 5}).map((_, index) => (\r\n            <Star\r\n              key={index}\r\n              className={`h-4 w-4 ${\r\n                index < rating\r\n                  ? \'text-yellow-400 fill-yellow-400\'\r\n                  : \'text-gray-300 fill-gray-300\'\r\n              }`}\r\n            />\r\n          ))}\r\n        </div>\r\n      </div>\r\n\r\n      <p className="text-base mt-2 overflow-y-auto scrollable-content">\r\n        {message}\r\n      </p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Testimonials;\r\n',
  },
];
