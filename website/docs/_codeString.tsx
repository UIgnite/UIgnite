export default [{"id":"Accordion","element":"import React, {useState} from 'react';\nimport {ReactElement} from 'react';\nimport {cn} from '@/lib/utils';\nimport {ChevronDown} from 'lucide-react';\n\nexport interface AccordionParams {\n  title: string;\n  content: string;\n  className?: string;\n  defaultOpen?: boolean;\n  isOpen?: boolean | null;\n  onToggle?: () => void;\n}\n\nconst Accordion = ({\n  title,\n  content,\n  className = '',\n  defaultOpen = false,\n  isOpen = null,\n  onToggle,\n}: AccordionParams) => {\n  const [visible, setVisible] = useState(defaultOpen);\n  const toggleAccordion = () => {\n    setVisible(!visible);\n  };\n  return (\n    <div\n      className={cn(\n        'border-[0.5px] border-zinc-700/20 rounded-xl mt-[0.5px] overflow-hidden',\n        className\n      )}\n    >\n      {/* Accordion Header */}\n      {/* Bg color rendering inssue in switching modes  */}\n      <div\n        onClick={onToggle ?? toggleAccordion}\n        className=\"cursor-pointer dark:bg-zinc-900 dark:hover:bg-neutral-800   px-4 py-3 flex items-center justify-between  duration-300  \"\n      >\n        <span className=\"text-black dark:text-white font-medium  \">\n          {title}\n        </span>\n\n        <ChevronDown\n          className={cn(\n            'transition-transform duration-300 transform text-black dark:text-white mr-4 ',\n            (isOpen ?? visible) ? 'rotate-180' : 'rotate-0'\n          )}\n        />\n      </div>\n\n      {/* Accordion Content */}\n      <div\n        className={cn(\n          'transition-all duration-300  dark:bg-zinc-800 px-4 dark:text-white text-sm',\n          (isOpen ?? visible)\n            ? 'max-h-96 opacity-100 py-3'\n            : 'max-h-0 opacity-0 py-0 overflow-hidden'\n        )}\n      >\n        {content}\n      </div>\n    </div>\n  );\n};\n\ninterface AccordionWrapperParams {\n  children: ReactElement<AccordionParams> | ReactElement<AccordionParams>[];\n}\n\nconst AccordionWrapper = ({children}: AccordionWrapperParams) => {\n  const [activeIndex, setActiveIndex] = useState<number | null>(null);\n\n  return (\n    <div>\n      {React.Children.map(children, (child, index) =>\n        React.isValidElement(child)\n          ? React.cloneElement(child, {\n              isOpen: activeIndex === index,\n              onToggle: () =>\n                setActiveIndex(activeIndex === index ? null : index),\n            })\n          : child\n      )}\n    </div>\n  );\n};\n\nexport {AccordionWrapper, Accordion as default};\n"},{"id":"AlertDialogBox","element":"import {useState} from 'react';\nimport {Button} from '@/components/Button';\n\ntype AlertDialogBoxProps = {\n  title: string;\n  description: string;\n};\n\nconst AlertDialogBox = ({title, description}: AlertDialogBoxProps) => {\n  const [isOpen, setIsOpen] = useState(false);\n\n  return (\n    <>\n      <Button onClick={() => setIsOpen(true)}>Show Dialog</Button>\n\n      {isOpen && (\n        <div className=\"fixed inset-0 bg-black/40 flex items-center justify-center z-50\">\n          <div className=\"bg-white rounded-xl p-6 w-[90%] max-w-md shadow-lg\">\n            <h2 className=\"text-lg font-bold mb-2\">{title}</h2>\n            <p className=\"text-gray-600 mb-4\">{description}</p>\n            <div className=\"flex justify-end gap-2\">\n              <Button\n                onClick={() => setIsOpen(false)}\n                className=\"bg-gray-200 text-black\"\n              >\n                Cancel\n              </Button>\n              <Button\n                onClick={() => setIsOpen(false)}\n                className=\"bg-red-600 text-white\"\n              >\n                Confirm\n              </Button>\n            </div>\n          </div>\n        </div>\n      )}\n    </>\n  );\n};\n\nexport default AlertDialogBox;\n"},{"id":"Avatar","element":"import React from 'react';\nimport {cn} from '@/lib/utils';\n\nexport interface AvatarProps extends React.ImgHTMLAttributes<HTMLImageElement> {\n  url: string;\n  alt: string;\n  className?: string;\n}\n\nconst Avatar = React.forwardRef<HTMLImageElement, AvatarProps>(\n  ({url, alt, className = '', ...props}, ref) => {\n    return (\n      <div className=\"flex gap-4 mt-2\">\n        <img\n          ref={ref}\n          src={url ? url : 'https://avatar.iran.liara.run/public'}\n          alt={alt}\n          className={cn(\n            'size-12 rounded-full border border-neutral-300',\n            className\n          )}\n          {...props}\n        />\n      </div>\n    );\n  }\n);\n\nAvatar.displayName = 'Avatar';\n\nexport default Avatar;\n"},{"id":"Button","element":"import React, {useEffect, useState} from 'react';\nimport {cn} from '@/lib/utils';\nimport {cva} from 'class-variance-authority';\nimport {Spinner} from '@/components/Spinner';\n\nexport interface ButtonParams\n  extends React.ButtonHTMLAttributes<HTMLButtonElement> {\n  size?: 'default' | 'sm' | 'lg' | 'xl' | 'icon';\n  className?: string;\n  isLoading?: boolean;\n  icon?: React.ReactNode;\n  variant?:\n    | 'primary'\n    | 'destructive'\n    | 'success'\n    | 'warning'\n    | 'outline'\n    | 'secondary'\n    | 'ghost'\n    | 'glass'\n    | 'gradient'\n    | 'dark'\n    | 'light'\n    | 'movingBorder';\n  fullWidth?: boolean;\n  animatedBorder?: boolean;\n  gradientBorder?: boolean;\n  responsiveSize?: 'auto' | 'compact' | 'expand';\n}\n\nexport const Button = React.forwardRef<\n  HTMLButtonElement,\n  React.PropsWithChildren<ButtonParams>\n>(\n  (\n    {\n      children,\n      size = 'default',\n      className = '',\n      isLoading = false,\n      icon,\n      variant = 'primary',\n      fullWidth,\n      animatedBorder = false,\n      gradientBorder = false,\n      responsiveSize,\n      ...props\n    },\n    ref\n  ) => {\n    const [animationPosition, setAnimationPosition] = useState({x: 0, y: 0});\n\n    useEffect(() => {\n      if (!animatedBorder) return;\n\n      const interval = setInterval(() => {\n        setAnimationPosition((prev) => ({\n          x: (prev.x + 1) % 100,\n          y: (prev.y + 1) % 100,\n        }));\n      }, 50);\n\n      return () => clearInterval(interval);\n    }, [animatedBorder]);\n\n    const buttonVariants = cva(\n      'inline-flex text-4xl items-center cursor-pointer justify-center whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 relative',\n      {\n        variants: {\n          variant: {\n            primary: 'bg-[#305CDE] text-white hover:bg-blue-600',\n            destructive: 'bg-red-500 text-white hover:bg-red-600',\n            success: 'bg-[#00b306] text-white hover:bg-green-600',\n            warning: 'bg-[#ff8a00] text-white hover:bg-yellow-600',\n            outline:\n              'border border-gray-500 bg-transparent hover:bg-gray-700 hover:text-white',\n            secondary: 'bg-rose-500 text-white hover:bg-rose-400',\n            ghost:\n              'dark:hover:bg-gray-700 dark:text-white text-gray-700 hover:bg-gray-800 hover:text-gray-100',\n            glass:\n              'dark:bg-white/10 backdrop-blur-md border border-black/10 dark:border-white/20 dark:text-white dark:hover:bg-white/20 hover:bg-white/60',\n            gradient:\n              'bg-gradient-to-r from-[#d60db8] to-[#1919e0] text-white hover:from-blue-600 hover:to-purple-700',\n            dark: 'bg-black text-white hover:bg-black/70',\n            light: 'bg-gray-50 text-black hover:bg-gray-100',\n            movingBorder: 'text-white bg-black border-none',\n          },\n          size: {\n            default: 'h-10 px-4 py-2 min-w-[90px]',\n            sm: 'h-9 rounded-md px-3 min-w-[80px]',\n            lg: 'h-11 rounded-md px-8 min-w-[110px]',\n            xl: 'h-12 rounded-md px-10 min-w-[130px] text-base',\n            icon: 'h-10 w-10 min-w-[40px]',\n          },\n          fullWidth: {\n            true: 'w-full',\n            false: '',\n          },\n          responsiveSize: {\n            auto: 'md:text-base text-xs md:h-10 h-8 md:px-4 px-2',\n            compact:\n              'lg:h-10 md:h-9 h-8 lg:px-4 md:px-3 px-2 lg:text-sm text-xs',\n            expand: 'lg:h-12 md:h-11 h-10 lg:px-8 md:px-6 px-4',\n          },\n        },\n        defaultVariants: {\n          variant: 'primary',\n          size: 'default',\n          fullWidth: false,\n          responsiveSize: undefined,\n        },\n      }\n    );\n\n    const getBorderStyle = () => {\n      if (animatedBorder) {\n        return {\n          backgroundImage: `linear-gradient(90deg, #00f0ff, #00ff6a, #ff00e6, #0096ff)`,\n          backgroundSize: '300% 300%',\n          backgroundPosition: `${animationPosition.x}% ${animationPosition.y}%`,\n          padding: '2px',\n          borderRadius: '0.375rem',\n          animation: '5s ease infinite',\n        };\n      }\n      if (gradientBorder) {\n        return {\n          backgroundImage:\n            'linear-gradient(to right, #4f46e5, #9333ea, #e11d48)',\n          padding: '2px',\n          borderRadius: '0.375rem',\n        };\n      }\n      return undefined;\n    };\n\n    const buttonContent = (\n      <>\n        {isLoading ? (\n          <Spinner className={cn(children ? 'mr-2' : '')} />\n        ) : icon ? (\n          <span className={cn(children ? 'mr-2' : '')}>{icon}</span>\n        ) : null}\n        {children}\n      </>\n    );\n\n    const renderButton = () => (\n      <button\n        {...props}\n        ref={ref}\n        className={cn(\n          buttonVariants({\n            variant: animatedBorder || gradientBorder ? 'dark' : variant,\n            size,\n            fullWidth,\n            responsiveSize,\n            className: cn(\n              (animatedBorder || gradientBorder) &&\n                'w-full m-0 rounded-[calc(0.375rem-1px)]',\n              className\n            ),\n          })\n        )}\n      >\n        {buttonContent}\n      </button>\n    );\n\n    const borderStyle = getBorderStyle();\n\n    return borderStyle ? (\n      <div\n        className={cn('inline-flex', fullWidth && 'w-full')}\n        style={borderStyle}\n      >\n        {renderButton()}\n      </div>\n    ) : (\n      renderButton()\n    );\n  }\n);\n\nButton.displayName = 'Button';\n"},{"id":"Card","element":"import React from 'react';\nimport {cn} from '@/lib/utils';\n\nexport interface CardProps extends React.HTMLAttributes<HTMLDivElement> {}\n\nconst Card = React.forwardRef<HTMLDivElement, CardProps>(\n  ({className, ...props}, ref) => (\n    <div\n      ref={ref}\n      className={cn(\n        'border border-neutral-200 dark:border-neutral-700 rounded-xl shadow-md w-sm px-4 py-2',\n        className\n      )}\n      {...props}\n    />\n  )\n);\nCard.displayName = 'Card';\n\nexport interface CardSectionProps\n  extends React.HTMLAttributes<HTMLDivElement> {}\n\nconst CardHeader: React.FC<CardSectionProps> = ({className, ...props}) => (\n  <div className={cn('mb-2', className)} {...props} />\n);\nCardHeader.displayName = 'CardHeader';\n\nconst CardTitle: React.FC<React.HTMLAttributes<HTMLHeadingElement>> = ({\n  className,\n  ...props\n}) => <h3 className={cn('text-lg font-semibold', className)} {...props} />;\nCardTitle.displayName = 'CardTitle';\n\nconst CardDescription: React.FC<React.HTMLAttributes<HTMLParagraphElement>> = ({\n  className,\n  ...props\n}) => <p className={cn('text-sm', className)} {...props} />;\nCardDescription.displayName = 'CardDescription';\n\nconst CardContent: React.FC<CardSectionProps> = ({className, ...props}) => (\n  <div className={cn('mt-2', className)} {...props} />\n);\nCardContent.displayName = 'CardContent';\n\nconst CardFooter: React.FC<CardSectionProps> = ({className, ...props}) => (\n  <div className={cn('mt-4', className)} {...props} />\n);\nCardFooter.displayName = 'CardFooter';\n\nexport {Card, CardHeader, CardTitle, CardDescription, CardContent, CardFooter};\n"},{"id":"Carosuel","element":"import React, {useState, useRef, useEffect, ReactNode} from 'react';\nimport {cn} from '@/lib/utils';\nimport {cva} from 'class-variance-authority';\nimport {MoveLeft, MoveRight} from 'lucide-react';\n\ninterface CarouselProps {\n  children: ReactNode[];\n  className?: string;\n}\n\nconst carouselVariants = cva('relative w-full', {\n  variants: {\n    size: {\n      default: '',\n    },\n  },\n  defaultVariants: {\n    size: 'default',\n  },\n});\n\nconst Carosuel: React.FC<CarouselProps> = ({children, className}) => {\n  const [current, setCurrent] = useState<number>(0);\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const next = () => {\n    if (current < children.length - 1) setCurrent((prev) => prev + 1);\n  };\n\n  const prev = () => {\n    if (current > 0) setCurrent((prev) => prev - 1);\n  };\n\n  useEffect(() => {\n    const container = containerRef.current;\n    if (container) {\n      const width = container.offsetWidth;\n      container.scrollTo({left: current * width, behavior: 'smooth'});\n    }\n  }, [current]);\n\n  return (\n    <div className={cn(carouselVariants(), className)}>\n      <div\n        ref={containerRef}\n        className=\"flex overflow-x-hidden scroll-smooth h-72\"\n      >\n        {React.Children.map(children, (child) => (\n          <div className=\"w-full h-full flex-shrink-0\">{child}</div>\n        ))}\n      </div>\n\n      {/* Navigation Buttons */}\n      <button\n        onClick={prev}\n        disabled={current === 0}\n        className=\"absolute top-1/2 -left-10 cursor-pointer transform -translate-y-1/2 dark:bg-black bg-gray-100 border-1 border-gray-200 dark:border-gray-800 rounded-full p-2 shadow hover:bg-gray-200 dark:hover:bg-gray-900 disabled:opacity-40\"\n      >\n        <MoveLeft className=\"dark:text-gray-200 text-gray-900 \" />\n      </button>\n      <button\n        onClick={next}\n        disabled={current === children.length - 1}\n        className=\"absolute top-1/2 -right-10 cursor-pointer transform -translate-y-1/2 dark:bg-black bg-gray-100 border-1 border-gray-200 dark:border-gray-800 rounded-full p-2 shadow hover:bg-gray-200 dark:hover:bg-gray-900 disabled:opacity-40\"\n      >\n        <MoveRight className=\"dark:text-gray-200 text-gray-900\" />\n      </button>\n    </div>\n  );\n};\n\nexport {Carosuel};\n"},{"id":"Dropdown","element":"import React, {useCallback, useRef, useState} from 'react';\nimport {Button} from '@/components/Button';\n\nexport default function Dropdown({\n  children,\n  button,\n  title = 'Open',\n}: React.PropsWithChildren<{button?: React.ReactNode; title?: string}>) {\n  const buttonRef = useRef<HTMLDivElement | null>(null);\n  const dropDownRef = useRef(null);\n\n  const [open, setOpen] = useState(false);\n\n  const handleToogleOpen = useCallback(() => {\n    setOpen(!open);\n  }, [open, setOpen]);\n\n  return (\n    <React.Fragment>\n      {open ? (\n        <span\n          onClick={handleToogleOpen}\n          className=\"fixed z-10 bg-black/20 inset-0\"\n        ></span>\n      ) : null}\n      <div>\n        {open ? (\n          <div\n            ref={dropDownRef}\n            style={{\n              top: (buttonRef.current?.getBoundingClientRect()?.top ?? 0) + 50,\n            }}\n            className=\"min-w-56 fixed z-20 bg-neutral-200 min-h-5 rounded-lg border border-neutral-400 shadow p-1 flex flex-col gap-y-1\"\n          >\n            {children}\n          </div>\n        ) : null}\n        <div ref={buttonRef} role=\"button\" onClick={handleToogleOpen}>\n          {button ?? <Button>{title}</Button>}\n        </div>\n      </div>\n    </React.Fragment>\n  );\n}\n"},{"id":"Footer","element":"import {FiGithub, FiLinkedin} from 'react-icons/fi';\nimport {FaDiscord, FaInstagram} from 'react-icons/fa';\nimport {FaXTwitter} from 'react-icons/fa6';\nimport {SlSocialYoutube} from 'react-icons/sl';\nimport {useTheme} from '@pkgs/uignite';\n\nconst Footer = () => {\n  const {theme} = useTheme();\n  return (\n    <div className=\"w-full h-full\">\n      <div className=\"dark:border-t-zinc-800 border-t mt-6 border-t-zinc-300\"></div>\n      <div className=\"max-w-[1200px] flex flex-col w-full py-5 justify-between mx-auto pb-5\">\n        <div className=\"mt-4 flex justify-between\">\n          {/* website */}\n          <div className=\"flex flex-col gap-6\">\n            {/* logo */}\n            <div className=\"w-56 h-12 transition-all duration-300 ease-in-out hover:scale-105  cursor-pointer -ml-4\">\n              <img\n                alt=\"UIgnite\"\n                className=\"h-full w-full\"\n                src={\n                  theme === 'dark'\n                    ? '/chaicode-white.png'\n                    : '/chaicode-black.png'\n                }\n              />\n            </div>\n\n            {/* tagline */}\n            <p className=\"text-gray-600 dark:text-zinc-400 w-72\">\n              Home for programmers\n            </p>\n\n            {/* socials */}\n            <div className=\"flex gap-4 text-zinc-500 \">\n              <a href=\"https://github.com/hiteshchoudhary\" target=\"_blank\">\n                <FiGithub className=\"transition-all duration-200 ease-in-out hover:scale-105 dark:hover:text-orange-500 hover:text-zinc-700 size-5 cursor-pointer\" />\n              </a>\n\n              <a href=\"https://discord.com/invite/WDrH3zuWFb\" target=\"_blank\">\n                <FaDiscord className=\"transition-all duration-200 ease-in-out hover:scale-105 dark:hover:text-orange-500 hover:text-zinc-700 size-5 cursor-pointer\" />\n              </a>\n\n              <a href=\"https://x.com/hiteshdotcom\" target=\"_blank\">\n                <FaXTwitter className=\"transition-all duration-200 ease-in-out hover:scale-105 dark:hover:text-orange-500 hover:text-zinc-700 size-5 cursor-pointer\" />\n              </a>\n\n              <a\n                href=\"https://www.linkedin.com/in/hiteshchoudhary\"\n                target=\"_blank\"\n              >\n                <FiLinkedin className=\"transition-all duration-200 ease-in-out hover:scale-105 dark:hover:text-orange-500 hover:text-zinc-700 size-5 cursor-pointer\" />\n              </a>\n\n              <a\n                href=\"https://www.instagram.com/hiteshchoudharyofficial\"\n                target=\"_blank\"\n              >\n                <FaInstagram className=\"transition-all duration-200 ease-in-out hover:scale-105 dark:hover:text-orange-500 hover:text-zinc-700 size-5 cursor-pointer\" />\n              </a>\n\n              <a href=\"https://www.youtube.com/@chaiaurcode\" target=\"_blank\">\n                <SlSocialYoutube className=\"transition-all duration-200 ease-in-out hover:scale-105 dark:hover:text-orange-500 hover:text-zinc-700 size-5 cursor-pointer\" />\n              </a>\n            </div>\n          </div>\n\n          {/* other sections like product getStarted legal */}\n          <div className=\"flex gap-16 mt-3\">\n            <div className=\"text-zinc-500 dark:text-zinc-400 flex flex-col gap-2\">\n              <h2 className=\"text-zinc-800 dark:text-zinc-100 font-semibold\">\n                Product\n              </h2>\n              <a\n                href=\"https://courses.chaicode.com/learn\"\n                target=\"_blank\"\n                className=\"cursor-pointer dark:hover:text-orange-400 hover:text-zinc-700\"\n              >\n                Courses\n              </a>\n              <a\n                href=\"https://courses.chaicode.com/learn/view-all?show=batch&type=17\"\n                target=\"_blank\"\n                className=\"cursor-pointer dark:hover:text-orange-400 hover:text-zinc-700\"\n              >\n                Cohort\n              </a>\n              <a\n                href=\"https://courses.chaicode.com/learn/batch/about?bundleId=226894\"\n                target=\"_blank\"\n                className=\"cursor-pointer dark:hover:text-orange-400 hover:text-zinc-700\"\n              >\n                Coding Hero\n              </a>\n              <a\n                href=\"https://masterji.co/login\"\n                target=\"_blank\"\n                className=\"cursor-pointer dark:hover:text-orange-400 hover:text-zinc-700\"\n              >\n                MasterJI\n              </a>\n            </div>\n            <div className=\"text-zinc-500 dark:text-zinc-400 flex flex-col gap-2\">\n              <h2 className=\"text-zinc-800 dark:text-zinc-100 font-semibold\">\n                Resources\n              </h2>\n\n              <a\n                href=\"https://freeapi.app/\"\n                target=\"_blank\"\n                className=\"cursor-pointer dark:hover:text-orange-400 hover:text-zinc-700\"\n              >\n                FreeAPI\n              </a>\n              <a\n                href=\"https://chaidocs.vercel.app/\"\n                target=\"_blank\"\n                className=\"cursor-pointer dark:hover:text-orange-400 hover:text-zinc-700\"\n              >\n                ChaiDocs\n              </a>\n            </div>\n\n            <div className=\"text-zinc-500 dark:text-zinc-400 flex flex-col gap-2\">\n              <h2 className=\"text-zinc-800 dark:text-zinc-100 font-semibold\">\n                Legal\n              </h2>\n              <a\n                href=\"#\"\n                className=\"cursor-pointer dark:hover:text-orange-400 hover:text-zinc-700\"\n              >\n                Terms of Service\n              </a>\n              <a\n                href=\"#\"\n                className=\"cursor-pointer dark:hover:text-orange-400 hover:text-zinc-700\"\n              >\n                Privacy Policy\n              </a>\n              <a\n                href=\"#\"\n                className=\"cursor-pointer dark:hover:text-orange-400 hover:text-zinc-700\"\n              >\n                Pricing Policy\n              </a>\n              <a\n                href=\"#\"\n                className=\"cursor-pointer dark:hover:text-orange-400 hover:text-zinc-700\"\n              >\n                Refund Policy\n              </a>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"dark:border-t-zinc-800 border-t border-t-zinc-300 mt-8 mb-6\"></div>\n        <div className=\"flex justify-between text-zinc-800 dark:text-zinc-300\">\n          <div className=\"\">© 2025 ChaiCode. All rights reserved.</div>\n          <div>\n            Built with ❤️ by{' '}\n            <span className=\"underline cursor-pointer\">ChaiCode</span>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport {Footer};\n"},{"id":"Input","element":"import React from 'react';\nimport {cn} from '@/lib/utils';\n\nexport interface InputProps\n  extends React.InputHTMLAttributes<HTMLInputElement> {}\n\nconst Input = React.forwardRef<HTMLInputElement, InputProps>(\n  ({className, type = 'text', ...props}, ref) => {\n    return (\n      <input\n        ref={ref}\n        type={type}\n        className={cn(\n          'flex w-full h-9 py-1 px-2 rounded-md border border-gray-400 dark:border-zinc-700 text-base shadow-sm placeholder:text-gray-400 dark:placeholder:text-zinc-600 focus-visible:outline-none focus-visible:ring-[1.2px] focus-visible:border-none focus-visible:ring-neutral-500 dark:focus-visible:ring-zinc-500 disabled:cursor-not-allowed disabled:opacity-50',\n          className\n        )}\n        {...props}\n      />\n    );\n  }\n);\n\nInput.displayName = 'Input';\n\nexport {Input};\n"},{"id":"InputOtp","element":"import React, {useEffect, useRef, useState} from 'react';\n\ninterface InputOTPProps {\n  length?: number;\n  onOTPSubmit?: (otp: string) => void;\n}\n\nexport const InputOTP: React.FC<InputOTPProps> = ({\n  length = 4,\n  onOTPSubmit = () => {},\n}) => {\n  const [otp, setOtp] = useState<string[]>(new Array(length).fill(''));\n  const inputRefs = useRef<(HTMLInputElement | null)[]>([]);\n\n  useEffect(() => {\n    inputRefs.current[0]?.focus();\n  }, []);\n\n  const handleChange = (\n    index: number,\n    e: React.ChangeEvent<HTMLInputElement>\n  ) => {\n    const value = e.target.value;\n    if (isNaN(Number(value))) return;\n\n    const newOtp = [...otp];\n    newOtp[index] = value.slice(-1); // Only last digit\n    setOtp(newOtp);\n\n    const combined = newOtp.join('');\n    if (combined.length === length && !newOtp.includes('')) {\n      onOTPSubmit(combined);\n    }\n\n    const nextIndex = newOtp.findIndex((val, i) => i > index && val === '');\n    if (nextIndex !== -1 && inputRefs.current[nextIndex]) {\n      inputRefs.current[nextIndex]?.focus();\n    }\n  };\n\n  const handleKeyDown = (\n    index: number,\n    e: React.KeyboardEvent<HTMLInputElement>\n  ) => {\n    if (e.key === 'Backspace' && !otp[index] && index > 0) {\n      const newOtp = [...otp];\n      newOtp[index - 1] = '';\n      setOtp(newOtp);\n      inputRefs.current[index - 1]?.focus();\n    }\n  };\n\n  const handleClick = (index: number) => {\n    inputRefs.current[index]?.setSelectionRange(1, 1);\n  };\n\n  return (\n    <div className=\"flex items-center justify-center gap-3 mt-10\">\n      {otp.map((digit, index) => (\n        <input\n          key={index}\n          type=\"text\"\n          inputMode=\"numeric\"\n          maxLength={1}\n          value={digit}\n          ref={(el) => {\n            inputRefs.current[index] = el;\n          }}\n          onChange={(e) => handleChange(index, e)}\n          onKeyDown={(e) => handleKeyDown(index, e)}\n          onClick={() => handleClick(index)}\n          className=\"w-14 h-14 text-center text-xl   shadow-xs shadow-cyan-600 rounded-sm bg-cyan-600 text-white outline-none focus:ring-2 focus:ring-blue-500 transition-all duration-150\"\n        />\n      ))}\n    </div>\n  );\n};\n"},{"id":"MessageBot","element":"import {MessageCircle} from 'lucide-react';\nimport {useState} from 'react';\n\nexport interface MessageBotParams {\n  orgName?: string;\n  themeColor?: string;\n  url?: string;\n  alt?: string;\n}\n\nexport interface Message {\n  text: string;\n  sender: 'user' | 'bot';\n}\n\nconst MessageBot = ({\n  orgName = 'UIgnite',\n  themeColor = 'bg-blue-600',\n  url = '/assets/logo.webp',\n  // alt,\n}: MessageBotParams) => {\n  const [isOpen, setIsOpen] = useState(false);\n  const [input, setInput] = useState('');\n  const [count, setCount] = useState(1);\n  const [messages, setMessages] = useState<Message[]>([\n    {\n      text: `Hi I am ${orgName} bot. How can I help you?`,\n      sender: 'bot',\n    },\n  ]);\n\n  const sendMessage = () => {\n    if (!input.trim()) return;\n\n    const userMessage: Message = {text: input, sender: 'user'};\n    const botMessage: Message = {\n      text: `bot response ${count + 1}`,\n      sender: 'bot',\n    };\n\n    setMessages((prev) => [...prev, userMessage]);\n    setInput('');\n    setCount(count + 1);\n\n    setTimeout(() => {\n      setMessages((prev) => [...prev, botMessage]);\n    }, 800);\n  };\n\n  return (\n    <div className=\"z-[1000] fixed bottom-5 right-5\">\n      {/* Overlay: Jab isOpen true ho, toh poori screen dark ya blur karne ke liye */}\n      {isOpen && (\n        <div\n          className=\"fixed inset-0 bg-black/30 z-[1000]\"\n          onClick={() => setIsOpen(false)} // Overlay click se chatbot close hoga\n        ></div>\n      )}\n\n      {/* Floating Button */}\n      <button\n        className={`cursor-pointer z-[1000] w-16 h-16 ${themeColor} text-white rounded-full shadow-lg flex items-center justify-center text-2xl hover:scale-105 transition-transform duration-200`}\n        onClick={() => setIsOpen(!isOpen)}\n      >\n        <MessageCircle />\n      </button>\n\n      {/* Chatbot Box */}\n      {isOpen && (\n        <div className=\"z-[1000] fixed bottom-[6.5rem] right-8 w-80 h-[32rem] bg-white rounded-lg shadow-2xl flex flex-col overflow-hidden\">\n          {/* Header */}\n          <div\n            className={`p-4 ${themeColor} text-white text-left items-center`}\n          >\n            <button\n              className=\"p-1 rounded-full hover:bg-white hover:text-black transition-colors duration-200\"\n              onClick={() => setIsOpen(false)}\n            >\n              <img src=\"/assets/logo.webp\" alt=\"Close\" className=\"w-6 h-6\" />\n            </button>\n            <span className=\"text-lg font-semibold\">{orgName}</span>\n          </div>\n\n          {/* Messages */}\n          <div className=\"flex-1 px-3 py-4 overflow-y-auto space-y-3 bg-gray-50\">\n            {messages.map((msg, index) => (\n              <div\n                key={index}\n                className={`flex items-end ${msg.sender === 'user' ? 'justify-start' : 'justify-end'}`}\n              >\n                {msg.sender === 'user' && (\n                  <img\n                    className=\"rounded-full h-6 w-6 object-cover mr-2\"\n                    src={url || 'https://avatar.iran.liara.run/public'}\n                    alt=\"User\"\n                  />\n                )}\n                <div\n                  className={`max-w-[75%] px-3 py-2 text-sm rounded-md shadow-sm ${\n                    msg.sender === 'user'\n                      ? 'bg-gray-200 text-black rounded-bl-none'\n                      : 'bg-blue-100 text-black rounded-br-none'\n                  }`}\n                >\n                  {msg.text}\n                </div>\n                {msg.sender === 'bot' && (\n                  <img\n                    className=\"rounded-full h-6 w-6 object-cover ml-2\"\n                    src={'https://avatar.iran.liara.run/public'}\n                    alt=\"Bot\"\n                  />\n                )}\n              </div>\n            ))}\n          </div>\n\n          {/* Input Area */}\n          <div className=\"p-3 border border-t border-  flex items-center gap-2\">\n            <input\n              type=\"text\"\n              placeholder=\"Type a message...\"\n              className=\"flex-1 p-2 border dark:border-gray-400 text-black rounded-md dark:text:black text-sm\"\n              value={input}\n              onChange={(e) => setInput(e.target.value)}\n              onKeyDown={(e) => e.key === 'Enter' && sendMessage()}\n            />\n            <button\n              className={`px-4 py-2 ${themeColor} text-white rounded-md hover:opacity-90 transition`}\n              onClick={sendMessage}\n            >\n              ➤\n            </button>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default MessageBot;\n"},{"id":"Navbar","element":"import {GitHubLogoIcon} from '@radix-ui/react-icons';\nimport {ThemeToggleBtn} from '@/lib/ThemeToggleBtn';\n\nexport const Navbar = () => {\n  return (\n    <div className=\"relative  max-w-[88rem] px-4 sm:px-6 lg:px-8 flex flex-col w-full py-5 mx-auto md:flex-row md:items-center md:justify-between\">\n      {/* logo */}\n      <div className=\"flex flex-row gap-12 items-center justify-between text-[1rem] lg:justify-start\">\n        <img src=\"/favicon.png\" className=\"w-8 object-contain\" alt=\"Logo\" />\n        <h4 className=\"text-2xl font-semibold -mt-1\">\n          UI<span className=\"text-primary\">gnite</span>\n        </h4>\n\n        {/* nav links */}\n        <nav className=\"flex justify-end space-x-2\">\n          <a\n            href=\"/pricing\"\n            className=\"cursor-pointer p-2 rounded opacity-70 hover:opacity-100\"\n          >\n            <p>Docs</p>\n          </a>\n          <a\n            href=\"/components\"\n            className=\"cursor-pointer p-2 rounded opacity-70 hover:opacity-100\"\n          >\n            <p>Components</p>\n          </a>\n          <a\n            href=\"/\"\n            className=\"cursor-pointer p-2 rounded opacity-70 hover:opacity-100\"\n          >\n            <p>About</p>\n          </a>\n        </nav>\n      </div>\n\n      {/* github and mode switch */}\n      <div className=\"hidden md:flex md:justify-center md:items-center md:gap-1\">\n        {/* md:justify-end md:space-x-4 */}\n        <ThemeToggleBtn />\n        <a\n          href=\"https://github.com/UIgnite/UIgnite\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          <div className=\"!dark cursor-pointer p-2 rounded hover:bg-zinc-200 dark:hover:bg-zinc-700\">\n            <GitHubLogoIcon className=\" h-4 w-4 \" />\n          </div>\n        </a>\n      </div>\n    </div>\n  );\n};\n"},{"id":"PricingCard","element":"import {themes} from '@/lib/theme';\n\ninterface ThemeSelectorParams {\n  currentTheme: string;\n  setTheme: (theme: string) => void;\n}\n\ninterface PricingParams {\n  title: string;\n  price: string;\n  validity?: string;\n  description: string;\n  features: string[];\n  highlighted?: boolean;\n  theme: string;\n  popular?: boolean;\n}\nexport const ThemeSelector = ({\n  currentTheme,\n  setTheme,\n}: ThemeSelectorParams) => {\n  return (\n    <div className=\"flex justify-center mb-12\">\n      <div\n        className={`inline-flex rounded-md p-1 ${themes[currentTheme].border} border`}\n      >\n        {Object.keys(themes).map((theme) => (\n          <button\n            key={theme}\n            className={`!dark px-4 py-2 rounded-md text-sm font-medium transition-colors duration-200 ${\n              currentTheme === theme\n                ? `${themes[theme].selectBg} ${themes[theme].selectText}`\n                : 'text-gray-500 hover:text-gray-900 dark:text-gray-400 dark:hover:text-white'\n            }`}\n            onClick={() => setTheme(theme)}\n          >\n            {themes[theme].name}\n          </button>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport const PricingCard = ({\n  title,\n  price,\n  validity,\n  description,\n  features,\n  highlighted = false,\n  theme,\n  popular = false,\n}: PricingParams) => {\n  const currentTheme = themes[theme];\n\n  return (\n    <div\n      className={`rounded-xl p-8 flex flex-col h-full relative transition-all duration-300 transform hover:scale-105 ${\n        highlighted ? currentTheme.highlightedCard : currentTheme.cardBackground\n      } ${popular ? 'ring-2 ring-offset-2 ring-offset-slate-900 ring-cyan-500' : ''}`}\n    >\n      {popular && (\n        <div\n          className={`absolute -top-4 left-1/2 transform -translate-x-1/2 px-4 py-1 bg-cyan-500 text-black rounded-full text-sm font-bold`}\n        >\n          Most Popular\n        </div>\n      )}\n\n      <div className={`${currentTheme.headerText} text-sm mb-2`}>{title}</div>\n      <div className={`text-4xl font-bold ${currentTheme.priceText} mb-4`}>\n        {price} <span className=\"-ml-2 text-2xl\">{validity}</span>\n      </div>\n      <p className={`${currentTheme.descriptionText} mb-4`}>{description}</p>\n      <hr className={`${currentTheme.line} mb-4 border-1.8 w-[96%]`} />\n      <div className=\"flex-grow\">\n        {features.map((feature, index) => (\n          <div key={index} className=\"flex items-start mb-4 group\">\n            <div className=\"mr-3 mt-1 transition-transform duration-300 group-hover:scale-110\">\n              <div\n                className={`w-5 h-5 rounded-full ${currentTheme.checkmarkBg} flex items-center justify-center`}\n              >\n                <svg\n                  xmlns=\"http://www.w3.org/2000/svg\"\n                  className={`h-3 w-3 ${currentTheme.checkmarkText}`}\n                  viewBox=\"0 0 20 20\"\n                  fill=\"currentColor\"\n                >\n                  <path\n                    fillRule=\"evenodd\"\n                    d=\"M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z\"\n                    clipRule=\"evenodd\"\n                  />\n                </svg>\n              </div>\n            </div>\n            <div\n              className={`${currentTheme.featureText} group-hover:text-white transition-colors duration-300`}\n            >\n              {feature}\n            </div>\n          </div>\n        ))}\n      </div>\n\n      <a\n        href=\"https://rzp.io/rzp/FuM0wyrD\"\n        className={`mt-8 py-3 px-4 rounded-lg font-medium transition-all text-center cursor-pointer duration-300 ${\n          highlighted\n            ? 'bg-gradient-to-r from-cyan-500 to-blue-500 text-white hover:from-cyan-600 hover:to-blue-600'\n            : 'bg-gradient-to-r from-gray-700 to-gray-600 text-white hover:from-gray-600 hover:to-gray-500'\n        }`}\n      >\n        Get Started\n      </a>\n    </div>\n  );\n};\n"},{"id":"Resizable","element":"import React, {\n  useCallback,\n  useEffect,\n  useRef,\n  useState,\n  ReactNode,\n} from 'react';\nimport {cn} from '@/lib/utils';\n\nexport interface ResizableProps {\n  className?: string;\n  defaultPosition?: number;\n  horizontal?: boolean;\n  children: [ReactNode, ReactNode]; // exactly two children expected\n}\n\nexport default function Resizable({\n  className,\n  defaultPosition,\n  horizontal: horizontalValue,\n  children,\n}: ResizableProps) {\n  const containerRef = useRef<HTMLDivElement | null>(null);\n  const draggerRef = useRef<HTMLDivElement | null>(null);\n\n  const [dividerPosition, setDividerPosition] = useState(\n    (defaultPosition ?? horizontalValue)\n      ? window.innerHeight - window.innerHeight / 3\n      : window.innerWidth / 5\n  );\n  const [mouseX, setMouseX] = useState(0);\n  const [mouseDown, setMouseDown] = useState(false);\n\n  const handleMouseUpDown = useCallback(() => {\n    const controller = new AbortController();\n    if (draggerRef.current) {\n      draggerRef.current.addEventListener(\n        'mousedown',\n        () => setMouseDown(true),\n        {signal: controller.signal}\n      );\n      draggerRef.current.addEventListener(\n        'mouseup',\n        () => setMouseDown(false),\n        {signal: controller.signal}\n      );\n    }\n    return () => {\n      controller.abort();\n    };\n  }, []);\n\n  useEffect(() => {\n    handleMouseUpDown();\n  }, [handleMouseUpDown]);\n\n  useEffect(() => {\n    if (mouseDown) setDividerPosition(mouseX);\n  }, [mouseX, mouseDown]);\n\n  return (\n    <div\n      ref={containerRef}\n      onMouseMove={(ev: React.MouseEvent<HTMLDivElement>) => {\n        console.log(ev);\n        setMouseX(horizontalValue ? ev.clientY : ev.clientX);\n      }}\n      className={cn(\n        `w-full h-full flex ${horizontalValue ? 'flex-col' : ''}`,\n        className\n      )}\n    >\n      <div\n        style={{\n          width: horizontalValue ? '100%' : dividerPosition,\n          height: horizontalValue ? dividerPosition : '100%',\n        }}\n      >\n        {children[0]}\n      </div>\n      <div\n        ref={draggerRef}\n        className={`${\n          horizontalValue\n            ? 'w-auto h-1 cursor-row-resize'\n            : 'h-full w-1 cursor-col-resize'\n        } relative group`}\n      >\n        <div\n          role=\"separator\"\n          aria-checked={mouseDown ? 'true' : 'false'}\n          className={`${\n            horizontalValue\n              ? 'top-1/2 left-0 right-0 bottom-1/2 -translate-y-1/2 h-0.5 group-hover:h-1'\n              : 'top-0 left-1/2 right-1/2 bottom-0 -translate-x-1/2 w-0.5 group-hover:w-1'\n          } absolute z-10 bg-[#263147] transition-all group-hover:bg-amber-300 aria-checked:bg-amber-300`}\n        />\n      </div>\n      <div\n        style={{\n          width: horizontalValue\n            ? '100%'\n            : containerRef.current\n              ? containerRef.current.offsetWidth - dividerPosition\n              : 0,\n          height: horizontalValue\n            ? containerRef.current\n              ? containerRef.current.offsetHeight - dividerPosition\n              : 0\n            : '100%',\n        }}\n      >\n        {children[1]}\n      </div>\n    </div>\n  );\n}\n"},{"id":"Skeleton","element":"import {cn} from '@/lib/utils';\n\nexport interface SkeletonParams {\n  className?: string;\n}\nconst Skeleton = ({className}: SkeletonParams) => {\n  return (\n    <div\n      className={cn(\n        `dark:bg-gray-600 bg-gray-400 animate-pulse rounded-full ${className}`\n      )}\n    ></div>\n  );\n};\n\nexport default Skeleton;\n"},{"id":"Spinner","element":"import {cn} from '@/lib/utils';\nimport {useEffect, useState, FC} from 'react';\n\ntype SpinnerProps = {\n  className?: string;\n  variant?:\n    | 'bounce'\n    | 'circular'\n    | 'bars'\n    | 'grid'\n    | 'ripple'\n    | 'terminal'\n    | 'loader';\n  text?: string;\n};\n\nexport const Spinner: FC<SpinnerProps> = ({\n  className = '',\n  variant = 'bounce',\n  text = 'Loading...',\n}) => {\n  // dots\n  if (variant === 'bounce') {\n    return (\n      <div\n        className={cn('flex space-x-2 justify-center items-center', className)}\n      >\n        <div className=\"h-3 w-3 dark:bg-light-primary bg-dark-primary rounded-full animate-bounce [animation-delay:-0.3s]\" />\n        <div className=\"h-3 w-3 dark:bg-light-primary bg-dark-primary rounded-full animate-bounce [animation-delay:-0.15s]\" />\n        <div className=\"h-3 w-3 dark:bg-light-primary bg-dark-primary rounded-full animate-bounce\" />\n      </div>\n    );\n  }\n\n  // circular\n  if (variant === 'circular') {\n    return (\n      <div className={cn('flex justify-center items-center', className)}>\n        <div className=\"loader-circle\" />\n      </div>\n    );\n  }\n\n  // bars\n  if (variant === 'bars') {\n    return (\n      <div\n        className={cn(\n          'flex space-x-1 justify-center items-center h-10',\n          className\n        )}\n      >\n        {[0, 0.2, 0.4, 0.6, 0.8].map((delay, idx) => (\n          <div\n            key={idx}\n            className=\"w-2 h-5 bg-dark-primary dark:bg-light-primary rounded animate-grow-shrink\"\n            style={{animationDelay: `${delay}s`}}\n          />\n        ))}\n      </div>\n    );\n  }\n\n  // ripple\n  if (variant === 'ripple') {\n    return (\n      <div\n        className={cn('relative flex justify-center items-center', className)}\n      >\n        <div className=\"absolute h-16 w-16 rounded-full border-4 border-dark-primary dark:border-light-primary animate-ping opacity-20\" />\n        <div className=\"absolute h-12 w-12 rounded-full border-4 border-dark-primary dark:border-light-primary animate-ping opacity-40 [animation-delay:0.3s]\" />\n        <div className=\"h-8 w-8 rounded-full border-4 border-dark-primary dark:border-light-primary\" />\n      </div>\n    );\n  }\n\n  // terminal\n  if (variant === 'terminal') {\n    const [displayText, setDisplayText] = useState('');\n    const [showCursor, setShowCursor] = useState(true);\n    const [textIndex, setTextIndex] = useState(0);\n\n    useEffect(() => {\n      if (textIndex < text.length) {\n        const timer = setTimeout(() => {\n          setDisplayText((prev) => prev + text[textIndex]);\n          setTextIndex((prev) => prev + 1);\n        }, 150);\n        return () => clearTimeout(timer);\n      } else {\n        const resetTimer = setTimeout(() => {\n          setDisplayText('');\n          setTextIndex(0);\n        }, 1000);\n        return () => clearTimeout(resetTimer);\n      }\n    }, [textIndex, text]);\n\n    useEffect(() => {\n      const blinkTimer = setInterval(() => {\n        setShowCursor((prev) => !prev);\n      }, 500);\n      return () => clearInterval(blinkTimer);\n    }, []);\n\n    return (\n      <div\n        className={cn(\n          'flex items-center justify-start bg-gray-900 text-green-500 p-4 font-mono rounded-md w-[270px]',\n          className\n        )}\n      >\n        <div className=\"flex flex-col w-full\">\n          <div className=\"flex mb-2 items-center\">\n            <span className=\"text-sm mr-auto text-gray-400\">Status</span>\n            <div className=\"ml-2 h-3 w-3 rounded-full bg-red-500\" />\n            <div className=\"ml-2 h-3 w-3 rounded-full bg-yellow-500\" />\n            <div className=\"ml-2 h-3 w-3 rounded-full bg-green-500\" />\n          </div>\n          <div className=\"h-22 w-full bg-black/50 p-2 rounded-md overflow-hidden text-sm flex items-center\">\n            {displayText}\n            {showCursor && (\n              <span className=\"inline-block w-[1px] h-5 bg-green-500 ml-1\" />\n            )}\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  // loader\n  if (variant === 'loader') {\n    return (\n      <div className={cn('flex items-center justify-center', className)}>\n        <div className=\"relative w-10 h-10\">\n          {Array.from({length: 12}).map((_, i) => (\n            <div\n              key={i}\n              className=\"absolute top-0 left-1/2 w-[2px] h-3 bg-dark-primary dark:bg-light-primary origin-center loader-line\"\n              style={{\n                transform: `rotate(${i * 30}deg) translateY(-20px)`,\n                opacity: (i + 1) / 12,\n                animation: 'fade 1.2s linear infinite',\n                animationDelay: `${(i * 0.1).toFixed(1)}s`,\n              }}\n            />\n          ))}\n        </div>\n      </div>\n    );\n  }\n\n  // fallback (dots)\n  return (\n    <div\n      className={cn('flex space-x-2 justify-center items-center', className)}\n    >\n      <div className=\"h-3 w-3 dark:bg-light-primary bg-dark-primary rounded-full animate-bounce [animation-delay:-0.3s]\" />\n      <div className=\"h-3 w-3 dark:bg-light-primary bg-dark-primary rounded-full animate-bounce [animation-delay:-0.15s]\" />\n      <div className=\"h-3 w-3 dark:bg-light-primary bg-dark-primary rounded-full animate-bounce\" />\n    </div>\n  );\n};\n"},{"id":"Switch","element":"import {useState} from 'react';\n\ninterface Switch {\n  defaultState?: boolean;\n}\n\nexport function Switch({defaultState = false}: Switch) {\n  const [state, setState] = useState<boolean>(defaultState);\n\n  return (\n    <div\n      role=\"switch\"\n      tabIndex={0}\n      onClick={() => setState(!state)}\n      className={`w-8 h-5 cursor-pointer bg-neutral-100 rounded-full relative`}\n    >\n      <div\n        className={`size-4 bg-black rounded-full absolute transition-all ease-in-out duration-300 top-1/2 ${\n          state ? 'translate-x-0.5' : 'translate-x-3.5'\n        } -translate-y-1/2`}\n      />\n    </div>\n  );\n}\n"},{"id":"Tabs","element":"import React from 'react';\nimport {useState} from 'react';\nimport {cn} from '@/lib/utils';\nimport {ReactElement} from 'react';\n\ninterface TabContentParams {\n  value: string;\n  activeTab?: string;\n  content: any;\n}\ninterface TabParams {\n  title: string;\n  value: string;\n  activeTab?: string;\n  setActiveTab?: any;\n  className?: string;\n}\ninterface TabListParams {\n  children: ReactElement<TabParams> | ReactElement<TabParams>[];\n  activeTab?: any;\n  setActiveTab?: (value: string) => void;\n  className?: string;\n}\ninterface TabsParams {\n  children: ReactElement<TabListParams> | ReactElement<TabListParams>[];\n  defaultVal?: string;\n  className?: string;\n}\n\nconst Tabs = ({children, defaultVal = '', className = ''}: TabsParams) => {\n  const [activeTab, setActiveTab] = useState<string>(defaultVal);\n\n  return (\n    <>\n      <div\n        className={`  w-[90%] dark:text-white  text-black  ring-[0.5px] ring-neutral-200  dark:ring-neutral-700 rounded-md ${className}`}\n      >\n        {React.Children.map(children, (child) => {\n          return React.cloneElement(child, {\n            activeTab,\n            setActiveTab,\n          });\n        })}\n      </div>\n    </>\n  );\n};\n\nconst TabList = ({\n  children,\n  activeTab,\n  setActiveTab,\n  className = '',\n}: TabListParams) => {\n  return (\n    <div className={cn(`flex space-x-2   rounded-md`, className)}>\n      {React.Children.map(children, (child) =>\n        React.cloneElement(child, {activeTab, setActiveTab})\n      )}\n    </div>\n  );\n};\n\nconst Tab = ({\n  title = 'Here is the Title',\n  value,\n  activeTab = '',\n  setActiveTab,\n  className = '',\n}: TabParams) => {\n  const isActive = activeTab === value;\n  return (\n    <button\n      onClick={() => setActiveTab(value)}\n      className={cn(\n        ` px-6 py-2 rounded-md text-md font-medium cursor-pointer\n        ${isActive ? ' dark:text-white dark:bg-neutral-900 text-black bg-neutral-200 ' : ' text-gray-500 hover:text-black dark:text-gray-600 dark:hover:text-white'}\n      `,\n        className\n      )}\n    >\n      {title}\n    </button>\n  );\n};\n\nconst TabContent = ({value, activeTab, content}: TabContentParams) => {\n  if (activeTab === value)\n    return (\n      <div className=\" dark:text-white  text-black   rounded-md flex overflow-x-auto scrollable-content  mt-3\">\n        {content}\n      </div>\n    );\n};\n\nexport {Tabs, Tab, TabList, TabContent};\n"},{"id":"Testimonials","element":"import React from 'react';\nimport {Star} from 'lucide-react';\nimport {cn} from '@/lib/utils';\n\nexport interface TestimonialsProps {\n  imageSrc?: string;\n  name: string;\n  title: string;\n  rating?: number;\n  message: string;\n  className?: string;\n}\n\nconst Testimonials: React.FC<TestimonialsProps> = ({\n  imageSrc,\n  name,\n  title,\n  rating = 5,\n  message,\n  className,\n}) => {\n  return (\n    <div\n      className={cn(\n        `w-full max-w-sm sm:max-w-md md:max-w-lg m-4 flex flex-col gap-2 shadow-sm p-4 text-black grainy-light rounded-lg`,\n        className\n      )}\n    >\n      <div className=\"flex flex-col sm:flex-row items-start sm:items-center justify-between gap-2 sm:gap-4\">\n        <div className=\"flex gap-2 justify-center items-center\">\n          <img\n            src={imageSrc || 'https://avatar.iran.liara.run/public'}\n            alt={name}\n            className=\"w-10 h-10 rounded-full object-cover\"\n          />\n          <div className=\"flex flex-col items-start\">\n            <div className=\"font-medium\">{name}</div>\n            <div className=\"text-xs opacity-60\">{title}</div>\n          </div>\n        </div>\n\n        <div className=\"flex gap-0.5\">\n          {Array.from({length: 5}).map((_, index) => (\n            <Star\n              key={index}\n              className={`h-4 w-4 ${\n                index < rating\n                  ? 'text-yellow-400 fill-yellow-400'\n                  : 'text-gray-300 fill-gray-300'\n              }`}\n            />\n          ))}\n        </div>\n      </div>\n\n      <p className=\"text-base mt-2 overflow-y-auto scrollable-content\">\n        {message}\n      </p>\n    </div>\n  );\n};\n\nexport default Testimonials;\n"},{"id":"TextArea","element":"import React from 'react';\nimport {cn} from '@/lib/utils';\n\nexport interface TextareaProps\n  extends React.TextareaHTMLAttributes<HTMLTextAreaElement> {}\n\nexport const TextArea = React.forwardRef<HTMLTextAreaElement, TextareaProps>(\n  ({className, ...props}, ref) => {\n    return (\n      <textarea\n        ref={ref}\n        className={cn(\n          'flex min-h-[150px] w-[450px] rounded-xl px-4 py-2 dark:bg-zinc-800 bg-zinc-50 border border-gray-400 dark:border-zinc-700 text-base shadow-sm placeholder:text-gray-400 dark:placeholder:text-zinc-600 focus-visible:outline-none focus-visible:ring-[1.2px] focus-visible:border-none focus-visible:ring-neutral-500 dark:focus-visible:ring-zinc-500',\n          className\n        )}\n        {...props}\n      />\n    );\n  }\n);\n\nTextArea.displayName = 'TextArea';\n"},{"id":"Toast","element":"import {cn} from '@/lib/utils';\n\nexport interface ToastUiParams {\n  idx: number;\n  title: string;\n  hovered?: boolean;\n  options: {\n    containerClassName?: string;\n    titleClassName?: string;\n    desc?: string;\n    descClassName?: string;\n  };\n}\n\nexport default function ToastUi({\n  idx,\n  title,\n  options,\n  hovered = false,\n}: ToastUiParams) {\n  return (\n    <div\n      style={{\n        bottom: hovered ? 40 + idx * 80 : 40 + idx * 20,\n        zIndex: 10 + idx,\n        scale: hovered ? 1 : 1 + idx * 0.05,\n      }}\n      className={cn(\n        'fixed right-10 transition-all min-w-[300px]',\n        options.containerClassName\n      )}\n    >\n      <div className=\"rounded-lg border border-neutral-300 bg-neutral-100 dark:bg-neutral-950 dark:border-neutral-700 shadow-lg px-5 py-3\">\n        <div\n          className={cn(\n            'font-semibold text-neutral-900 dark:text-neutral-100 truncate text-sm',\n            options.titleClassName\n          )}\n        >\n          {title}\n        </div>\n        {options.desc ? (\n          <div\n            className={cn(\n              'font-medium text-neutral-700 text-xs dark:text-neutral-300 mt-0.5',\n              options.descClassName\n            )}\n          >\n            {options.desc}\n          </div>\n        ) : null}\n      </div>\n      <div className=\"h-3.5\" />\n    </div>\n  );\n}\n"},{"id":"Tooltip","element":"import React, {useState} from 'react';\nimport {cn} from '@/lib/utils.js';\n\nexport interface TooltipParams {\n  title: string;\n  options?: {\n    delay?: number;\n    containerClassName?: string;\n    tooltipStyle?: React.CSSProperties;\n  };\n}\n\nexport const Tooltip = ({\n  children,\n  title = '',\n  options = {\n    delay: 300,\n    containerClassName: '',\n    tooltipStyle: {},\n  },\n}: React.PropsWithChildren<TooltipParams>) => {\n  const [visible, setVisible] = useState(false);\n  let timeout: ReturnType<typeof setTimeout>;\n\n  const showTooltip = () => {\n    timeout = setTimeout(() => {\n      setVisible(true);\n    }, options.delay);\n  };\n  const hideTooltip = () => {\n    timeout = setTimeout(() => {\n      clearTimeout(timeout);\n      setVisible(false);\n    }, options.delay);\n  };\n\n  return (\n    <div\n      className={cn('relative inline-block mt-10', options?.containerClassName)}\n    >\n      {visible && (\n        <div\n          style={options?.tooltipStyle}\n          className={cn(\n            'absolute bottom-full truncate left-1/2 -translate-x-1/2 text-sm text-center w-28 h-8 font-heading font-medium  px-4 py-1 rounded-md  text-black bg-white shadow-lg transition-opacity duration-300 opacity-100',\n            options.containerClassName\n          )}\n        >\n          {title}\n        </div>\n      )}\n\n      <div\n        onMouseEnter={showTooltip}\n        onMouseLeave={hideTooltip}\n        aria-label={title}\n        className=\"px-2 py-1 rounded-sm\"\n      >\n        {children}\n      </div>\n    </div>\n  );\n};\n"},{"id":"VideoPlayer","element":"import React from 'react';\nimport {Star} from 'lucide-react';\nimport {cn} from '@/lib/utils';\n\nexport interface TestimonialsProps {\n  imageSrc?: string;\n  name: string;\n  title: string;\n  rating?: number;\n  message: string;\n  className?: string;\n}\n\nconst Testimonials: React.FC<TestimonialsProps> = ({\n  imageSrc,\n  name,\n  title,\n  rating = 5,\n  message,\n  className,\n}) => {\n  return (\n    <div\n      className={cn(\n        `w-full max-w-sm sm:max-w-md md:max-w-lg m-4 flex flex-col gap-2 shadow-sm p-4 text-black grainy-light rounded-lg`,\n        className\n      )}\n    >\n      <div className=\"flex flex-col sm:flex-row items-start sm:items-center justify-between gap-2 sm:gap-4\">\n        <div className=\"flex gap-2 justify-center items-center\">\n          <img\n            src={imageSrc || 'https://avatar.iran.liara.run/public'}\n            alt={name}\n            className=\"w-10 h-10 rounded-full object-cover\"\n          />\n          <div className=\"flex flex-col items-start\">\n            <div className=\"font-medium\">{name}</div>\n            <div className=\"text-xs opacity-60\">{title}</div>\n          </div>\n        </div>\n\n        <div className=\"flex gap-0.5\">\n          {Array.from({length: 5}).map((_, index) => (\n            <Star\n              key={index}\n              className={`h-4 w-4 ${\n                index < rating\n                  ? 'text-yellow-400 fill-yellow-400'\n                  : 'text-gray-300 fill-gray-300'\n              }`}\n            />\n          ))}\n        </div>\n      </div>\n\n      <p className=\"text-base mt-2 overflow-y-auto scrollable-content\">\n        {message}\n      </p>\n    </div>\n  );\n};\n\nexport default Testimonials;\n"}]