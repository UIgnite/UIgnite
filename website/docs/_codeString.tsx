export default [
  {
    id: 'Accordion',
    element:
      "import React, {useState} from 'react';\nimport {ReactElement} from 'react';\nimport {cn} from '@/lib/utils';\nimport {ChevronDown} from 'lucide-react';\n\nexport interface AccordionParams {\n  title: string;\n  content: string;\n  className?: string;\n  defaultOpen?: boolean;\n  isOpen?: boolean | null;\n  onToggle?: () => void;\n}\n\nconst Accordion = ({\n  title,\n  content,\n  className = '',\n  defaultOpen = false,\n  isOpen = null,\n  onToggle,\n}: AccordionParams) => {\n  const [visible, setVisible] = useState(defaultOpen);\n  const toggleAccordion = () => {\n    setVisible(!visible);\n  };\n  return (\n    <div\n      className={cn(\n        'border-[0.5px] border-zinc-700/20 rounded-xl mt-[0.5px] overflow-hidden',\n        className\n      )}\n    >\n      {/* Accordion Header */}\n      {/* Bg color rendering inssue in switching modes  */}\n      <div\n        onClick={onToggle ?? toggleAccordion}\n        className=\"cursor-pointer dark:bg-zinc-900 dark:hover:bg-neutral-800   px-4 py-3 flex items-center justify-between  duration-300  \"\n      >\n        <span className=\"text-black dark:text-white font-medium  \">\n          {title}\n        </span>\n\n        <ChevronDown\n          className={cn(\n            'transition-transform duration-300 transform text-black dark:text-white mr-4 ',\n            (isOpen ?? visible) ? 'rotate-180' : 'rotate-0'\n          )}\n        />\n      </div>\n\n      {/* Accordion Content */}\n      <div\n        className={cn(\n          'transition-all duration-300  dark:bg-zinc-800 px-4 dark:text-white text-sm',\n          (isOpen ?? visible)\n            ? 'max-h-96 opacity-100 py-3'\n            : 'max-h-0 opacity-0 py-0 overflow-hidden'\n        )}\n      >\n        {content}\n      </div>\n    </div>\n  );\n};\n\ninterface AccordionWrapperParams {\n  children: ReactElement<AccordionParams> | ReactElement<AccordionParams>[];\n}\n\nconst AccordionWrapper = ({children}: AccordionWrapperParams) => {\n  const [activeIndex, setActiveIndex] = useState<number | null>(null);\n\n  return (\n    <div>\n      {React.Children.map(children, (child, index) =>\n        React.isValidElement(child)\n          ? React.cloneElement(child, {\n              isOpen: activeIndex === index,\n              onToggle: () =>\n                setActiveIndex(activeIndex === index ? null : index),\n            })\n          : child\n      )}\n    </div>\n  );\n};\n\nexport {AccordionWrapper, Accordion};\n",
  },
  {
    id: 'AlertDialogBox',
    element:
      'import { useState } from \'react\';\r\nimport { Button } from \'@/components/ui/Button\';\r\n\r\ntype AlertDialogBoxProps = {\r\n  title: string;\r\n  description: string;\r\n};\r\n\r\nconst AlertDialogBox = ({ title, description }: AlertDialogBoxProps) => {\r\n  const [isOpen, setIsOpen] = useState(false);\r\n\r\n  return (\r\n    <>\r\n      <Button onClick={() => setIsOpen(true)}>Show Dialog</Button>\r\n\r\n      {isOpen && (\r\n        <div className="fixed inset-0 bg-black/40 flex items-center justify-center z-50">\r\n          <div className="bg-white dark:bg-zinc-800 rounded-xl p-6 w-[90%] max-w-md shadow-lg">\r\n            <h2 className="text-lg font-bold mb-2 text-gray-900 dark:text-white">\r\n              {title}\r\n            </h2>\r\n            <p className="text-gray-700 dark:text-gray-300 mb-4">{description}</p>\r\n            <div className="flex justify-end gap-2">\r\n              <Button\r\n                onClick={() => setIsOpen(false)}\r\n                className="bg-zinc-200 text-black dark:bg-zinc-900 dark:hover:bg-zinc-900/80 hover:bg-zinc-300 dark:text-white"\r\n              >\r\n                Cancel\r\n              </Button>\r\n              <Button\r\n                onClick={() => setIsOpen(false)}\r\n                className="dark:bg-zinc-100 dark:text-zinc-900 dark:hover:bg-zinc-50 bg-zinc-900 text-white hover:bg-zinc-800"\r\n              >\r\n                Confirm\r\n              </Button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport { AlertDialogBox };\r\n',
  },
  {
    id: 'Avatar',
    element:
      "import React from 'react';\nimport {cn} from '@/lib/utils';\n\nexport interface AvatarProps extends React.ImgHTMLAttributes<HTMLImageElement> {\n  url: string;\n  alt: string;\n  className?: string;\n}\n\nconst Avatar = React.forwardRef<HTMLImageElement, AvatarProps>(\n  ({url, alt, className = '', ...props}, ref) => {\n    return (\n      <div className=\"flex gap-4 mt-2\">\n        <img\n          ref={ref}\n          src={url ? url : 'https://avatar.iran.liara.run/public'}\n          alt={alt}\n          className={cn(\n            'size-12 rounded-full border border-neutral-300',\n            className\n          )}\n          {...props}\n        />\n      </div>\n    );\n  }\n);\n\nAvatar.displayName = 'Avatar';\n\nexport {Avatar};\n",
  },
  {
    id: 'Button',
    element:
      "import React, {useEffect, useState} from 'react';\nimport {cn} from '@/lib/utils';\nimport {cva} from 'class-variance-authority';\nimport {Spinner} from '@/components/ui/Spinner';\n\nexport interface ButtonParams\n  extends React.ButtonHTMLAttributes<HTMLButtonElement> {\n  size?: 'default' | 'sm' | 'lg' | 'xl' | 'icon';\n  className?: string;\n  isLoading?: boolean;\n  icon?: React.ReactNode;\n  variant?:\n    | 'primary'\n    | 'destructive'\n    | 'success'\n    | 'warning'\n    | 'outline'\n    | 'secondary'\n    | 'ghost'\n    | 'glass'\n    | 'gradient'\n    | 'dark'\n    | 'light'\n    | 'movingBorder';\n  fullWidth?: boolean;\n  animatedBorder?: boolean;\n  gradientBorder?: boolean;\n  responsiveSize?: 'auto' | 'compact' | 'expand';\n}\n\nconst Button = React.forwardRef<\n  HTMLButtonElement,\n  React.PropsWithChildren<ButtonParams>\n>(\n  (\n    {\n      children,\n      size = 'default',\n      className = '',\n      isLoading = false,\n      icon,\n      variant = 'primary',\n      fullWidth,\n      animatedBorder = false,\n      gradientBorder = false,\n      responsiveSize,\n      ...props\n    },\n    ref\n  ) => {\n    const [animationPosition, setAnimationPosition] = useState({x: 0, y: 0});\n\n    useEffect(() => {\n      if (!animatedBorder) return;\n\n      const interval = setInterval(() => {\n        setAnimationPosition((prev) => ({\n          x: (prev.x + 1) % 100,\n          y: (prev.y + 1) % 100,\n        }));\n      }, 50);\n\n      return () => clearInterval(interval);\n    }, [animatedBorder]);\n\n    const buttonVariants = cva(\n      'inline-flex text-4xl items-center cursor-pointer justify-center whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 relative',\n      {\n        variants: {\n          variant: {\n            primary: 'bg-[#305CDE] text-white hover:bg-blue-600',\n            destructive: 'bg-red-500 text-white hover:bg-red-600',\n            success: 'bg-[#00b306] text-white hover:bg-green-600',\n            warning: 'bg-[#ff8a00] text-white hover:bg-yellow-600',\n            outline:\n              'border border-gray-500 bg-transparent hover:bg-gray-700 hover:text-white',\n            secondary: 'bg-rose-500 text-white hover:bg-rose-400',\n            ghost:\n              'dark:hover:bg-zinc-800 dark:text-white text-gray-700 hover:bg-zinc-800 hover:text-gray-100',\n            glass:\n              'dark:bg-white/10 backdrop-blur-md border border-black/10 dark:border-white/20 dark:text-white dark:hover:bg-white/20 hover:bg-white/60',\n            gradient:\n              'bg-gradient-to-r from-[#d60db8] to-[#1919e0] text-white hover:from-blue-600 hover:to-purple-700',\n            dark: 'bg-black text-white hover:bg-black/70',\n            light: 'bg-gray-50 text-black hover:bg-gray-100',\n            movingBorder: 'text-white bg-black border-none',\n          },\n          size: {\n            default: 'h-10 px-4 py-2 min-w-[90px]',\n            sm: 'h-9 rounded-md px-3 min-w-[80px]',\n            lg: 'h-11 rounded-md px-8 min-w-[110px]',\n            xl: 'h-12 rounded-md px-10 min-w-[130px] text-base',\n            icon: 'h-10 w-10 min-w-[40px]',\n          },\n          fullWidth: {\n            true: 'w-full',\n            false: '',\n          },\n          responsiveSize: {\n            auto: 'md:text-base text-xs md:h-10 h-8 md:px-4 px-2',\n            compact:\n              'lg:h-10 md:h-9 h-8 lg:px-4 md:px-3 px-2 lg:text-sm text-xs',\n            expand: 'lg:h-12 md:h-11 h-10 lg:px-8 md:px-6 px-4',\n          },\n        },\n        defaultVariants: {\n          variant: 'primary',\n          size: 'default',\n          fullWidth: false,\n          responsiveSize: undefined,\n        },\n      }\n    );\n\n    const getBorderStyle = () => {\n      if (animatedBorder) {\n        return {\n          backgroundImage: `linear-gradient(90deg, #00f0ff, #00ff6a, #ff00e6, #0096ff)`,\n          backgroundSize: '300% 300%',\n          backgroundPosition: `${animationPosition.x}% ${animationPosition.y}%`,\n          padding: '2px',\n          borderRadius: '0.375rem',\n          animation: '5s ease infinite',\n        };\n      }\n      if (gradientBorder) {\n        return {\n          backgroundImage:\n            'linear-gradient(to right, #4f46e5, #9333ea, #e11d48)',\n          padding: '2px',\n          borderRadius: '0.375rem',\n        };\n      }\n      return undefined;\n    };\n\n    const buttonContent = (\n      <>\n        {isLoading ? (\n          <Spinner className={cn(children ? 'mr-2' : '')} />\n        ) : icon ? (\n          <span className={cn(children ? 'mr-2' : '')}>{icon}</span>\n        ) : null}\n        {children}\n      </>\n    );\n\n    const renderButton = () => (\n      <button\n        {...props}\n        ref={ref}\n        className={cn(\n          buttonVariants({\n            variant: animatedBorder || gradientBorder ? 'dark' : variant,\n            size,\n            fullWidth,\n            responsiveSize,\n            className: cn(\n              (animatedBorder || gradientBorder) &&\n                'w-full m-0 rounded-[calc(0.375rem-1px)]',\n              className\n            ),\n          })\n        )}\n      >\n        {buttonContent}\n      </button>\n    );\n\n    const borderStyle = getBorderStyle();\n\n    return borderStyle ? (\n      <div\n        className={cn('inline-flex', fullWidth && 'w-full')}\n        style={borderStyle}\n      >\n        {renderButton()}\n      </div>\n    ) : (\n      renderButton()\n    );\n  }\n);\n\nButton.displayName = 'Button';\n\nexport {Button};\n",
  },
  {
    id: 'Card',
    element:
      "import React from 'react';\nimport {cn} from '@/lib/utils';\n\nexport interface CardProps extends React.HTMLAttributes<HTMLDivElement> {}\n\nconst Card = React.forwardRef<HTMLDivElement, CardProps>(\n  ({className, ...props}, ref) => (\n    <div\n      ref={ref}\n      className={cn(\n        'border border-neutral-200 dark:border-neutral-700 rounded-xl shadow-md w-sm px-4 py-2',\n        className\n      )}\n      {...props}\n    />\n  )\n);\nCard.displayName = 'Card';\n\nexport interface CardSectionProps\n  extends React.HTMLAttributes<HTMLDivElement> {}\n\nconst CardHeader: React.FC<CardSectionProps> = ({className, ...props}) => (\n  <div className={cn('mb-2', className)} {...props} />\n);\nCardHeader.displayName = 'CardHeader';\n\nconst CardTitle: React.FC<React.HTMLAttributes<HTMLHeadingElement>> = ({\n  className,\n  ...props\n}) => <h3 className={cn('text-lg font-semibold', className)} {...props} />;\nCardTitle.displayName = 'CardTitle';\n\nconst CardDescription: React.FC<React.HTMLAttributes<HTMLParagraphElement>> = ({\n  className,\n  ...props\n}) => <p className={cn('text-sm', className)} {...props} />;\nCardDescription.displayName = 'CardDescription';\n\nconst CardContent: React.FC<CardSectionProps> = ({className, ...props}) => (\n  <div className={cn('mt-2', className)} {...props} />\n);\nCardContent.displayName = 'CardContent';\n\nconst CardFooter: React.FC<CardSectionProps> = ({className, ...props}) => (\n  <div className={cn('mt-4', className)} {...props} />\n);\nCardFooter.displayName = 'CardFooter';\n\nexport {Card, CardHeader, CardTitle, CardDescription, CardContent, CardFooter};\n",
  },
  {
    id: 'Carosuel',
    element:
      "import React, {useState, useRef, useEffect, ReactNode} from 'react';\nimport {cn} from '@/lib/utils';\nimport {cva} from 'class-variance-authority';\nimport {MoveLeft, MoveRight} from 'lucide-react';\n\ninterface CarouselProps {\n  children: ReactNode[];\n  className?: string;\n}\n\nconst carouselVariants = cva('relative w-full', {\n  variants: {\n    size: {\n      default: '',\n    },\n  },\n  defaultVariants: {\n    size: 'default',\n  },\n});\n\nconst Carosuel: React.FC<CarouselProps> = ({children, className}) => {\n  const [current, setCurrent] = useState<number>(0);\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const next = () => {\n    if (current < children.length - 1) setCurrent((prev) => prev + 1);\n  };\n\n  const prev = () => {\n    if (current > 0) setCurrent((prev) => prev - 1);\n  };\n\n  useEffect(() => {\n    const container = containerRef.current;\n    if (container) {\n      const width = container.offsetWidth;\n      container.scrollTo({left: current * width, behavior: 'smooth'});\n    }\n  }, [current]);\n\n  return (\n    <div className={cn(carouselVariants(), className)}>\n      <div\n        ref={containerRef}\n        className=\"flex overflow-x-hidden scroll-smooth h-72\"\n      >\n        {React.Children.map(children, (child) => (\n          <div className=\"w-full h-full flex-shrink-0\">{child}</div>\n        ))}\n      </div>\n\n      {/* Navigation Buttons */}\n      <button\n        onClick={prev}\n        disabled={current === 0}\n        className=\"absolute top-1/2 -left-10 cursor-pointer transform -translate-y-1/2 dark:bg-black bg-gray-100 border-1 border-gray-200 dark:border-gray-800 rounded-full p-2 shadow hover:bg-gray-200 dark:hover:bg-gray-900 disabled:opacity-40\"\n      >\n        <MoveLeft className=\"dark:text-gray-200 text-gray-900 \" />\n      </button>\n      <button\n        onClick={next}\n        disabled={current === children.length - 1}\n        className=\"absolute top-1/2 -right-10 cursor-pointer transform -translate-y-1/2 dark:bg-black bg-gray-100 border-1 border-gray-200 dark:border-gray-800 rounded-full p-2 shadow hover:bg-gray-200 dark:hover:bg-gray-900 disabled:opacity-40\"\n      >\n        <MoveRight className=\"dark:text-gray-200 text-gray-900\" />\n      </button>\n    </div>\n  );\n};\n\nexport {Carosuel};\n",
  },
  {
    id: 'Dropdown',
    element:
      'import React, {useCallback, useRef, useState} from \'react\';\nimport {Button} from \'@/components/ui/Button\';\n\nfunction Dropdown({\n  children,\n  button,\n  title = \'Open\',\n}: React.PropsWithChildren<{button?: React.ReactNode; title?: string}>) {\n  const buttonRef = useRef<HTMLDivElement | null>(null);\n  const dropDownRef = useRef(null);\n\n  const [open, setOpen] = useState(false);\n\n  const handleToogleOpen = useCallback(() => {\n    setOpen(!open);\n  }, [open, setOpen]);\n\n  return (\n    <React.Fragment>\n      {open ? (\n        <span\n          onClick={handleToogleOpen}\n          className="fixed z-10 bg-black/20 inset-0"\n        ></span>\n      ) : null}\n      <div>\n        {open ? (\n          <div\n            ref={dropDownRef}\n            style={{\n              top: (buttonRef.current?.getBoundingClientRect()?.top ?? 0) + 50,\n            }}\n            className="min-w-56 fixed z-20 bg-neutral-200 min-h-5 rounded-lg border border-neutral-400 shadow p-1 flex flex-col gap-y-1"\n          >\n            {children}\n          </div>\n        ) : null}\n        <div ref={buttonRef} role="button" onClick={handleToogleOpen}>\n          {button ?? <Button>{title}</Button>}\n        </div>\n      </div>\n    </React.Fragment>\n  );\n}\n\nexport {Dropdown};\n',
  },
  {
    id: 'Footer',
    element:
      'import {FiGithub, FiLinkedin} from \'react-icons/fi\';\nimport {FaDiscord, FaInstagram} from \'react-icons/fa\';\nimport {FaXTwitter} from \'react-icons/fa6\';\nimport {SlSocialYoutube} from \'react-icons/sl\';\nimport {useTheme} from \'@/hooks/theme\';\n\nconst Footer = () => {\n  const {theme} = useTheme();\n  return (\n    <div className="w-full h-full">\n      <div className="dark:border-t-zinc-800 border-t mt-6 border-t-zinc-300"></div>\n      <div className="max-w-[1200px] flex flex-col w-full py-5 justify-between mx-auto pb-5">\n        <div className="mt-4 flex justify-between">\n          {/* website */}\n          <div className="flex flex-col gap-6">\n            {/* logo */}\n            <div className="w-56 h-12 transition-all duration-300 ease-in-out hover:scale-105  cursor-pointer -ml-4">\n              <img\n                alt="UIgnite"\n                className="h-full w-full"\n                src={\n                  theme === \'dark\'\n                    ? \'/chaicode-white.png\'\n                    : \'/chaicode-black.png\'\n                }\n              />\n            </div>\n\n            {/* tagline */}\n            <p className="text-gray-600 dark:text-zinc-400 w-72">\n              Home for programmers\n            </p>\n\n            {/* socials */}\n            <div className="flex gap-4 text-zinc-500 ">\n              <a href="https://github.com/hiteshchoudhary" target="_blank">\n                <FiGithub className="transition-all duration-200 ease-in-out hover:scale-105 dark:hover:text-orange-500 hover:text-zinc-700 size-5 cursor-pointer" />\n              </a>\n\n              <a href="https://discord.com/invite/WDrH3zuWFb" target="_blank">\n                <FaDiscord className="transition-all duration-200 ease-in-out hover:scale-105 dark:hover:text-orange-500 hover:text-zinc-700 size-5 cursor-pointer" />\n              </a>\n\n              <a href="https://x.com/hiteshdotcom" target="_blank">\n                <FaXTwitter className="transition-all duration-200 ease-in-out hover:scale-105 dark:hover:text-orange-500 hover:text-zinc-700 size-5 cursor-pointer" />\n              </a>\n\n              <a\n                href="https://www.linkedin.com/in/hiteshchoudhary"\n                target="_blank"\n              >\n                <FiLinkedin className="transition-all duration-200 ease-in-out hover:scale-105 dark:hover:text-orange-500 hover:text-zinc-700 size-5 cursor-pointer" />\n              </a>\n\n              <a\n                href="https://www.instagram.com/hiteshchoudharyofficial"\n                target="_blank"\n              >\n                <FaInstagram className="transition-all duration-200 ease-in-out hover:scale-105 dark:hover:text-orange-500 hover:text-zinc-700 size-5 cursor-pointer" />\n              </a>\n\n              <a href="https://www.youtube.com/@chaiaurcode" target="_blank">\n                <SlSocialYoutube className="transition-all duration-200 ease-in-out hover:scale-105 dark:hover:text-orange-500 hover:text-zinc-700 size-5 cursor-pointer" />\n              </a>\n            </div>\n          </div>\n\n          {/* other sections like product getStarted legal */}\n          <div className="flex gap-16 mt-3">\n            <div className="text-zinc-500 dark:text-zinc-400 flex flex-col gap-2">\n              <h2 className="text-zinc-800 dark:text-zinc-100 font-semibold">\n                Product\n              </h2>\n              <a\n                href="https://courses.chaicode.com/learn"\n                target="_blank"\n                className="cursor-pointer dark:hover:text-orange-400 hover:text-zinc-700"\n              >\n                Courses\n              </a>\n              <a\n                href="https://courses.chaicode.com/learn/view-all?show=batch&type=17"\n                target="_blank"\n                className="cursor-pointer dark:hover:text-orange-400 hover:text-zinc-700"\n              >\n                Cohort\n              </a>\n              <a\n                href="https://courses.chaicode.com/learn/batch/about?bundleId=226894"\n                target="_blank"\n                className="cursor-pointer dark:hover:text-orange-400 hover:text-zinc-700"\n              >\n                Coding Hero\n              </a>\n              <a\n                href="https://masterji.co/login"\n                target="_blank"\n                className="cursor-pointer dark:hover:text-orange-400 hover:text-zinc-700"\n              >\n                MasterJI\n              </a>\n            </div>\n            <div className="text-zinc-500 dark:text-zinc-400 flex flex-col gap-2">\n              <h2 className="text-zinc-800 dark:text-zinc-100 font-semibold">\n                Resources\n              </h2>\n\n              <a\n                href="https://freeapi.app/"\n                target="_blank"\n                className="cursor-pointer dark:hover:text-orange-400 hover:text-zinc-700"\n              >\n                FreeAPI\n              </a>\n              <a\n                href="https://chaidocs.vercel.app/"\n                target="_blank"\n                className="cursor-pointer dark:hover:text-orange-400 hover:text-zinc-700"\n              >\n                ChaiDocs\n              </a>\n            </div>\n\n            <div className="text-zinc-500 dark:text-zinc-400 flex flex-col gap-2">\n              <h2 className="text-zinc-800 dark:text-zinc-100 font-semibold">\n                Legal\n              </h2>\n              <a\n                href="#"\n                className="cursor-pointer dark:hover:text-orange-400 hover:text-zinc-700"\n              >\n                Terms of Service\n              </a>\n              <a\n                href="#"\n                className="cursor-pointer dark:hover:text-orange-400 hover:text-zinc-700"\n              >\n                Privacy Policy\n              </a>\n              <a\n                href="#"\n                className="cursor-pointer dark:hover:text-orange-400 hover:text-zinc-700"\n              >\n                Pricing Policy\n              </a>\n              <a\n                href="#"\n                className="cursor-pointer dark:hover:text-orange-400 hover:text-zinc-700"\n              >\n                Refund Policy\n              </a>\n            </div>\n          </div>\n        </div>\n\n        <div className="dark:border-t-zinc-800 border-t border-t-zinc-300 mt-8 mb-6"></div>\n        <div className="flex justify-between text-zinc-800 dark:text-zinc-300">\n          <div className="">© 2025 ChaiCode. All rights reserved.</div>\n          <div>\n            Built with ❤️ by{\' \'}\n            <span className="underline cursor-pointer">ChaiCode</span>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport {Footer};\n',
  },
  {
    id: 'Input',
    element:
      "import React from 'react';\nimport {cn} from '@/lib/utils';\n\nexport interface InputProps\n  extends React.InputHTMLAttributes<HTMLInputElement> {}\n\nconst Input = React.forwardRef<HTMLInputElement, InputProps>(\n  ({className, type = 'text', ...props}, ref) => {\n    return (\n      <input\n        ref={ref}\n        type={type}\n        className={cn(\n          'flex w-full h-9 py-1 px-2 rounded-md border border-gray-400 dark:border-zinc-700 text-base shadow-sm placeholder:text-gray-400 dark:placeholder:text-zinc-600 focus-visible:outline-none focus-visible:ring-[1.2px] focus-visible:border-none focus-visible:ring-neutral-500 dark:focus-visible:ring-zinc-500 disabled:cursor-not-allowed disabled:opacity-50',\n          className\n        )}\n        {...props}\n      />\n    );\n  }\n);\n\nInput.displayName = 'Input';\n\nexport {Input};\n",
  },
  {
    id: 'InputOtp',
    element:
      "import React, {useEffect, useRef, useState} from 'react';\r\n\r\ninterface InputOTPProps {\r\n  length?: number;\r\n  onOTPSubmit?: (otp: string) => void;\r\n}\r\n\r\nconst InputOTP: React.FC<InputOTPProps> = ({\r\n  length = 4,\r\n  onOTPSubmit = () => {},\r\n}) => {\r\n  const [otp, setOtp] = useState<string[]>(new Array(length).fill(''));\r\n  const inputRefs = useRef<(HTMLInputElement | null)[]>([]);\r\n\r\n  useEffect(() => {\r\n    inputRefs.current[0]?.focus();\r\n  }, []);\r\n\r\n  const handleChange = (\r\n    index: number,\r\n    e: React.ChangeEvent<HTMLInputElement>\r\n  ) => {\r\n    const value = e.target.value;\r\n    if (isNaN(Number(value))) return;\r\n\r\n    const newOtp = [...otp];\r\n    newOtp[index] = value.slice(-1); // Only last digit\r\n    setOtp(newOtp);\r\n\r\n    const combined = newOtp.join('');\r\n    if (combined.length === length && !newOtp.includes('')) {\r\n      onOTPSubmit(combined);\r\n    }\r\n\r\n    const nextIndex = newOtp.findIndex((val, i) => i > index && val === '');\r\n    if (nextIndex !== -1 && inputRefs.current[nextIndex]) {\r\n      inputRefs.current[nextIndex]?.focus();\r\n    }\r\n  };\r\n\r\n  const handleKeyDown = (\r\n    index: number,\r\n    e: React.KeyboardEvent<HTMLInputElement>\r\n  ) => {\r\n    if (e.key === 'Backspace' && !otp[index] && index > 0) {\r\n      const newOtp = [...otp];\r\n      newOtp[index - 1] = '';\r\n      setOtp(newOtp);\r\n      inputRefs.current[index - 1]?.focus();\r\n    }\r\n  };\r\n\r\n  const handleClick = (index: number) => {\r\n    inputRefs.current[index]?.setSelectionRange(1, 1);\r\n  };\r\n\r\n  return (\r\n    <div className=\"flex items-center justify-center gap-3 mt-10\">\r\n      {otp.map((digit, index) => (\r\n        <input\r\n          key={index}\r\n          type=\"text\"\r\n          inputMode=\"numeric\"\r\n          maxLength={1}\r\n          value={digit}\r\n          ref={(el) => {\r\n            inputRefs.current[index] = el;\r\n          }}\r\n          onChange={(e) => handleChange(index, e)}\r\n          onKeyDown={(e) => handleKeyDown(index, e)}\r\n          onClick={() => handleClick(index)}\r\n          className=\"w-14 h-14 text-center text-xl -mt-4 shadow-lg  dark:shadow-black dark:text-black rounded-sm dark:bg-zinc-200 bg-zinc-800 text-white outline-none focus:ring-2 focus:ring-blue-500 transition-all duration-150\"\r\n        />\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport {InputOTP};\r\n",
  },
  {
    id: 'MessageBot',
    element:
      "import {MessageCircle} from 'lucide-react';\nimport {useState} from 'react';\nimport {Avatar} from '@/components/ui/Avatar';\nimport {Input} from '@/components/ui/Input';\n\nexport interface MessageBotParams {\n  orgName?: string;\n  themeColor?: string;\n  url?: string;\n  alt?: string;\n}\n\nexport interface Message {\n  text: string;\n  sender: 'user' | 'bot';\n}\n\nconst MessageBot = ({\n  orgName = 'UIgnite',\n  themeColor = 'bg-blue-600',\n  url = '/uignite-bot.png',\n}: MessageBotParams) => {\n  const [isOpen, setIsOpen] = useState(false);\n  const [input, setInput] = useState('');\n  const [count, setCount] = useState(1);\n  const [messages, setMessages] = useState<Message[]>([\n    {\n      text: `Hi I am ${orgName} bot. How can I help you?`,\n      sender: 'bot',\n    },\n  ]);\n\n  const sendMessage = () => {\n    if (!input.trim()) return;\n\n    const userMessage: Message = {text: input, sender: 'user'};\n    const botMessage: Message = {\n      text: `bot response ${count + 1}`,\n      sender: 'bot',\n    };\n\n    setMessages((prev) => [...prev, userMessage]);\n    setInput('');\n    setCount(count + 1);\n\n    setTimeout(() => {\n      setMessages((prev) => [...prev, botMessage]);\n    }, 800);\n  };\n\n  return (\n    <div className=\"z-[1000] fixed bottom-5 right-5\">\n      {/* Overlay: Jab isOpen true ho, toh poori screen dark ya blur karne ke liye */}\n      {isOpen && (\n        <div\n          className=\"fixed inset-0 bg-black/30 z-[1000]\"\n          onClick={() => setIsOpen(false)} // Overlay click se chatbot close hoga\n        ></div>\n      )}\n\n      {/* Floating Button */}\n      <button\n        className={`cursor-pointer z-[1000] size-14 ${themeColor} text-white rounded-full shadow-lg flex items-center justify-center text-2xl hover:scale-105 transition-transform duration-200`}\n        onClick={() => setIsOpen(!isOpen)}\n      >\n        <MessageCircle />\n      </button>\n\n      {/* Chatbot Box */}\n      {isOpen && (\n        <div className=\"z-[1000] fixed bottom-[6.5rem] right-8 w-80 h-[32rem] bg-white rounded-lg shadow-2xl flex flex-col overflow-hidden\">\n          {/* Header */}\n          <div\n            className={`p-2 bg-neutral-800 text-white text-left items-center`}\n          >\n            <button\n              className=\"p-1 rounded-full  transition-colors duration-200\"\n              onClick={() => setIsOpen(false)}\n            >\n              <img\n                src=\"/dark-mode-logo.png\"\n                alt=\"Close\"\n                className=\"w-28 h-8 object-cover\"\n              />\n            </button>\n          </div>\n\n          {/* Messages */}\n          <div className=\"flex-1 px-3 py-4 overflow-y-auto space-y-3 bg-gray-50 scrollable-content\">\n            {messages.map((msg, index) => (\n              <div\n                key={index}\n                className={`flex items-end ${msg.sender === 'user' ? 'justify-start' : 'justify-end'}`}\n              >\n                {msg.sender === 'user' && (\n                  <Avatar\n                    url=\"https://avatar.iran.liara.run/public\"\n                    alt=\"User\"\n                    className=\"mr-2 size-10\"\n                  />\n                )}\n                <div\n                  className={`max-w-[75%] px-3 py-2 text-sm rounded-md shadow-sm ${\n                    msg.sender === 'user'\n                      ? 'bg-gray-200 text-black rounded-bl-none'\n                      : 'bg-blue-100 text-black rounded-br-none'\n                  }`}\n                >\n                  {msg.text}\n                </div>\n                {msg.sender === 'bot' && (\n                  <Avatar url={url} alt=\"bot\" className=\"ml-2 size-10\" />\n                )}\n              </div>\n            ))}\n          </div>\n\n          {/* Input Area */}\n          <div className=\"p-3 border-t border-t-zinc-200 flex items-center gap-2\">\n            <Input\n              placeholder=\"Type a message...\"\n              className=\"flex-1 text-sm text-zinc-800\"\n              value={input}\n              onChange={(e) => setInput(e.target.value)}\n              onKeyDown={(e) => e.key === 'Enter' && sendMessage()}\n            />\n            <button\n              className={`px-4 py-2 ${themeColor} text-white cursor-pointer rounded-md hover:opacity-90 transition`}\n              onClick={sendMessage}\n            >\n              ➤\n            </button>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport {MessageBot};\n",
  },
  {
    id: 'Navbar',
    element:
      'import {ThemeToggleBtn} from \'@/lib/ThemeToggleBtn\';\nimport {useTheme} from \'@/hooks\';\nimport {Button} from \'../Button\';\n\nconst Navbar = () => {\n  const {theme} = useTheme();\n  return (\n    <div\n      className="bg-zinc-100 rounded-sm dark:bg-zinc-800 relative flex py-1 mx-auto flex-row items-center justify-between\n    h-14 top-0 w-full sm:min-w-[650px] px-4"\n    >\n      {/* logo */}\n      <div className="flex flex-row gap-12 items-center justify-between text-[1rem] lg:justify-start">\n        <img\n          src={`${theme === \'light\' ? \'/chaicode-black.png\' : \'/chaicode-white.png\'}`}\n          className="size-32 object-contain"\n          alt="Logo"\n        />\n\n        {/* nav links */}\n        <nav className="flex justify-between">\n          <a\n            href="#"\n            className="cursor-pointer p-2 rounded opacity-70 hover:opacity-100"\n          >\n            <p>Cohorts</p>\n          </a>\n          <a\n            href="#"\n            className="cursor-pointer p-2 rounded opacity-70 hover:opacity-100"\n          >\n            <p>Udemy</p>\n          </a>\n          <a\n            href="#"\n            className="cursor-pointer p-2 rounded opacity-70 hover:opacity-100"\n          >\n            <p>Docs</p>\n          </a>\n          <a\n            href="#"\n            className="cursor-pointer p-2 rounded opacity-70 hover:opacity-100"\n          >\n            <p>Reviews</p>\n          </a>\n        </nav>\n      </div>\n\n      {/* github and mode switch */}\n      <div className="flex justify-center items-center gap-1">\n        <div className="">\n          <ThemeToggleBtn />\n        </div>\n        <Button className="ml-2 size-9 bg-orange-500 hover:bg-orange-600">\n          Login\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport {Navbar};\n',
  },
  {
    id: 'PricingCard',
    element:
      "import {useTheme} from '@/hooks/theme';\nimport {Button} from '@/components/ui/Button';\nimport {BsCurrencyDollar} from 'react-icons/bs';\n\ninterface PricingParams {\n  title: string;\n  price: string;\n  validity?: string;\n  description: string;\n  features: string[];\n  highlighted?: boolean;\n  popular?: boolean;\n}\n\nconst PricingCard = ({\n  title,\n  price,\n  validity,\n  description,\n  features,\n  highlighted = false,\n  popular = false,\n}: PricingParams) => {\n  const {theme} = useTheme();\n  return (\n    <div\n      className={`rounded-xl shadow-sm w-[400px] p-8 flex flex-col h-full relative transition-all duration-200 transform hover:scale-102 ${\n        highlighted\n          ? `${theme === 'light' ? 'grainy-light' : ''} dark:bg-neutral-900`\n          : `${theme === 'light' ? 'grainy-light' : ''} dark:bg-zinc-800`\n      } ${popular ? 'border-none ring-2 ring-offset-2 dark:ring-offset-slate-900 dark:ring-cyan-700' : ''}`}\n    >\n      {popular && (\n        <div\n          className={`absolute -top-4 left-1/2 transform -translate-x-1/2 px-4 py-1 ${theme === 'light' ? 'bg-zinc-900' : 'bg-cyan-700'} text-zinc-200 rounded-full text-sm font-bold`}\n        >\n          Most Popular\n        </div>\n      )}\n\n      <div\n        className={`text-lg font-normal mb-2 ${highlighted ? ' text-zinc-800 dark:text-zinc-200' : `text-neutral-800 dark:text-zinc-200`}`}\n      >\n        {title}\n      </div>\n\n      <div\n        className={`text-4xl font-bold mb-4 flex items-center ${highlighted ? 'text-zinc-800 dark:text-zinc-200' : `text-neutral-900 dark:text-white`}`}\n      >\n        <>\n          <BsCurrencyDollar className=\"inline -mr-1.5\" />\n          {price}{' '}\n          <span\n            className={`text-lg ml-2 mt-1 font-normal ${highlighted ? 'text-gray-500/80' : 'text-zinc-500/80'}`}\n          >\n            {validity}\n          </span>\n        </>\n      </div>\n      <p\n        className={`mb-4 ${highlighted ? 'text-zinc-500 dark:text-zinc-300' : `text-zinc-500 dark:text-gray-300`}`}\n      >\n        {description}\n      </p>\n      <hr\n        className={`mb-4 border-1.8 w-[96%] ${highlighted ? 'text-zinc-700' : `$text-zinc-300 dark:text-gray-800`}`}\n      />\n      <div className=\"flex-grow\">\n        {features.map((feature, index) => (\n          <div key={index} className=\"flex items-start mb-4 group\">\n            <div className=\"mr-3 mt-1 \">\n              <div\n                className={`w-5 h-5 rounded-full bg-blue-600 dark:bg-blue-500 flex items-center justify-center`}\n              >\n                <svg\n                  xmlns=\"http://www.w3.org/2000/svg\"\n                  className={`h-3 w-3 text-white dark:text-white`}\n                  viewBox=\"0 0 20 20\"\n                  fill=\"currentColor\"\n                >\n                  <path\n                    fillRule=\"evenodd\"\n                    d=\"M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z\"\n                    clipRule=\"evenodd\"\n                  />\n                </svg>\n              </div>\n            </div>\n            <div\n              className={`text-gray-500/80 dark:text-gray-300/80 ${highlighted ? 'text-zinc-500/80' : `$text-black/45 dark:text-gray-300`} `}\n            >\n              {feature}\n            </div>\n          </div>\n        ))}\n      </div>\n\n      <a href=\"https://rzp.io/rzp/FuM0wyrD\">\n        <Button className=\"w-full mt-3\">Get Started</Button>\n      </a>\n    </div>\n  );\n};\n\nexport {PricingCard};\n",
  },
  {
    id: 'Skeleton',
    element:
      "import {cn} from '@/lib/utils';\n\nexport interface SkeletonParams {\n  className?: string;\n}\nconst Skeleton = ({className}: SkeletonParams) => {\n  return (\n    <div\n      className={cn(\n        `dark:bg-gray-600 bg-gray-400 animate-pulse rounded-full ${className}`\n      )}\n    ></div>\n  );\n};\n\nexport {Skeleton};\n",
  },
  {
    id: 'Spinner',
    element:
      "import {cn} from '@/lib/utils';\nimport {useEffect, useState, FC} from 'react';\n\ntype SpinnerProps = {\n  className?: string;\n  variant?:\n    | 'bounce'\n    | 'circular'\n    | 'bars'\n    | 'grid'\n    | 'ripple'\n    | 'terminal'\n    | 'loader';\n  text?: string;\n};\n\nconst Spinner: FC<SpinnerProps> = ({\n  className = '',\n  variant = 'bounce',\n  text = 'Loading...',\n}) => {\n  // dots\n  if (variant === 'bounce') {\n    return (\n      <div\n        className={cn('flex space-x-2 justify-center items-center', className)}\n      >\n        <div className=\"h-3 w-3 dark:bg-light-primary bg-dark-primary rounded-full animate-bounce [animation-delay:-0.3s]\" />\n        <div className=\"h-3 w-3 dark:bg-light-primary bg-dark-primary rounded-full animate-bounce [animation-delay:-0.15s]\" />\n        <div className=\"h-3 w-3 dark:bg-light-primary bg-dark-primary rounded-full animate-bounce\" />\n      </div>\n    );\n  }\n\n  // circular\n  if (variant === 'circular') {\n    return (\n      <div className={cn('flex justify-center items-center', className)}>\n        <div className=\"loader-circle\" />\n      </div>\n    );\n  }\n\n  // bars\n  if (variant === 'bars') {\n    return (\n      <div\n        className={cn(\n          'flex space-x-1 justify-center items-center h-10',\n          className\n        )}\n      >\n        {[0, 0.2, 0.4, 0.6, 0.8].map((delay, idx) => (\n          <div\n            key={idx}\n            className=\"w-2 h-5 bg-dark-primary dark:bg-light-primary rounded animate-grow-shrink\"\n            style={{animationDelay: `${delay}s`}}\n          />\n        ))}\n      </div>\n    );\n  }\n\n  // ripple\n  if (variant === 'ripple') {\n    return (\n      <div\n        className={cn('relative flex justify-center items-center', className)}\n      >\n        <div className=\"absolute h-16 w-16 rounded-full border-4 border-dark-primary dark:border-light-primary animate-ping opacity-20\" />\n        <div className=\"absolute h-12 w-12 rounded-full border-4 border-dark-primary dark:border-light-primary animate-ping opacity-40 [animation-delay:0.3s]\" />\n        <div className=\"h-8 w-8 rounded-full border-4 border-dark-primary dark:border-light-primary\" />\n      </div>\n    );\n  }\n\n  // terminal\n  if (variant === 'terminal') {\n    const [displayText, setDisplayText] = useState('');\n    const [showCursor, setShowCursor] = useState(true);\n    const [textIndex, setTextIndex] = useState(0);\n\n    useEffect(() => {\n      if (textIndex < text.length) {\n        const timer = setTimeout(() => {\n          setDisplayText((prev) => prev + text[textIndex]);\n          setTextIndex((prev) => prev + 1);\n        }, 150);\n        return () => clearTimeout(timer);\n      } else {\n        const resetTimer = setTimeout(() => {\n          setDisplayText('');\n          setTextIndex(0);\n        }, 1000);\n        return () => clearTimeout(resetTimer);\n      }\n    }, [textIndex, text]);\n\n    useEffect(() => {\n      const blinkTimer = setInterval(() => {\n        setShowCursor((prev) => !prev);\n      }, 500);\n      return () => clearInterval(blinkTimer);\n    }, []);\n\n    return (\n      <div\n        className={cn(\n          'flex items-center justify-start bg-gray-900 text-green-500 p-4 font-mono rounded-md w-[270px]',\n          className\n        )}\n      >\n        <div className=\"flex flex-col w-full\">\n          <div className=\"flex mb-2 items-center\">\n            <span className=\"text-sm mr-auto text-gray-400\">Status</span>\n            <div className=\"ml-2 h-3 w-3 rounded-full bg-red-500\" />\n            <div className=\"ml-2 h-3 w-3 rounded-full bg-yellow-500\" />\n            <div className=\"ml-2 h-3 w-3 rounded-full bg-green-500\" />\n          </div>\n          <div className=\"h-22 w-full bg-black/50 p-2 rounded-md overflow-hidden text-sm flex items-center\">\n            {displayText}\n            {showCursor && (\n              <span className=\"inline-block w-[1px] h-5 bg-green-500 ml-1\" />\n            )}\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  // loader\n  if (variant === 'loader') {\n    return (\n      <div className={cn('flex items-center justify-center', className)}>\n        <div className=\"relative w-10 h-10\">\n          {Array.from({length: 12}).map((_, i) => (\n            <div\n              key={i}\n              className=\"absolute top-0 left-1/2 w-[2px] h-3 bg-dark-primary dark:bg-light-primary origin-center loader-line\"\n              style={{\n                transform: `rotate(${i * 30}deg) translateY(-20px)`,\n                opacity: (i + 1) / 12,\n                animation: 'fade 1.2s linear infinite',\n                animationDelay: `${(i * 0.1).toFixed(1)}s`,\n              }}\n            />\n          ))}\n        </div>\n      </div>\n    );\n  }\n\n  // fallback (dots)\n  return (\n    <div\n      className={cn('flex space-x-2 justify-center items-center', className)}\n    >\n      <div className=\"h-3 w-3 dark:bg-light-primary bg-dark-primary rounded-full animate-bounce [animation-delay:-0.3s]\" />\n      <div className=\"h-3 w-3 dark:bg-light-primary bg-dark-primary rounded-full animate-bounce [animation-delay:-0.15s]\" />\n      <div className=\"h-3 w-3 dark:bg-light-primary bg-dark-primary rounded-full animate-bounce\" />\n    </div>\n  );\n};\n\nexport {Spinner};\n",
  },
  {
    id: 'Switch',
    element:
      "import {useState} from 'react';\n\ninterface SwitchPropT {\n  defaultState?: boolean;\n}\n\nfunction Switch({defaultState = false}: SwitchPropT) {\n  const [state, setState] = useState<boolean>(defaultState);\n\n  return (\n    <div\n      role=\"switch\"\n      tabIndex={0}\n      onClick={() => setState(!state)}\n      className={`w-8 h-5 cursor-pointer bg-neutral-100 rounded-full relative`}\n    >\n      <div\n        className={`size-4 bg-black rounded-full absolute transition-all ease-in-out duration-300 top-1/2 ${\n          state ? 'translate-x-0.5' : 'translate-x-3.5'\n        } -translate-y-1/2`}\n      />\n    </div>\n  );\n}\n\nexport {Switch};\n",
  },
  {
    id: 'Tabs',
    element:
      "import React from 'react';\nimport {useState} from 'react';\nimport {cn} from '@/lib/utils';\nimport {ReactElement} from 'react';\n\ninterface TabContentParams {\n  value: string;\n  activeTab?: string;\n  content: any;\n}\ninterface TabParams {\n  title: string;\n  value: string;\n  activeTab?: string;\n  setActiveTab?: any;\n  className?: string;\n}\ninterface TabListParams {\n  children: ReactElement<TabParams> | ReactElement<TabParams>[];\n  activeTab?: any;\n  setActiveTab?: (value: string) => void;\n  className?: string;\n}\ninterface TabsParams {\n  children: ReactElement<TabListParams> | ReactElement<TabListParams>[];\n  defaultVal?: string;\n  className?: string;\n}\n\nconst Tabs = ({children, defaultVal = '', className = ''}: TabsParams) => {\n  const [activeTab, setActiveTab] = useState<string>(defaultVal);\n\n  return (\n    <>\n      <div\n        className={`  w-[90%] dark:text-white  text-black  ring-[0.5px] ring-neutral-200  dark:ring-neutral-700 rounded-md ${className}`}\n      >\n        {React.Children.map(children, (child) => {\n          return React.cloneElement(child, {\n            activeTab,\n            setActiveTab,\n          });\n        })}\n      </div>\n    </>\n  );\n};\n\nconst TabList = ({\n  children,\n  activeTab,\n  setActiveTab,\n  className = '',\n}: TabListParams) => {\n  return (\n    <div className={cn(`flex space-x-2   rounded-md`, className)}>\n      {React.Children.map(children, (child) =>\n        React.cloneElement(child, {activeTab, setActiveTab})\n      )}\n    </div>\n  );\n};\n\nconst Tab = ({\n  title = 'Here is the Title',\n  value,\n  activeTab = '',\n  setActiveTab,\n  className = '',\n}: TabParams) => {\n  const isActive = activeTab === value;\n  return (\n    <button\n      onClick={() => setActiveTab(value)}\n      className={cn(\n        ` px-6 py-2 rounded-md text-md font-medium cursor-pointer\n        ${isActive ? ' dark:text-white dark:bg-neutral-900 text-black bg-neutral-200 ' : ' text-gray-500 hover:text-black dark:text-gray-600 dark:hover:text-white'}\n      `,\n        className\n      )}\n    >\n      {title}\n    </button>\n  );\n};\n\nconst TabContent = ({value, activeTab, content}: TabContentParams) => {\n  if (activeTab === value)\n    return (\n      <div className=\" dark:text-white  text-black   rounded-md flex overflow-x-auto scrollable-content  mt-3\">\n        {content}\n      </div>\n    );\n};\n\nexport {Tabs, Tab, TabList, TabContent};\n",
  },
  {
    id: 'Testimonials',
    element:
      'import React from \'react\';\nimport {Star} from \'lucide-react\';\nimport {cn} from \'@/lib/utils\';\n\nexport interface TestimonialsProps {\n  imageSrc?: string;\n  name: string;\n  title: string;\n  rating?: number;\n  message: string;\n  className?: string;\n}\n\nconst Testimonials: React.FC<TestimonialsProps> = ({\n  imageSrc,\n  name,\n  title,\n  rating = 5,\n  message,\n  className,\n}) => {\n  return (\n    <div\n      className={cn(\n        `w-full max-w-sm sm:max-w-md md:max-w-lg m-4 flex flex-col gap-2 shadow-sm p-4 text-black grainy-light rounded-lg`,\n        className\n      )}\n    >\n      <div className="flex flex-col sm:flex-row items-start sm:items-center justify-between gap-2 sm:gap-4">\n        <div className="flex gap-2 justify-center items-center">\n          <img\n            src={imageSrc || \'https://avatar.iran.liara.run/public\'}\n            alt={name}\n            className="w-10 h-10 rounded-full object-cover"\n          />\n          <div className="flex flex-col items-start">\n            <div className="font-medium">{name}</div>\n            <div className="text-xs opacity-60">{title}</div>\n          </div>\n        </div>\n\n        <div className="flex gap-0.5">\n          {Array.from({length: 5}).map((_, index) => (\n            <Star\n              key={index}\n              className={`h-4 w-4 ${\n                index < rating\n                  ? \'text-yellow-400 fill-yellow-400\'\n                  : \'text-gray-300 fill-gray-300\'\n              }`}\n            />\n          ))}\n        </div>\n      </div>\n\n      <p className="text-base mt-2 overflow-y-auto scrollable-content">\n        {message}\n      </p>\n    </div>\n  );\n};\n\nexport {Testimonials};\n',
  },
  {
    id: 'TextArea',
    element:
      "import React from 'react';\nimport {cn} from '@/lib/utils';\n\nexport interface TextareaProps\n  extends React.TextareaHTMLAttributes<HTMLTextAreaElement> {}\n\nconst TextArea = React.forwardRef<HTMLTextAreaElement, TextareaProps>(\n  ({className, ...props}, ref) => {\n    return (\n      <textarea\n        ref={ref}\n        className={cn(\n          'flex min-h-[150px] w-[450px] rounded-xl px-4 py-2 dark:bg-zinc-800 bg-zinc-50 border border-gray-400 dark:border-zinc-700 text-base shadow-sm placeholder:text-gray-400 dark:placeholder:text-zinc-600 focus-visible:outline-none focus-visible:ring-[1.2px] focus-visible:border-none focus-visible:ring-neutral-500 dark:focus-visible:ring-zinc-500',\n          className\n        )}\n        {...props}\n      />\n    );\n  }\n);\n\nTextArea.displayName = 'TextArea';\n\nexport {TextArea};\n",
  },
  {
    id: 'Toast',
    element:
      "import {cn} from '@/lib/utils';\n\nexport interface ToastUiParams {\n  idx: number;\n  title: string;\n  hovered?: boolean;\n  options: {\n    containerClassName?: string;\n    titleClassName?: string;\n    desc?: string;\n    descClassName?: string;\n  };\n}\n\nfunction Toast({idx, title, options, hovered = false}: ToastUiParams) {\n  return (\n    <div\n      style={{\n        bottom: hovered ? 40 + idx * 80 : 40 + idx * 20,\n        zIndex: 10 + idx,\n        scale: hovered ? 1 : 1 + idx * 0.05,\n      }}\n      className={cn(\n        'fixed right-10 transition-all min-w-[300px]',\n        options.containerClassName\n      )}\n    >\n      <div className=\"rounded-lg border border-neutral-300 bg-neutral-100 dark:bg-neutral-950 dark:border-neutral-700 shadow-lg px-5 py-3\">\n        <div\n          className={cn(\n            'font-semibold text-neutral-900 dark:text-neutral-100 truncate text-sm',\n            options.titleClassName\n          )}\n        >\n          {title}\n        </div>\n        {options.desc ? (\n          <div\n            className={cn(\n              'font-medium text-neutral-700 text-xs dark:text-neutral-300 mt-0.5',\n              options.descClassName\n            )}\n          >\n            {options.desc}\n          </div>\n        ) : null}\n      </div>\n      <div className=\"h-3.5\" />\n    </div>\n  );\n}\n\nexport {Toast};\n",
  },
  {
    id: 'Tooltip',
    element:
      "import React, {useState} from 'react';\nimport {cn} from '@/lib/utils.js';\n\nexport interface TooltipParams {\n  title: string;\n  options?: {\n    delay?: number;\n    containerClassName?: string;\n    tooltipStyle?: React.CSSProperties;\n  };\n}\n\nconst Tooltip = ({\n  children,\n  title = '',\n  options = {\n    delay: 300,\n    containerClassName: '',\n    tooltipStyle: {},\n  },\n}: React.PropsWithChildren<TooltipParams>) => {\n  const [visible, setVisible] = useState(false);\n  let timeout: ReturnType<typeof setTimeout>;\n\n  const showTooltip = () => {\n    timeout = setTimeout(() => {\n      setVisible(true);\n    }, options.delay);\n  };\n  const hideTooltip = () => {\n    timeout = setTimeout(() => {\n      clearTimeout(timeout);\n      setVisible(false);\n    }, options.delay);\n  };\n\n  return (\n    <div\n      className={cn('relative inline-block mt-10', options?.containerClassName)}\n    >\n      {visible && (\n        <div\n          style={options?.tooltipStyle}\n          className={cn(\n            'absolute bottom-full truncate left-1/2 -translate-x-1/2 text-sm text-center w-28 h-8 font-heading font-medium  px-4 py-1 rounded-md  text-black bg-white shadow-lg transition-opacity duration-300 opacity-100',\n            options.containerClassName\n          )}\n        >\n          {title}\n        </div>\n      )}\n\n      <div\n        onMouseEnter={showTooltip}\n        onMouseLeave={hideTooltip}\n        aria-label={title}\n        className=\"px-2 py-1 rounded-sm\"\n      >\n        {children}\n      </div>\n    </div>\n  );\n};\n\nexport {Tooltip};\n",
  },
  {
    id: 'VideoPlayer',
    element:
      'import {cn} from \'@/lib/utils\';\nimport React, {\n  useCallback,\n  useEffect,\n  useRef,\n  useState,\n  MouseEvent,\n  useReducer,\n} from \'react\';\n\nexport interface VideoPlayerProps {\n  thumbnailUrl?: string;\n  muted?: boolean;\n  autoplay?: boolean;\n  loop?: boolean;\n  src: string;\n  srcType?: string;\n  defaultVolume?: number;\n  className?: string;\n}\n\nenum SpeedReducerActionKind {\n  INCREASE = \'INCREASE\',\n  DECREASE = \'DECREASE\',\n}\n\ninterface SpeedReducerActionT {\n  type: SpeedReducerActionKind;\n}\n\ninterface SpeedReducerStateT {\n  speed: number;\n}\n\nfunction speedReducer(\n  state: SpeedReducerStateT,\n  action: SpeedReducerActionT\n): SpeedReducerStateT {\n  const {type} = action;\n  switch (type) {\n    case SpeedReducerActionKind.INCREASE:\n      return {\n        ...state,\n        speed: state.speed + 1,\n      };\n    case SpeedReducerActionKind.DECREASE:\n      return {\n        ...state,\n        speed: state.speed >= 0 ? state.speed - 1 : state.speed,\n      };\n    default:\n      return state;\n  }\n}\n\nfunction VideoPlayer({\n  src,\n  thumbnailUrl,\n  muted = false,\n  autoplay = false,\n  loop = false,\n  srcType,\n  defaultVolume = 20,\n  className = \'\',\n}: VideoPlayerProps) {\n  const videoRef = useRef<HTMLVideoElement | null>(null);\n  const progressRef = useRef<HTMLDivElement | null>(null);\n  const containerRef = useRef<HTMLDivElement | null>(null);\n\n  const [played, setPlayed] = useState(false);\n  const [playing, setPlaying] = useState(false);\n  const [fullScreenMode, setFullScreenMode] = useState(false);\n  const [isMuted, setIsMuted] = useState(muted);\n\n  const [currentTime, setCurrentTime] = useState(0);\n  const [videoDuration, setVideoDuration] = useState(0);\n\n  const [volumeRange, setVolumeRange] = useState(defaultVolume);\n\n  const [volumeBtnHovered, setVolumeBtnHovered] = useState(false);\n  const [settingsBtnHovered, setSettingsBtnHovered] = useState(false);\n\n  const [state, dispatch] = useReducer(speedReducer, {speed: 1});\n\n  const handleTooglePlaying = useCallback(() => {\n    setPlayed(true);\n    if (videoRef.current) {\n      if (!playing) videoRef.current.play();\n      else videoRef.current.pause();\n    }\n  }, [playing, videoRef.current]);\n\n  useEffect(() => {\n    let timeout: NodeJS.Timeout;\n    if (autoplay && !played) timeout = setTimeout(handleTooglePlaying, 0);\n\n    return () => {\n      if (timeout) clearTimeout(timeout);\n    };\n  }, [autoplay, videoRef.current, played]);\n\n  useEffect(() => {\n    const controller = new AbortController();\n\n    if (videoRef.current) {\n      videoRef.current.addEventListener(\'play\', () => setPlaying(true), {\n        signal: controller.signal,\n      });\n\n      videoRef.current.addEventListener(\'pause\', () => setPlaying(false), {\n        signal: controller.signal,\n      });\n\n      videoRef.current.addEventListener(\n        \'fullscreenchange\',\n        () => setFullScreenMode(!fullScreenMode),\n        {signal: controller.signal}\n      );\n\n      videoRef.current.addEventListener(\n        \'contextmenu\',\n        (evt) => evt.preventDefault(),\n        {signal: controller.signal}\n      );\n\n      videoRef.current.addEventListener(\n        \'timeupdate\',\n        () => {\n          if (videoRef.current) {\n            setCurrentTime(videoRef.current.currentTime);\n            setVideoDuration(videoRef.current.duration);\n          }\n        },\n        {signal: controller.signal}\n      );\n    }\n\n    return () => {\n      controller.abort();\n    };\n  }, [fullScreenMode, videoRef.current]);\n\n  const handleCurrentTimeChangeClick = useCallback(\n    (evt: MouseEvent<HTMLDivElement>) => {\n      const box = progressRef.current?.getBoundingClientRect();\n      if (videoRef.current && box) {\n        const time =\n          (((evt.clientX - box.x) / box.width) * 100 * videoDuration) / 100;\n        videoRef.current.currentTime = time;\n      }\n    },\n    [videoDuration, videoRef.current, progressRef]\n  );\n\n  const handleToogleFullScreenMode = useCallback(() => {\n    if (containerRef.current) {\n      if (!fullScreenMode) {\n        containerRef.current.requestFullscreen();\n      } else {\n        document.exitFullscreen();\n      }\n      setFullScreenMode(!fullScreenMode);\n    }\n  }, [fullScreenMode, containerRef, setFullScreenMode]);\n\n  React.useEffect(() => {\n    if (videoRef.current) videoRef.current.volume = volumeRange / 100;\n  }, [volumeRange]);\n\n  useEffect(() => {\n    if (videoRef.current) videoRef.current.playbackRate = state.speed;\n  }, [state.speed]);\n\n  return (\n    <div\n      ref={containerRef}\n      style={{\n        width: 741,\n        height: 416,\n      }}\n      className={cn(\n        \'relative group shadow-xl rounded overflow-hidden\',\n        className\n      )}\n      data-played={played}\n    >\n      <style>\n        {`\n            .parent-volume:hover .child-volume {\n              opacity: 1;\n              height: 20px;\n            }\n            .parent-progress:hover .child-progress {\n              height: 8px;\n            }\n          `}\n      </style>\n      <video\n        preload="true"\n        ref={videoRef}\n        hidden={!played}\n        muted={isMuted}\n        loop={loop}\n        autoPlay={autoplay}\n        className="w-full h-full"\n      >\n        <source src={src} type={srcType ?? \'video/mp4\'} />\n      </video>\n      {thumbnailUrl ? (\n        <img\n          hidden={played}\n          className="w-full h-full object-cover"\n          src={thumbnailUrl || \'https://picsum.photos/seed/picsum/1482/812\'}\n          alt="Video thumbnail"\n        />\n      ) : null}\n      <div onClick={handleTooglePlaying} className="z-2 absolute inset-0" />\n\n      {/* Controls */}\n      <div\n        style={{\n          opacity: !played ? 1 : undefined,\n        }}\n        data-type="controlls"\n        className="absolute bottom-2 right-2 left-2 z-10 h-8 flex items-center gap-x-2 group-hover:opacity-100 duration-300 transition-opacity opacity-0 ease-in-out"\n      >\n        {/* Play / Pause */}\n        <button\n          onClick={handleTooglePlaying}\n          className="px-4 py-1 bg-black/90 rounded cursor-pointer hover:fill-black/90 fill-neutral-100 hover:bg-white/90"\n        >\n          {playing ? (\n            <svg className="size-6">\n              <path\n                fillRule="evenodd"\n                clipRule="evenodd"\n                d="M8 4a2 2 0 00-2 2v12a2 2 0 104 0V6a2 2 0 00-2-2zm8 0a2 2 0 00-2 2v12a2 2 0 104 0V6a2 2 0 00-2-2z"\n              />\n            </svg>\n          ) : (\n            <svg viewBox="0 0 24 24" className="size-6">\n              <path d="M19 12a1 1 0 01-.496.864l-12 7A1 1 0 015 19V5a1 1 0 011.504-.864l12 7A1 1 0 0119 12z" />\n            </svg>\n          )}\n        </button>\n\n        {/* Progress Bar */}\n        <div className="w-full bg-black/90 h-full px-1 rounded flex gap-x-0.5 items-center">\n          <div className="px-2 w-full">\n            <div\n              onClick={handleCurrentTimeChangeClick}\n              ref={progressRef}\n              className="w-full h-full parent-progress flex items-center cursor-pointer"\n            >\n              <div className="w-full h-1 bg-neutral-800 overflow-hidden child-progress rounded-md transition-all">\n                <div\n                  style={{\n                    width:\n                      currentTime === 0\n                        ? \'0%\'\n                        : `${(currentTime / videoDuration) * 100}%`,\n                  }}\n                  className="bg-neutral-100 rounded-md h-full"\n                />\n              </div>\n            </div>\n          </div>\n\n          {/* Volume */}\n          <div\n            onMouseEnter={() => setVolumeBtnHovered(true)}\n            onMouseLeave={() => setVolumeBtnHovered(false)}\n            className="px-1 py-1 cursor-pointer relative flex items-center"\n          >\n            <div\n              style={{\n                opacity: volumeBtnHovered ? 1 : 0,\n              }}\n              className="absolute transition-opacity opacity-0 -top-24 left-0 z-30 right-0 flex"\n            >\n              <div className="h-full w-full bg-black/90 flex flex-col items-center justify-center relative rounded-md py-3">\n                <input\n                  value={volumeRange}\n                  onChange={(e) => {\n                    if (+e.target.value > 0 && !isMuted) setIsMuted(false);\n                    setVolumeRange(+e.target.value);\n                  }}\n                  min={1}\n                  max={100}\n                  type="range"\n                  className="h-16 rounded-md slider"\n                  style={{\n                    writingMode: \'sideways-lr\',\n                    appearance: \'none\',\n                    background: `linear-gradient(to top, #f5f5f5 0%, #f5f5f5 ${volumeRange}%, #a1a1a1 ${volumeRange}%, #a1a1a1 100%)`,\n                    width: \'4px\',\n                  }}\n                />\n              </div>\n            </div>\n            <button\n              onClick={() =>\n                volumeRange == 0 ? setVolumeRange(20) : setVolumeRange(0)\n              }\n              className="cursor-pointer my-auto"\n            >\n              {volumeRange > 0 ? (\n                <svg\n                  viewBox="0 0 24 24"\n                  className="size-5 fill-neutral-100 dark:fill-neutral-100"\n                >\n                  <path\n                    fillRule="evenodd"\n                    clipRule="evenodd"\n                    d="M20 12c0 3.728-2.55 6.86-6 7.748V21.8c4.564-.927 8-4.962 8-9.8 0-4.838-3.436-8.873-8-9.8v2.052c3.45.888 6 4.02 6 7.748zm-2 0a6.002 6.002 0 00-4-5.659v2.194c1.196.692 2 1.984 2 3.465 0 1.48-.804 2.773-2 3.465v2.194c2.33-.824 4-3.047 4-5.659zM6.586 8.004H4a2 2 0 00-2 2v4a2 2 0 002 2h2.586l3.707 4.707c.63.63 1.707.184 1.707-.707v-16c0-.89-1.077-1.337-1.707-.707L6.586 8.004z"\n                  />\n                </svg>\n              ) : (\n                <svg\n                  viewBox="0 0 24 24"\n                  className="size-5 fill-neutral-100 dark:fill-neutral-100"\n                >\n                  <path\n                    fillRule="evenodd"\n                    clipRule="evenodd"\n                    d="M14 2.20001C15.1263 2.42863 16.1838 2.84654 17.1379 3.41908L15.5513 4.82943C15.0606 4.58595 14.5414 4.39136 14 4.25201V2.20001ZM21.1249 7.90287L19.5378 9.31361C19.8371 10.1532 20 11.0576 20 12C20 15.7277 17.4505 18.8599 14 19.7479V21.7999C18.5645 20.8734 22 16.8379 22 12C22 10.5401 21.6872 9.15325 21.1249 7.90287ZM12 4.00396V7.98614L3.17811 15.8278C2.48346 15.5143 2 14.8156 2 14.004V10.004C2 8.89939 2.89543 8.00396 4 8.00396H6.58579L10.2929 3.29685C10.9229 2.66689 12 3.11305 12 4.00396ZM12 10.662L5.99037 16.004L2.33565 19.2526C1.92286 19.6195 1.88568 20.2516 2.2526 20.6644C2.61952 21.0772 3.25159 21.1143 3.66437 20.7474L21.6644 4.74742C22.0772 4.3805 22.1143 3.74843 21.7474 3.33565C21.3805 2.92286 20.7484 2.88568 20.3356 3.2526L12 10.662ZM10.2929 20.7111L8.81985 18.8407L12 16.0139V20.004C12 20.8949 10.9229 21.341 10.2929 20.7111ZM14 15.4648C15.0633 14.8498 15.8172 13.7593 15.971 12.4841L17.8778 10.7892C17.9579 11.1803 18 11.5852 18 12C18 14.6124 16.3304 16.8349 14 17.6586V15.4648Z"\n                  ></path>\n                </svg>\n              )}\n            </button>\n          </div>\n\n          {/* Captions */}\n          <div className="px-1 py-1 cursor-pointer" data-ctrltype="captions">\n            <button\n              onClick={() =>\n                volumeRange == 0 ? setVolumeRange(20) : setVolumeRange(0)\n              }\n              className="flex items-center justify-center cursor-pointer"\n            >\n              <svg\n                viewBox="0 0 24 24"\n                className="fill-neutral-100 size-5 dark:fill-neutral-100"\n              >\n                <path\n                  fillRule="evenodd"\n                  clipRule="evenodd"\n                  d="M20 6H4v12h16V6zM4 4a2 2 0 00-2 2v12a2 2 0 002 2h16a2 2 0 002-2V6a2 2 0 00-2-2H4zm7.486 8.824c-.112.697-.4 1.273-.855 1.714-.463.445-1.062.671-1.778.671-.882 0-1.588-.303-2.097-.903C6.254 13.713 6 12.897 6 11.878c0-1.102.288-1.966.856-2.571C7.36 8.772 8.01 8.5 8.784 8.5c1.03 0 1.799.365 2.284 1.085.263.4.407.81.428 1.216l.01.18H9.967l-.035-.127c-.07-.27-.16-.471-.265-.6-.186-.226-.457-.335-.834-.335-.374 0-.663.158-.883.484-.23.343-.348.845-.348 1.494 0 .643.121 1.126.36 1.433.232.3.517.445.87.445.364 0 .632-.12.82-.371.107-.138.198-.357.272-.647l.031-.128H11.517l-.031.195zm5.628 1.714c.455-.44.743-1.017.854-1.714l.032-.195h-1.56l-.032.128c-.074.29-.165.509-.273.647-.187.25-.456.37-.82.37-.352 0-.636-.145-.868-.444-.239-.307-.361-.79-.361-1.433 0-.649.117-1.15.35-1.494.217-.326.507-.484.881-.484.376 0 .649.11.833.335.106.129.196.33.267.6l.033.126h1.538l-.008-.179c-.023-.407-.166-.816-.43-1.216-.485-.72-1.252-1.085-2.283-1.085-.776 0-1.424.272-1.928.807-.568.605-.856 1.47-.856 2.57 0 1.02.254 1.836.755 2.43.51.599 1.215.902 2.098.902.716 0 1.314-.226 1.778-.671z"\n                />\n              </svg>\n            </button>\n          </div>\n\n          {/* Settings */}\n          <div\n            onMouseEnter={() => setSettingsBtnHovered(true)}\n            onMouseLeave={() => setSettingsBtnHovered(false)}\n            className="px-1 py-1 cursor-pointer relative parent-settings"\n          >\n            <div\n              style={{\n                opacity: settingsBtnHovered ? 1 : 0,\n              }}\n              className="absolute transition-opacity opacity-0 bottom-9 w-20 h-8 z-20 -right-7 flex"\n            >\n              <div className="h-full w-full bg-black/90 gap-x-2 flex text-xs items-center px-2 justify-center relative rounded-md py-3">\n                <button\n                  onClick={() =>\n                    dispatch({type: SpeedReducerActionKind.DECREASE})\n                  }\n                  className="cursor-pointer hover:bg-neutral-600 py-2 px-2 rounded-md"\n                >\n                  <svg className="size-2 -rotate-90" viewBox="0 -4.5 24 24">\n                    <path\n                      d="M23.345 11.39L13.615.6a2.087 2.087 0 00-1.631-.61 2.085 2.085 0 00-1.63.61L.624 11.39a2.136 2.136 0 000 3.01c.828.83 2.169.83 2.997 0l8.363-9.27 8.365 9.27c.827.83 2.169.83 2.996 0s.827-2.18 0-3.01"\n                      fill="#fff"\n                      fillRule="evenodd"\n                    />\n                  </svg>\n                </button>\n                <div>{state.speed}x</div>\n                <button\n                  onClick={() =>\n                    dispatch({type: SpeedReducerActionKind.INCREASE})\n                  }\n                  className="cursor-pointer hover:bg-neutral-600 py-2 px-2 rounded-md"\n                >\n                  <svg className="size-2 rotate-90" viewBox="0 -4.5 24 24">\n                    <path\n                      d="M23.345 11.39L13.615.6a2.087 2.087 0 00-1.631-.61 2.085 2.085 0 00-1.63.61L.624 11.39a2.136 2.136 0 000 3.01c.828.83 2.169.83 2.997 0l8.363-9.27 8.365 9.27c.827.83 2.169.83 2.996 0s.827-2.18 0-3.01"\n                      fill="#fff"\n                      fillRule="evenodd"\n                    />\n                  </svg>\n                </button>\n              </div>\n            </div>\n            <svg className="fill-neutral-100 size-5 dark:fill-neutral-100">\n              <path\n                clipRule="evenodd"\n                d="M9.167 1.667c-.92 0-1.667.746-1.667 1.667v1.394a5.828 5.828 0 00-.815.472L5.47 4.498a1.666 1.666 0 00-2.27.612l-.835 1.447a1.664 1.664 0 00.605 2.271l1.215.702a5.912 5.912 0 000 .94l-1.215.702a1.664 1.664 0 00-.605 2.272L3.2 14.89a1.666 1.666 0 002.27.613l1.215-.702c.257.178.53.336.815.471v1.395c0 .92.746 1.667 1.667 1.667h1.666c.92 0 1.667-.747 1.667-1.667v-1.395c.285-.135.557-.293.815-.471l1.215.702c.788.455 1.81.184 2.269-.613l.835-1.446a1.664 1.664 0 00-.604-2.272l-1.215-.701a5.907 5.907 0 000-.941l1.215-.702a1.664 1.664 0 00.604-2.271L16.8 5.11a1.666 1.666 0 00-2.27-.612l-1.214.702a5.824 5.824 0 00-.815-.472V3.334c0-.92-.746-1.667-1.667-1.667H9.167zM12.5 10a2.5 2.5 0 11-5 0 2.5 2.5 0 015 0z"\n              />\n            </svg>\n          </div>\n\n          {/* Fullscreen */}\n          <button\n            onClick={handleToogleFullScreenMode}\n            className="px-1 py-1 cursor-pointer"\n            data-ctrltype="fullscreen"\n          >\n            <svg\n              viewBox="0 0 512 512"\n              xmlSpace="preserve"\n              className="size-4 fill-neutral-100 dark:fill-neutral-100"\n            >\n              <path d="M345.495 0l49.012 49.023-106.584 106.584 68.461 68.479 106.603-106.593 49.004 49.022V0zM155.615 287.914L49.022 394.507.009 345.494V512h166.506l-49.022-49.022 106.594-106.603zM356.384 287.914l-68.461 68.461 106.584 106.603L345.495 512h166.496V345.485l-49.014 49.022zM166.505 0H.009v166.506l49.013-49.013 106.593 106.593 68.472-68.479L117.501 49.023z" />{\' \'}\n              {/* trimmed for brevity */}\n            </svg>\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport {VideoPlayer};\n',
  },
];
