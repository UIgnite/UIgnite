export default [
  {
    id: 'Accordion',
    element:
      'import React from "react";\r\nimport { useState } from "react";\r\nimport { cn } from "../utils/lib";\r\n\r\nconst Accordion = ({\r\n  title,\r\n  content,\r\n  className = "",\r\n  defaultOpen = false,\r\n  open = false,\r\n  isOpen = null,\r\n  onToggle,\r\n}) => {\r\n  const [visible, setVisible] = useState(defaultOpen);\r\n  const toggleAccordion = () => {\r\n    setVisible(!visible);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div>\r\n        <div\r\n          onClick={onToggle ?? toggleAccordion}\r\n          className={cn(\r\n            "cursor-pointer bg-gray-800  hover:bg-gray-900 flex  items-center justify-between min-w-2xs  min-h-md ease-in-out",\r\n          )}\r\n        >\r\n          <div className="ml-2 px-2 py-2 text-white"> {title} </div>\r\n          <svg\r\n            className={`mr-2 transform transition-transform duration-300 \r\n          ${(isOpen ?? visible) ? "rotate-180" : "rotate-0"}`}\r\n            width="20"\r\n            height="15"\r\n            viewBox="0 0 24 24"\r\n            fill="none"\r\n          >\r\n            <path\r\n              d="M6 9l6 6 6-6"\r\n              stroke="#fff"\r\n              strokeWidth={2}\r\n              strokeLinecap="round"\r\n              strokeLinejoin="round"\r\n            />\r\n          </svg>\r\n        </div>\r\n        <div\r\n          className={` overflow-hidden transition-all duration-300 ease-in-out hover:bg-gray-800 \r\n        ${(isOpen ?? visible) ? "max-h-40 opacity-100 translate-y-0" : "max-h-0 opacity-0 -translate-y-5"}`}\r\n        >\r\n          <div className="bg-gray-800 text-left -z-1 px-4 py-1 text-sm text-white">\r\n            {content}\r\n          </div>\r\n        </div>\r\n\r\n        <hr className="w-m h-px  bg-gray-500 border-0 " />\r\n        {/* <div className=\'flex h-14 items-center justify-between border-b border-zinc-200 \' > </div> */}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nconst AccordionWrapper = ({ children }) => {\r\n  const [activeIndex, setActiveIndex] = useState(null);\r\n  return (\r\n    <>\r\n      <div>\r\n        {React.Children.map(children, (child, index) =>\r\n          React.cloneElement(child, {\r\n            isOpen: activeIndex === index,\r\n            onToggle: () =>\r\n              setActiveIndex(activeIndex === index ? null : index),\r\n          }),\r\n        )}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport { AccordionWrapper, Accordion };\r\n',
  },
  {
    id: 'Avatar',
    element:
      'import React from "react";\r\nimport { cn } from "../utils/lib";\r\n\r\nconst Avatar = ({ url, alt, className = "", ...props }) => {\r\n  return (\r\n    <div className="flex gap-4 mt-2">\r\n      <img\r\n        className={cn(`rounded-full h-12 w-12 object-cover`, className)}\r\n        src={url}\r\n        alt={alt}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Avatar;\r\n',
  },
  {
    id: 'Button',
    element:
      'import React, { useState, useEffect } from "react";\r\nimport { cn } from "../utils/lib";\r\nimport { cva } from "class-variance-authority";\r\nimport { Spinner } from "./Spinner";\r\n\r\nexport const Button = React.forwardRef(\r\n  (\r\n    {\r\n      children,\r\n      size,\r\n      className = "",\r\n      isLoading,\r\n      icon,\r\n      variant,\r\n      fullWidth,\r\n      animatedBorder = false,\r\n      gradientBorder = false,\r\n      responsiveSize,\r\n      ...props\r\n    },\r\n    ref,\r\n  ) => {\r\n    const [animationPosition, setAnimationPosition] = useState({ x: 0, y: 0 });\r\n\r\n    useEffect(() => {\r\n      if (!animatedBorder) return;\r\n\r\n      const interval = setInterval(() => {\r\n        setAnimationPosition((prev) => ({\r\n          x: (prev.x + 1) % 100,\r\n          y: (prev.y + 1) % 100,\r\n        }));\r\n      }, 50);\r\n\r\n      return () => clearInterval(interval);\r\n    }, [animatedBorder]);\r\n\r\n    const buttonVariants = cva(\r\n      "inline-flex text-4xl items-center cursor-pointer justify-center whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 relative",\r\n      {\r\n        variants: {\r\n          variant: {\r\n            primary: "bg-[#305CDE] text-white hover:bg-blue-600",\r\n            destructive: "bg-red-500 text-white hover:bg-red-600",\r\n            success: "bg-[#00b306] text-white hover:bg-green-600",\r\n            warning: "bg-[#ff8a00] text-white hover:bg-yellow-600",\r\n            outline: "border border-gray-500 bg-transparent hover:bg-gray-700",\r\n            secondary: "bg-rose-500 text-white hover:bg-gray-600",\r\n            ghost:\r\n              "dark:hover:bg-gray-700 dark:text-white text-gray-700 hover:bg-gray-800 hover:text-gray-100",\r\n            glass:\r\n              "dark:bg-white/10 backdrop-blur-md border border-black/10 dark:border-white/20 dark:text-white dark:hover:bg-white/20 hover:bg-white/60",\r\n            gradient:\r\n              "bg-gradient-to-r from-[#d60db8] to-[#1919e0] text-white hover:from-blue-600 hover:to-purple-700",\r\n            dark: "bg-black text-white hover:bg-black/70",\r\n            light: "bg-gray-50 text-black hover:bg-gray-100",\r\n            movingBorder: "text-white bg-black border-none",\r\n          },\r\n          size: {\r\n            default: "h-10 px-4 py-2 min-w-[90px]",\r\n            sm: "h-9 rounded-md px-3 min-w-[80px]",\r\n            lg: "h-11 rounded-md px-8 min-w-[110px]",\r\n            xl: "h-12 rounded-md px-10 min-w-[130px] text-base",\r\n            icon: "h-10 w-10 min-w-[40px]",\r\n          },\r\n          fullWidth: {\r\n            true: "w-full",\r\n            false: "",\r\n          },\r\n          responsiveSize: {\r\n            auto: "md:text-base text-xs md:h-10 h-8 md:px-4 px-2",\r\n            compact:\r\n              "lg:h-10 md:h-9 h-8 lg:px-4 md:px-3 px-2 lg:text-sm text-xs",\r\n            expand: "lg:h-12 md:h-11 h-10 lg:px-8 md:px-6 px-4",\r\n          },\r\n        },\r\n        defaultVariants: {\r\n          variant: "default",\r\n          size: "default",\r\n          fullWidth: false,\r\n          responsiveSize: null,\r\n        },\r\n      },\r\n    );\r\n\r\n    const getBorderStyle = () => {\r\n      if (animatedBorder) {\r\n        return {\r\n          backgroundImage: `linear-gradient(90deg, #00f0ff, #00ff6a, #ff00e6, #0096ff)`,\r\n          backgroundSize: "300% 300%",\r\n          backgroundPosition: `${animationPosition.x}% ${animationPosition.y}%`,\r\n          padding: "2px",\r\n          borderRadius: "0.375rem",\r\n          animation: "5s ease infinite",\r\n        };\r\n      }\r\n      if (gradientBorder) {\r\n        return {\r\n          backgroundImage:\r\n            "linear-gradient(to right, #4f46e5, #9333ea, #e11d48)",\r\n          padding: "2px",\r\n          borderRadius: "0.375rem",\r\n        };\r\n      }\r\n      return null;\r\n    };\r\n\r\n    const buttonContent = (\r\n      <>\r\n        {isLoading ? (\r\n          <Spinner className={cn(children ? "mr-2" : "")} />\r\n        ) : icon ? (\r\n          <span className={cn(children ? "mr-2" : "")}>{icon}</span>\r\n        ) : null}\r\n        {children}\r\n      </>\r\n    );\r\n\r\n    const renderButton = () => (\r\n      <button\r\n        {...props}\r\n        ref={ref}\r\n        className={cn(\r\n          buttonVariants({\r\n            variant: animatedBorder || gradientBorder ? "dark" : variant,\r\n            size,\r\n            fullWidth,\r\n            responsiveSize,\r\n            className: cn(\r\n              (animatedBorder || gradientBorder) &&\r\n                "w-full m-0 rounded-[calc(0.375rem-1px)]",\r\n              className,\r\n            ),\r\n          }),\r\n        )}\r\n      >\r\n        {buttonContent}\r\n      </button>\r\n    );\r\n\r\n    const borderStyle = getBorderStyle();\r\n\r\n    return borderStyle ? (\r\n      <div\r\n        className={cn("inline-flex", fullWidth && "w-full")}\r\n        style={borderStyle}\r\n      >\r\n        {renderButton()}\r\n      </div>\r\n    ) : (\r\n      renderButton()\r\n    );\r\n  },\r\n);\r\n\r\nButton.displayName = "Button";\r\n',
  },
  {
    id: 'DatePicker',
    element:
      'import React, { useState, useRef, useEffect } from "react";\r\nimport { Calendar, ChevronLeft, ChevronRight } from "lucide-react";\r\nimport { cn } from "../utils/lib";\r\n\r\nfunction DatePicker({\r\n  className,\r\n  onChange,\r\n  value,\r\n  placeholder = "Select date...",\r\n  darkMode = false,\r\n}) {\r\n  const [isOpen, setIsOpen] = useState(false);\r\n  const [currentMonth, setCurrentMonth] = useState(\r\n    value ? new Date(value) : new Date(),\r\n  );\r\n  const [showYears, setShowYears] = useState(false);\r\n\r\n  // Reference if outside clicks\r\n  const calendarRef = useRef(null);\r\n  const inputRef = useRef(null);\r\n\r\n  // clicks outside the datepicker to close it\r\n  useEffect(() => {\r\n    function closeOnOutsideClick(e) {\r\n      if (\r\n        isOpen &&\r\n        calendarRef.current &&\r\n        !calendarRef.current.contains(e.target) &&\r\n        !inputRef.current.contains(e.target)\r\n      ) {\r\n        setIsOpen(false);\r\n        setShowYears(false);\r\n      }\r\n    }\r\n\r\n    document.addEventListener("mousedown", closeOnOutsideClick);\r\n    return () => document.removeEventListener("mousedown", closeOnOutsideClick);\r\n  }, [isOpen]);\r\n\r\n  // to previous month\r\n  function prevMonth() {\r\n    setCurrentMonth((prev) => {\r\n      let newDate = new Date(prev);\r\n      newDate.setMonth(newDate.getMonth() - 1);\r\n      return newDate;\r\n    });\r\n  }\r\n\r\n  // to next month\r\n  function nextMonth() {\r\n    setCurrentMonth((prev) => {\r\n      let newDate = new Date(prev);\r\n      newDate.setMonth(newDate.getMonth() + 1);\r\n      return newDate;\r\n    });\r\n  }\r\n\r\n  // Selecting a specific year\r\n  function pickYear(year) {\r\n    setCurrentMonth((prev) => {\r\n      let newDate = new Date(prev);\r\n      newDate.setFullYear(year);\r\n      return newDate;\r\n    });\r\n    setShowYears(false);\r\n  }\r\n\r\n  // Selecting a specific date\r\n  function selectDate(date) {\r\n    onChange(date);\r\n    setIsOpen(false);\r\n  }\r\n\r\n  // current month and year\r\n  const monthAndYear = currentMonth.toLocaleString("en-US", {\r\n    month: "long",\r\n    year: "numeric",\r\n  });\r\n\r\n  // days in current month\r\n  function getDaysInMonth(year, month) {\r\n    return new Date(year, month + 1, 0).getDate();\r\n  }\r\n\r\n  function getFirstDay(year, month) {\r\n    return new Date(year, month, 1).getDay();\r\n  }\r\n\r\n  // calendar grid\r\n  function renderCalendar() {\r\n    const year = currentMonth.getFullYear();\r\n    const month = currentMonth.getMonth();\r\n    const daysCount = getDaysInMonth(year, month);\r\n    const firstDay = getFirstDay(year, month);\r\n\r\n    let days = [];\r\n\r\n    for (let i = 0; i < firstDay; i++) {\r\n      days.push(<div key={`empty-${i}`} className="h-8"></div>);\r\n    }\r\n\r\n    // Calendar days\r\n    for (let day = 1; day <= daysCount; day++) {\r\n      const date = new Date(year, month, day);\r\n\r\n      // if this date is selected\r\n      const isSelected =\r\n        value &&\r\n        value.getDate() === day &&\r\n        value.getMonth() === month &&\r\n        value.getFullYear() === year;\r\n\r\n      // if this date is today\r\n      const today = new Date();\r\n      const isToday =\r\n        today.getDate() === day &&\r\n        today.getMonth() === month &&\r\n        today.getFullYear() === year;\r\n\r\n      days.push(\r\n        <button\r\n          key={day}\r\n          onClick={() => selectDate(date)}\r\n          className={cn(\r\n            "h-8 w-8 rounded-full flex items-center justify-center text-sm",\r\n            isSelected\r\n              ? darkMode\r\n                ? "bg-blue-600 text-white"\r\n                : "bg-blue-500 text-white"\r\n              : isToday\r\n                ? darkMode\r\n                  ? "border border-blue-400 text-gray-200"\r\n                  : "border border-blue-300 text-gray-800"\r\n                : darkMode\r\n                  ? "text-gray-200 hover:bg-gray-700"\r\n                  : "text-gray-800 hover:bg-gray-100",\r\n          )}\r\n        >\r\n          {day}\r\n        </button>,\r\n      );\r\n    }\r\n\r\n    return days;\r\n  }\r\n\r\n  // year options\r\n  const currentYear = new Date().getFullYear();\r\n  const yearOptions = [];\r\n  for (let i = currentYear - 10; i <= currentYear + 10; i++) {\r\n    yearOptions.push(i);\r\n  }\r\n\r\n  return (\r\n    <div className={cn("relative", className)}>\r\n      {/* Date input field */}\r\n      <div\r\n        ref={inputRef}\r\n        className={cn(\r\n          "border rounded p-2 flex items-center justify-between cursor-pointer",\r\n          darkMode\r\n            ? "bg-gray-800 text-gray-200 border-gray-700"\r\n            : "bg-white text-gray-800 border-gray-300",\r\n        )}\r\n        onClick={() => setIsOpen(!isOpen)}\r\n      >\r\n        <span>{value ? value.toLocaleDateString() : placeholder}</span>\r\n        <Calendar size={18} className="text-gray-400" />\r\n      </div>\r\n\r\n      {/* Calendar dropdown */}\r\n      {isOpen && (\r\n        <div\r\n          ref={calendarRef}\r\n          className={cn(\r\n            "absolute mt-1 border rounded shadow-md p-3 z-10 w-64",\r\n            darkMode\r\n              ? "bg-gray-800 border-gray-700 text-gray-200"\r\n              : "bg-white border-gray-200 text-gray-800",\r\n          )}\r\n        >\r\n          {/* Header with month/year and navigation */}\r\n          <div className="flex items-center justify-between mb-2">\r\n            <button\r\n              onClick={prevMonth}\r\n              className="p-1 rounded-full hover:bg-gray-100 dark:hover:bg-gray-700"\r\n            >\r\n              <ChevronLeft size={18} />\r\n            </button>\r\n\r\n            <div className="relative">\r\n              <button\r\n                className="font-medium"\r\n                onClick={() => setShowYears(!showYears)}\r\n              >\r\n                {monthAndYear}\r\n              </button>\r\n\r\n              {/* Year selector */}\r\n              {showYears && (\r\n                <div\r\n                  className={cn(\r\n                    "absolute top-full mt-1 border rounded shadow max-h-40 overflow-y-auto  w-32 z-20 scrollbar-hide",\r\n                    darkMode\r\n                      ? "bg-gray-800 border-gray-700"\r\n                      : "bg-white border-gray-200",\r\n                  )}\r\n                >\r\n                  {yearOptions.map((year) => (\r\n                    <button\r\n                      key={year}\r\n                      className={cn(\r\n                        "block w-full text-left px-2 py-1",\r\n                        currentMonth.getFullYear() === year\r\n                          ? "bg-blue-100 dark:bg-blue-900"\r\n                          : "hover:bg-gray-100 dark:hover:bg-gray-700",\r\n                      )}\r\n                      onClick={() => pickYear(year)}\r\n                    >\r\n                      {year}\r\n                    </button>\r\n                  ))}\r\n                </div>\r\n              )}\r\n            </div>\r\n\r\n            <button\r\n              onClick={nextMonth}\r\n              className="p-1 rounded-full hover:bg-gray-100 dark:hover:bg-gray-700"\r\n            >\r\n              <ChevronRight size={18} />\r\n            </button>\r\n          </div>\r\n\r\n          {/* Weekday headers */}\r\n          <div className="grid grid-cols-7 gap-1 mb-1">\r\n            {["Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"].map((day) => (\r\n              <div key={day} className="text-center text-xs font-medium">\r\n                {day}\r\n              </div>\r\n            ))}\r\n          </div>\r\n\r\n          {/* Calendar grid */}\r\n          <div className="grid grid-cols-7 gap-1">{renderCalendar()}</div>\r\n\r\n          {/* Today button */}\r\n          <div className="mt-2 text-center">\r\n            <button\r\n              className="text-sm text-blue-500 hover:underline"\r\n              onClick={() => {\r\n                const today = new Date();\r\n                setCurrentMonth(today);\r\n                selectDate(today);\r\n              }}\r\n            >\r\n              Today\r\n            </button>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport { DatePicker };\r\n',
  },
  {
    id: 'Dropdown',
    element:
      'import React, { useCallback, useRef, useState } from "react";\r\nimport { Button } from "./Button";\r\n\r\nexport default function Dropdown({ children, button, title = "Open" }) {\r\n  const buttonRef = useRef(null);\r\n  const dropDownRef = useRef(null);\r\n\r\n  const [open, setOpen] = useState(false);\r\n\r\n  const handleToogleOpen = useCallback(() => {\r\n    setOpen(!open);\r\n  }, [open, setOpen]);\r\n\r\n  return (\r\n    <React.Fragment>\r\n      {open ? (\r\n        <span\r\n          onClick={handleToogleOpen}\r\n          className="fixed z-10 bg-black/20 inset-0"\r\n        ></span>\r\n      ) : null}\r\n      <div>\r\n        {open ? (\r\n          <div\r\n            ref={dropDownRef}\r\n            style={{\r\n              top: buttonRef.current.getBoundingClientRect().top + 50,\r\n            }}\r\n            className="min-w-56 fixed z-20 bg-neutral-200 min-h-5 rounded-lg border border-neutral-400 shadow p-1 flex flex-col gap-y-1"\r\n          >\r\n            {children}\r\n          </div>\r\n        ) : null}\r\n        <div ref={buttonRef} role="button" onClick={handleToogleOpen}>\r\n          {button ?? <Button>{title}</Button>}\r\n        </div>\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n}\r\n',
  },
  {
    id: 'Footer',
    element:
      'import {\r\n  FaLinkedinIn,\r\n  FaXTwitter,\r\n  FaInstagram,\r\n  FaYoutube,\r\n} from "react-icons/fa6";\r\n\r\nconst socialIconsMap = {\r\n  linkedin: <FaLinkedinIn />,\r\n  twitter: <FaXTwitter />,\r\n  instagram: <FaInstagram />,\r\n  youtube: <FaYoutube />,\r\n};\r\n\r\nconst Footer = ({\r\n  lightLogo,\r\n  darkLogo,\r\n  description = "",\r\n  socials = [],\r\n  sections = [],\r\n  copyright,\r\n}) => {\r\n  return (\r\n    <footer className="!dark py-10 px-6 md:px-20 transition-all shadow-lg">\r\n      <div className="flex flex-col md:flex-row justify-between gap-10">\r\n        {/* Logo & Description */}\r\n        <div className="max-w-sm">\r\n          <img\r\n            src={lightLogo}\r\n            alt="Logo"\r\n            className="h-10 w-auto mb-4 block dark:hidden"\r\n          />\r\n          <img\r\n            src={darkLogo}\r\n            alt="Logo"\r\n            className="h-10 w-auto mb-4 hidden dark:block"\r\n          />\r\n\r\n          <p className="!dark text-sm text-gray-700 dark:text-gray-400 text-shadow-md">\r\n            {description}\r\n          </p>\r\n\r\n          {/* Social Icons */}\r\n          <div className="flex gap-4 mt-6">\r\n            {socials.map((social, idx) => (\r\n              <a\r\n                key={idx}\r\n                href={social.link}\r\n                target="_blank"\r\n                rel="noopener noreferrer"\r\n                className="!dark w-10 h-10 flex items-center justify-center rounded-full transition-all duration-300 \r\n                  bg-gray-200 hover:bg-black hover:text-white hover:shadow-lg \r\n                  dark:bg-gray-900 dark:hover:bg-white dark:hover:text-black"\r\n              >\r\n                {socialIconsMap[social.type]}\r\n              </a>\r\n            ))}\r\n          </div>\r\n        </div>\r\n\r\n        {/* Footer Links */}\r\n        <div className="grid grid-cols-2 sm:grid-cols-4 gap-6 text-sm">\r\n          {sections.map((section, idx) => (\r\n            <div key={idx}>\r\n              <h3 className="!dark font-semibold mb-4 text-shadow-lg text-black dark:text-white">\r\n                {section.title}\r\n              </h3>\r\n              <ul className="!dark space-y-2 text-gray-600 dark:text-gray-400">\r\n                {section.links.map((link, index) => (\r\n                  <li key={index}>\r\n                    <a\r\n                      href={link.href}\r\n                      className="!dark transition-all hover:underline hover:text-black dark:hover:text-white"\r\n                    >\r\n                      {link.label}\r\n                    </a>\r\n                  </li>\r\n                ))}\r\n              </ul>\r\n            </div>\r\n          ))}\r\n        </div>\r\n      </div>\r\n\r\n      {/* Copyright */}\r\n      <div\r\n        className="!dark text-center text-sm mt-10 pt-4 border-t \r\n        border-gray-300 text-gray-600 \r\n        dark:border-gray-800 dark:text-gray-500"\r\n      >\r\n        {copyright}\r\n      </div>\r\n    </footer>\r\n  );\r\n};\r\n\r\nexport default Footer;\r\n',
  },
  {
    id: 'Input',
    element:
      'import { cn } from "@/lib/utils";\r\n\r\nconst Input = ({ className, type, ...props }) => {\r\n  return (\r\n    <input\r\n      type={type}\r\n      data-slot="input"\r\n      className={cn(\r\n        "file:text-foreground placeholder:text-muted-foreground selection:bg-primary selection:text-primary-foreground dark:bg-input/30 border-input flex h-9 w-full min-w-0 rounded-md border bg-transparent px-3 py-1 text-base shadow-xs transition-[color,box-shadow] outline-none file:inline-flex file:h-7 file:border-0 file:bg-transparent file:text-sm file:font-medium disabled:pointer-events-none disabled:cursor-not-allowed disabled:opacity-50 md:text-sm",\r\n        "focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px]",\r\n        "aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive",\r\n        className,\r\n      )}\r\n      {...props}\r\n    />\r\n  );\r\n};\r\n\r\nexport default Input;\r\n',
  },
  {
    id: 'MessageBot',
    element:
      'import React, { useState } from "react";\r\nimport { cn } from "../utils/lib";\r\n\r\nconst MessageBot = ({\r\n  orgName = "UIgnite",\r\n  themeColor = "bg-gray-800",\r\n  url,\r\n  alt,\r\n}) => {\r\n  const [isOpen, setIsOpen] = useState(false);\r\n  const [input, setInput] = useState("");\r\n  const [count, setCount] = useState(1);\r\n  // messages will be array of objects and objects should have a sender and the text\r\n  const [messages, setMessages] = useState([]);\r\n  const sendMessage = () => {\r\n    if (!input.trim()) return;\r\n\r\n    const newMessage = { text: input, sender: "user" };\r\n    const updatedMessages = [...messages, newMessage];\r\n    setMessages(updatedMessages);\r\n    setInput("");\r\n    // console.log(messages)\r\n\r\n    const botResponse = { text: `bot response ${count + 1} `, sender: "bot" };\r\n    setCount(count + 1);\r\n    // console.log(count)\r\n    setTimeout(() => {\r\n      setMessages((currentMessages) => [...currentMessages, botResponse]);\r\n      console.log(messages);\r\n    }, 800);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=" fixed bottom-5 right-5">\r\n        <button\r\n          className={`cursor-pointer w-16 h-16 ${themeColor} text-white rounded-full shadow-lg flex items-center justify-center text-2xl`}\r\n          onClick={() => setIsOpen(!isOpen)}\r\n        >\r\n          💬\r\n        </button>\r\n\r\n        {isOpen && (\r\n          <div className=" fixed bottom-23 right-8 w-80 h-120 bg-white rounded-lg ">\r\n            <div className="flex flex-col ">\r\n              <div\r\n                className={`p-3 ${themeColor} text-white flex justify-between items-center rounded-t-lg`}\r\n              >\r\n                <span>{orgName}</span>\r\n                <button\r\n                  className=" cursor-pointer p-1 text-white text-sm font-bold"\r\n                  onClick={() => setIsOpen(false)}\r\n                >\r\n                  <img src="circle-x.svg" alt="" />\r\n                </button>\r\n              </div>\r\n\r\n              <div className="flex-1 p-3 overflow-y-auto bg-white">\r\n                <p>Welcome to {orgName} chatbot </p>\r\n              </div>\r\n            </div>\r\n\r\n            {/* Chat Messages  */}\r\n\r\n            <div className="flex flex-col   p-3 overflow-y-auto space-y-2 min-h-[65%] max-h-[65%]">\r\n              <div className="flex-grow"></div>\r\n              {messages.map((msg, index) => (\r\n                <>\r\n                  <div className="flex">\r\n                    {msg.sender === "user" && (\r\n                      <img\r\n                        className="rounded-full  m-2 h-5 w-5 object-cover"\r\n                        src={msg.sender == "user" ? url : alt}\r\n                        alt={alt}\r\n                      />\r\n                    )}\r\n                    <div\r\n                      key={index}\r\n                      className={` text-black p-2 min-w-[80%] overflow-x-clip rounded-md  ${msg.sender === "user" ? "bg-gray-200 self-start text-left mr-30000 " : "bg-orange-200 self-end text-right ml-9 "}`}\r\n                    >\r\n                      {msg.text}\r\n                    </div>\r\n                    {msg.sender === "bot" && (\r\n                      <img\r\n                        className="rounded-full m-2 h-5 w-5 object-cover"\r\n                        src={msg.sender == "user" ? url : alt}\r\n                        alt={alt}\r\n                      />\r\n                    )}\r\n                  </div>\r\n                </>\r\n              ))}\r\n            </div>\r\n\r\n            <div className="flex justify-between p-3 border-t border-gray-300 ">\r\n              <input\r\n                type="text"\r\n                placeholder="Type a message..."\r\n                className=" p-2 text-black border rounded-md outline-none min-w-[80%]"\r\n                onChange={(e) => {\r\n                  setInput(e.target.value);\r\n                }}\r\n              />\r\n\r\n              <button\r\n                className={`cursor-pointer ml-2 px-4 py-2 ${themeColor} text-white rounded-md`}\r\n                onClick={sendMessage}\r\n              >\r\n                ➤\r\n              </button>\r\n            </div>\r\n          </div>\r\n        )}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default MessageBot;\r\n',
  },
  {
    id: 'Navbar',
    element:
      'import React, { useState } from "react";\r\nimport { useTheme } from "../hooks/theme";\r\n\r\nconst Navbar = ({\r\n  lightLogo,\r\n  darkLogo,\r\n  lightGithub,\r\n  darkGithub,\r\n  lightThemeIcon,\r\n  darkThemeIcon,\r\n  navLinks = [],\r\n}) => {\r\n  const { theme, toggleTheme } = useTheme();\r\n  const isDark = theme === "dark";\r\n\r\n  const [selectedNav, setSelectedNav] = useState(navLinks[0]?.label || "");\r\n  const [menuOpen, setMenuOpen] = useState(false); // mobile menu state\r\n\r\n  const getNavClass = (label) => {\r\n    const isSelected = selectedNav === label;\r\n\r\n    if (isSelected) {\r\n      return `rounded-full px-4 py-2 font-semibold transition duration-300 ${\r\n        isDark\r\n          ? "bg-gray-700 hover:bg-gray-600 border-2 border-white shadow-[0_1px_50px_rgba(255,255,255,0.4)]"\r\n          : "bg-gray-300 hover:bg-gray-400 border-2"\r\n      }`;\r\n    } else {\r\n      return `rounded-full px-4 py-2 font-semibold transition duration-300 ${\r\n        isDark ? "hover:text-gray-300" : "hover:text-gray-700"\r\n      }`;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <nav\r\n      className={`fixed top-0 left-0 w-full flex items-center justify-between p-4  transition-all duration-300 z-50 px-6  ${\r\n        isDark\r\n          ? "bg-transparent text-white"\r\n          : "bg-[#f7f7f7] text-black border-black"\r\n      }`}\r\n    >\r\n      <div className="flex items-center">\r\n        <img\r\n          src={isDark ? darkLogo : lightLogo}\r\n          alt="Logo"\r\n          className="h-10 w-auto"\r\n        />\r\n      </div>\r\n\r\n      <ul className="hidden md:flex space-x-5">\r\n        {navLinks.map(({ label, href }) => (\r\n          <li key={label}>\r\n            <a\r\n              href={href}\r\n              className={getNavClass(label)}\r\n              onClick={() => setSelectedNav(label)}\r\n            >\r\n              {label}\r\n            </a>\r\n          </li>\r\n        ))}\r\n      </ul>\r\n\r\n      <div className="flex items-center space-x-4">\r\n        <a href="https://github.com" target="_blank" rel="noopener noreferrer">\r\n          <img\r\n            src={isDark ? darkGithub : lightGithub}\r\n            alt="GitHub"\r\n            className="h-6 w-6"\r\n          />\r\n        </a>\r\n\r\n        <button onClick={toggleTheme}>\r\n          <img\r\n            src={isDark ? darkThemeIcon : lightThemeIcon}\r\n            alt="Theme Toggle"\r\n            className="h-6 w-6"\r\n          />\r\n        </button>\r\n\r\n        <button\r\n          onClick={() => setMenuOpen(!menuOpen)}\r\n          className="md:hidden focus:outline-none"\r\n        >\r\n          <svg\r\n            className="h-6 w-6"\r\n            fill="none"\r\n            stroke="currentColor"\r\n            viewBox="0 0 24 24"\r\n          >\r\n            {menuOpen ? (\r\n              <path\r\n                strokeLinecap="round"\r\n                strokeLinejoin="round"\r\n                strokeWidth={2}\r\n                d="M6 18L18 6M6 6l12 12"\r\n              />\r\n            ) : (\r\n              <path\r\n                strokeLinecap="round"\r\n                strokeLinejoin="round"\r\n                strokeWidth={2}\r\n                d="M4 6h16M4 12h16M4 18h16"\r\n              />\r\n            )}\r\n          </svg>\r\n        </button>\r\n      </div>\r\n\r\n      {menuOpen && (\r\n        <ul\r\n          className={`absolute top-full left-0 w-full bg-inherit flex flex-col items-center py-4 space-y-4 md:hidden ${\r\n            isDark ? "text-white" : "text-black"\r\n          }`}\r\n        >\r\n          {navLinks.map(({ label, href }) => (\r\n            <li key={label}>\r\n              <a\r\n                href={href}\r\n                className={getNavClass(label)}\r\n                onClick={() => {\r\n                  setSelectedNav(label);\r\n                  setMenuOpen(false);\r\n                }}\r\n              >\r\n                {label}\r\n              </a>\r\n            </li>\r\n          ))}\r\n        </ul>\r\n      )}\r\n    </nav>\r\n  );\r\n};\r\n\r\nexport default Navbar;\r\n',
  },
  {
    id: 'NavMenu',
    element:
      'import React from "react";\r\n\r\n// Dropdown Component\r\nconst Dropdown = ({ content }) => {\r\n  return (\r\n    <div className="absolute bg-gray-800 text-white p-3 rounded-md shadow-lg transition-all duration-300 ease-in-out mt-4 z-50 min-w-max max-w-md overflow-x-auto left-1/2 transform -translate-x-1/2">\r\n      {content}\r\n    </div>\r\n  );\r\n};\r\n\r\n// Main Navbar\r\nconst NavMenu = () => {\r\n  const dropdownContent = {\r\n    home: (\r\n      <ul>\r\n        <li>\r\n          <a\r\n            href="https://github.com/rambhardwajj/UIgnite"\r\n            target="_blank"\r\n            rel="noopener noreferrer"\r\n            className="hover:text-cyan-300 transition duration-200"\r\n          >\r\n            GitHub\r\n          </a>\r\n        </li>\r\n        <li>\r\n          <a\r\n            href="https://github.com/rambhardwajj/UIgnite"\r\n            target="_blank"\r\n            rel="noopener noreferrer"\r\n            className="hover:text-cyan-300 transition duration-200"\r\n          >\r\n            Full Documentation and Setup Guide\r\n          </a>\r\n        </li>\r\n      </ul>\r\n    ),\r\n    resources: (\r\n      <ul>\r\n        <li>\r\n          <a href="#" className="hover:text-cyan-300 transition duration-200">\r\n            Full React + Tailwind + Supabase Guide\r\n          </a>\r\n        </li>\r\n        <li>\r\n          <a href="#" className="hover:text-cyan-300 transition duration-200">\r\n            Advanced UI Components\r\n          </a>\r\n        </li>\r\n      </ul>\r\n    ),\r\n    about: (\r\n      <ul>\r\n        <li>\r\n          <a href="#" className="hover:text-cyan-300 transition duration-200">\r\n            About Our Team\r\n          </a>\r\n        </li>\r\n        <li>\r\n          <a href="#" className="hover:text-cyan-300 transition duration-200">\r\n            Meet the Developers\r\n          </a>\r\n        </li>\r\n      </ul>\r\n    ),\r\n  };\r\n\r\n  return (\r\n    <div className="flex justify-center w-full mt-6">\r\n      <nav className="bg-gray-800 px-6 py-2 rounded-full shadow-lg shadow-cyan-500/50">\r\n        <ul className="flex space-x-6 items-center text-cyan-500">\r\n          {["home", "resources", "about"].map((item) => (\r\n            <li key={item} className="relative group">\r\n              <button className="cursor-pointer hover:text-cyan-500 transition duration-200 capitalize">\r\n                {item}\r\n              </button>\r\n              <div className="invisible group-hover:visible opacity-0 group-hover:opacity-100 transition duration-200">\r\n                <Dropdown content={dropdownContent[item]} />\r\n              </div>\r\n            </li>\r\n          ))}\r\n        </ul>\r\n      </nav>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NavMenu;\r\n',
  },
  {
    id: 'Preview',
    element:
      'import React from "react";\r\nimport { cn } from "../utils/lib";\r\n\r\nexport const Textarea = ({ className, ...props }) => {\r\n  return (\r\n    <textarea\r\n      className={cn(\r\n        "flex min-h-[80px] w-full rounded-xl border border-gray-700 bg-gray-800 px-4 py-3 text-sm text-white placeholder:text-gray-400 shadow-sm transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-cyan-400 focus-visible:ring-offset-2 focus-visible:ring-offset-gray-900 disabled:opacity-50 disabled:cursor-not-allowed  ",\r\n        className,\r\n      )}\r\n      {...props}\r\n    />\r\n  );\r\n};\r\n',
  },
  {
    id: 'PricingCard',
    element:
      '// Theme definitions\r\nimport { themes } from "../utils/theme.js";\r\n\r\nexport const ThemeSelector = ({ currentTheme, setTheme }) => {\r\n  return (\r\n    <div className="flex justify-center mb-12">\r\n      <div\r\n        className={`inline-flex rounded-md p-1 ${themes[currentTheme].border} border`}\r\n      >\r\n        {Object.keys(themes).map((theme) => (\r\n          <button\r\n            key={theme}\r\n            className={`!dark px-4 py-2 rounded-md text-sm font-medium transition-colors duration-200 ${\r\n              currentTheme === theme\r\n                ? `${themes[theme].selectBg} ${themes[theme].selectText}`\r\n                : "text-gray-500 hover:text-gray-900 dark:text-gray-400 dark:hover:text-white"\r\n            }`}\r\n            onClick={() => setTheme(theme)}\r\n          >\r\n            {themes[theme].name}\r\n          </button>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport const PricingCard = ({\r\n  title,\r\n  price,\r\n  validity,\r\n  description,\r\n  features,\r\n  highlighted = false,\r\n  theme,\r\n  popular = false,\r\n}) => {\r\n  const currentTheme = themes[theme];\r\n\r\n  return (\r\n    <div\r\n      className={`rounded-xl p-8 flex flex-col h-full relative transition-all duration-300 transform hover:scale-105 ${\r\n        highlighted ? currentTheme.highlightedCard : currentTheme.cardBackground\r\n      } ${popular ? "ring-2 ring-offset-2 ring-offset-slate-900 ring-cyan-500" : ""}`}\r\n    >\r\n      {popular && (\r\n        <div\r\n          className={`absolute -top-4 left-1/2 transform -translate-x-1/2 px-4 py-1 bg-cyan-500 text-black rounded-full text-sm font-bold`}\r\n        >\r\n          Most Popular\r\n        </div>\r\n      )}\r\n\r\n      <div className={`${currentTheme.headerText} text-sm mb-2`}>{title}</div>\r\n      <div className={`text-4xl font-bold ${currentTheme.priceText} mb-4`}>\r\n        {price} <span className="-ml-2 text-2xl">{validity}</span>\r\n      </div>\r\n      <p className={`${currentTheme.descriptionText} mb-4`}>{description}</p>\r\n      <hr className={`${currentTheme.line} mb-4 border-1.8 w-[96%]`} />\r\n      <div className="flex-grow">\r\n        {features.map((feature, index) => (\r\n          <div key={index} className="flex items-start mb-4 group">\r\n            <div className="mr-3 mt-1 transition-transform duration-300 group-hover:scale-110">\r\n              <div\r\n                className={`w-5 h-5 rounded-full ${currentTheme.checkmarkBg} flex items-center justify-center`}\r\n              >\r\n                <svg\r\n                  xmlns="http://www.w3.org/2000/svg"\r\n                  className={`h-3 w-3 ${currentTheme.checkmarkText}`}\r\n                  viewBox="0 0 20 20"\r\n                  fill="currentColor"\r\n                >\r\n                  <path\r\n                    fillRule="evenodd"\r\n                    d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z"\r\n                    clipRule="evenodd"\r\n                  />\r\n                </svg>\r\n              </div>\r\n            </div>\r\n            <div\r\n              className={`${currentTheme.featureText} group-hover:text-white transition-colors duration-300`}\r\n            >\r\n              {feature}\r\n            </div>\r\n          </div>\r\n        ))}\r\n      </div>\r\n\r\n      <a\r\n        href="https://rzp.io/rzp/FuM0wyrD"\r\n        className={`mt-8 py-3 px-4 rounded-lg font-medium transition-all text-center cursor-pointer duration-300 ${\r\n          highlighted\r\n            ? "bg-gradient-to-r from-cyan-500 to-blue-500 text-white hover:from-cyan-600 hover:to-blue-600"\r\n            : "bg-gradient-to-r from-gray-700 to-gray-600 text-white hover:from-gray-600 hover:to-gray-500"\r\n        }`}\r\n      >\r\n        Get Started\r\n      </a>\r\n    </div>\r\n  );\r\n};\r\n',
  },
  {
    id: 'Resizable',
    element:
      'import React, { useCallback, useEffect, useRef, useState } from "react";\r\nimport { cn } from "../utils/lib";\r\n\r\nexport default function Resizable({\r\n  className,\r\n  defaultPosition,\r\n  horizontal: horizontalValue,\r\n  children,\r\n}) {\r\n  // refrence of the container\r\n  const containerRef = useRef(null);\r\n  const draggerRef = useRef(null);\r\n\r\n  const [dividerPosition, setDividerPosition] = useState(\r\n    (defaultPosition ?? horizontalValue)\r\n      ? window.innerHeight - window.innerHeight / 3\r\n      : window.innerWidth / 5,\r\n  );\r\n  const [mouseX, setMouseX] = useState(0);\r\n  const [mouseDown, setMouseDown] = useState(false);\r\n\r\n  const handleMouseUpDown = useCallback(() => {\r\n    const controller = new AbortController();\r\n    if (draggerRef.current) {\r\n      draggerRef.current.addEventListener(\r\n        "mousedown",\r\n        () => {\r\n          setMouseDown(true);\r\n        },\r\n        {\r\n          signal: controller.signal,\r\n        },\r\n      );\r\n\r\n      draggerRef.current.addEventListener(\r\n        "mouseup",\r\n        () => {\r\n          setMouseDown(false);\r\n        },\r\n        {\r\n          signal: controller.signal,\r\n        },\r\n      );\r\n    }\r\n    return () => {\r\n      controller.abort();\r\n    };\r\n  }, [draggerRef.current, setMouseDown]);\r\n\r\n  React.useEffect(() => {\r\n    handleMouseUpDown();\r\n  }, [draggerRef]);\r\n\r\n  useEffect(() => {\r\n    if (mouseDown) setDividerPosition(mouseX);\r\n  }, [mouseX, mouseDown]);\r\n\r\n  return (\r\n    <div\r\n      ref={containerRef}\r\n      onMouseMove={(ev) => {\r\n        setMouseX(horizontalValue ? ev.clientY : ev.clientX);\r\n      }}\r\n      className={cn(\r\n        `w-full h-full flex ${horizontalValue ? "flex-col" : null}`,\r\n        className,\r\n      )}\r\n    >\r\n      <div\r\n        style={{\r\n          width: horizontalValue ? "100%" : dividerPosition,\r\n          height: horizontalValue ? dividerPosition : "100%",\r\n        }}\r\n      >\r\n        {children[0]}\r\n      </div>\r\n      <div\r\n        ref={draggerRef}\r\n        className={`${\r\n          horizontalValue\r\n            ? "w-auto h-1 cursor-row-resize"\r\n            : "h-full w-1 cursor-col-resize"\r\n        } relative group`}\r\n      >\r\n        <div\r\n          role="span"\r\n          aria-checked={mouseDown ? "true" : "false"}\r\n          className={`${\r\n            horizontalValue\r\n              ? "top-1/2 left-0 right-0 bottom-1/2 -translate-y-1/2 h-0.5 group-hover:h-1"\r\n              : "top-0 left-1/2 right-1/2 bottom-0 -translate-x-1/2 w-0.5 group-hover:w-1"\r\n          } absolute z-10  bg-[#263147] transition-all group-hover:bg-amber-300 aria-checked:bg-amber-300`}\r\n        />\r\n      </div>\r\n      <div\r\n        style={{\r\n          width: horizontalValue\r\n            ? "w-full"\r\n            : containerRef.current\r\n              ? containerRef.current.offsetWidth - dividerPosition\r\n              : 0,\r\n          height: horizontalValue\r\n            ? containerRef.current\r\n              ? containerRef.current.offsetHeight - dividerPosition\r\n              : 0\r\n            : "h-full",\r\n        }}\r\n      >\r\n        {children[1]}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n',
  },
  {
    id: 'Skeleton',
    element:
      'import { cn } from "../utils/lib";\r\n\r\nconst Skeleton = ({ className }) => {\r\n  return (\r\n    <div\r\n      className={cn(`bg-gray-600 animate-pulse rounded-full ${className}`)}\r\n    ></div>\r\n  );\r\n};\r\n\r\nexport default Skeleton;\r\n',
  },
  {
    id: 'Spinner',
    element:
      'import React from "react";\r\nimport { cn } from "../utils/lib";\r\nimport { useTheme } from "../hooks/theme";\r\nexport const Spinner = ({ className = "" }) => {\r\n  const { theme } = useTheme();\r\n  return (\r\n    <div class={cn("flex space-x-2 justify-center items-center ", className)}>\r\n      <div\r\n        class={`h-3 w-3 ${theme === "dark" ? "bg-white" : "bg-black"} rounded-full animate-bounce [animation-delay:-0.3s]`}\r\n      ></div>\r\n      <div\r\n        class={`h-3 w-3 ${theme === "dark" ? "bg-white" : "bg-black"}  rounded-full animate-bounce [animation-delay:-0.15s]`}\r\n      ></div>\r\n      <div\r\n        class={`h-3 w-3 ${theme === "dark" ? "bg-white" : "bg-black"} rounded-full animate-bounce`}\r\n      ></div>\r\n    </div>\r\n  );\r\n};\r\n',
  },
  {
    id: 'Switch',
    element:
      'import React, { useState } from "react";\r\n\r\nexport default function Switch({ defaultState = false }) {\r\n  const [state, setState] = useState(defaultState);\r\n\r\n  return (\r\n    <div\r\n      role="switch"\r\n      tabIndex={0}\r\n      onClick={() => setState(!state)}\r\n      className={`w-8 h-5 cursor-pointer bg-neutral-100 rounded-full relative`}\r\n    >\r\n      <div\r\n        className={`size-4 bg-black rounded-full absolute transition-all ease-in-out duration-300 top-1/2 ${\r\n          state ? "translate-x-0.5" : "translate-x-3.5"\r\n        } -translate-y-1/2`}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n',
  },
  {
    id: 'Tabs',
    element:
      'import React from "react";\r\nimport { useState } from "react";\r\nimport { cn } from "../utils/lib";\r\n\r\nconst Tabs = ({ children, defaultVal = "preview", className = "" }) => {\r\n  const [activeTab, setActiveTab] = useState(defaultVal);\r\n\r\n  return (\r\n    <>\r\n      <div className={` mt-4 w-[90%] min ${className}`}>\r\n        {React.Children.map(children, (child, index) => {\r\n          return React.cloneElement(child, {\r\n            activeTab,\r\n            setActiveTab,\r\n          });\r\n        })}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nconst TabList = ({ children, activeTab, setActiveTab, className = "" }) => {\r\n  return (\r\n    <div className={cn(`flex space-x-2  rounded-md`, className)}>\r\n      {React.Children.map(children, (child, index) =>\r\n        React.cloneElement(child, { activeTab, setActiveTab }),\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nconst Tab = ({\r\n  title = "Here is the Title",\r\n  value,\r\n  activeTab = "preview",\r\n  setActiveTab,\r\n  className = "",\r\n}) => {\r\n  const isActive = activeTab === value;\r\n  return (\r\n    <button\r\n      onClick={() => setActiveTab(value)}\r\n      className={cn(\r\n        ` px-6 py-2 rounded-md text-md font-medium cursor-pointer\r\n        ${isActive ? " text-white bg-neutral-900" : " text-gray-600 hover:text-white"}\r\n      `,\r\n        className,\r\n      )}\r\n    >\r\n      {title}\r\n    </button>\r\n  );\r\n};\r\n\r\nconst TabContent = ({ value, activeTab, content }) => {\r\n  if (activeTab === value)\r\n    return (\r\n      <div className=" rounded-md flex justify-center min-h-[100%] overflow-x-auto  mt-3">\r\n        {content}\r\n      </div>\r\n    );\r\n};\r\n\r\nexport { Tabs, Tab, TabList, TabContent };\r\n',
  },
  {
    id: 'Testimonials',
    element:
      'import { Star } from "lucide-react";\r\n\r\nconst Testimonials = ({ imageSrc, name, title, rating = 5, message }) => {\r\n  return (\r\n    <div className="m-4 flex flex-col gap-2.5 shadow-sm p-4 text-black grainy-light max-w-xl rounded-xs">\r\n      <div className="flex items-center justify-between">\r\n        <div className="flex gap-2 justify-center items-center">\r\n          <img\r\n            src={imageSrc ? imageSrc : "hitesh-sir.png"}\r\n            alt={"../hitesh-sir.png"}\r\n            className="w-10 h-10 rounded-full object-cover"\r\n          />\r\n          <div className="flex flex-col items-start">\r\n            <div>{name}</div>\r\n            <div className="text-[12.8px] opacity-60">{title}</div>\r\n          </div>\r\n        </div>\r\n\r\n        <div className="flex gap-0.5 mb-2">\r\n          {Array.from({ length: 5 }).map((_, index) => (\r\n            <Star\r\n              key={index}\r\n              className={`h-5 w-5 ${\r\n                index < rating\r\n                  ? "text-yellow-400 fill-yellow-400"\r\n                  : "text-gray-300 fill-gray-300"\r\n              }`}\r\n            />\r\n          ))}\r\n        </div>\r\n      </div>\r\n\r\n      <p className="text-left">{message}</p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Testimonials;\r\n',
  },
  {
    id: 'Textarea',
    element:
      'import React from "react";\r\nimport { cn } from "../utils/lib";\r\n\r\nexport const Textarea = ({ className, ...props }) => {\r\n  return (\r\n    <textarea\r\n      className={cn(\r\n        "flex min-h-[80px] w-full rounded-xl border border-gray-700 bg-gray-800 px-4 py-3 text-sm text-white placeholder:text-gray-400 shadow-sm transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-cyan-400 focus-visible:ring-offset-2 focus-visible:ring-offset-gray-900 disabled:opacity-50 disabled:cursor-not-allowed  ",\r\n        className,\r\n      )}\r\n      {...props}\r\n    />\r\n  );\r\n};\r\n',
  },
  {
    id: 'ToastUi',
    element:
      'import { cn } from "../utils/lib";\r\n\r\nexport default function ToastUi({ idx, title, options, hovered = false }) {\r\n  return (\r\n    <div\r\n      style={{\r\n        bottom: hovered ? 40 + idx * 80 : 40 + idx * 20,\r\n        zIndex: 10 + idx,\r\n        scale: hovered ? 1 : 1 + idx * 0.05,\r\n      }}\r\n      className={cn(\r\n        "fixed right-10 transition-all min-w-[300px]",\r\n        options.containerClassName,\r\n      )}\r\n    >\r\n      <div className="rounded-lg border border-neutral-300 bg-neutral-100 dark:bg-neutral-950 dark:border-neutral-700 shadow-lg px-5 py-3">\r\n        <div\r\n          className={cn(\r\n            "font-semibold text-neutral-900 dark:text-neutral-100 truncate text-sm",\r\n            options.titleClassName,\r\n          )}\r\n        >\r\n          {title}\r\n        </div>\r\n        {options.desc ? (\r\n          <div\r\n            className={cn(\r\n              "font-medium text-neutral-700 text-xs dark:text-neutral-300 mt-0.5",\r\n              options.descClassName,\r\n            )}\r\n          >\r\n            {options.desc}\r\n          </div>\r\n        ) : null}\r\n      </div>\r\n      <div className="h-3.5" />\r\n    </div>\r\n  );\r\n}\r\n',
  },
  {
    id: 'Tooltip',
    element:
      'import React, { useState } from "react";\r\nimport { cn } from "../utils/lib.js";\r\n\r\nexport const Tooltip = ({\r\n  children,\r\n  title = "",\r\n  options = {\r\n    delay: 300,\r\n    containerClassName: "",\r\n    tooltipStyle: {},\r\n  },\r\n}) => {\r\n  const [visible, setVisible] = useState(false);\r\n  let timeout;\r\n\r\n  const showTooltip = () => {\r\n    timeout = setTimeout(() => {\r\n      setVisible(true);\r\n    }, options.delay);\r\n  };\r\n  const hideTooltip = () => {\r\n    timeout = setTimeout(() => {\r\n      clearTimeout(timeout);\r\n      setVisible(false);\r\n    }, options.delay);\r\n  };\r\n\r\n  return (\r\n    <div\r\n      className={cn("relative inline-block mt-10", options?.containerClassName)}\r\n    >\r\n      {visible && (\r\n        <div\r\n          style={options?.tootipStyle}\r\n          className={cn(\r\n            "absolute bottom-full truncate left-1/2 -translate-x-1/2 text-sm text-center w-28 h-8 font-sans font-medium  px-4 py-1 rounded-md  text-black bg-white shadow-lg transition-opacity duration-300 opacity-100",\r\n            options.tooltipClassName,\r\n          )}\r\n        >\r\n          {title}\r\n        </div>\r\n      )}\r\n\r\n      <div\r\n        onMouseEnter={showTooltip}\r\n        onMouseLeave={hideTooltip}\r\n        aria-label={title}\r\n        className="px-2 py-1 rounded-sm"\r\n      >\r\n        {children}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n',
  },
  {
    id: 'VideoPlayer',
    element:
      'import { Star } from "lucide-react";\r\n\r\nconst Testimonials = ({ imageSrc, name, title, rating = 5, message }) => {\r\n  return (\r\n    <div className="m-4 flex flex-col gap-2.5 shadow-sm p-4 text-black grainy-light max-w-xl rounded-xs">\r\n      <div className="flex items-center justify-between">\r\n        <div className="flex gap-2 justify-center items-center">\r\n          <img\r\n            src={imageSrc ? imageSrc : "hitesh-sir.png"}\r\n            alt={"../hitesh-sir.png"}\r\n            className="w-10 h-10 rounded-full object-cover"\r\n          />\r\n          <div className="flex flex-col items-start">\r\n            <div>{name}</div>\r\n            <div className="text-[12.8px] opacity-60">{title}</div>\r\n          </div>\r\n        </div>\r\n\r\n        <div className="flex gap-0.5 mb-2">\r\n          {Array.from({ length: 5 }).map((_, index) => (\r\n            <Star\r\n              key={index}\r\n              className={`h-5 w-5 ${\r\n                index < rating\r\n                  ? "text-yellow-400 fill-yellow-400"\r\n                  : "text-gray-300 fill-gray-300"\r\n              }`}\r\n            />\r\n          ))}\r\n        </div>\r\n      </div>\r\n\r\n      <p className="text-left">{message}</p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Testimonials;\r\n',
  },
];
