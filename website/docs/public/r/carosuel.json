{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "carosuel",
  "type": "registry:ui",
  "dependencies": [],
  "files": [
    {
      "content": "import React, {\n  useCallback,\n  useEffect,\n  useState,\n  createContext,\n  useContext,\n} from 'react';\nimport useEmblaCarousel, {UseEmblaCarouselType} from 'embla-carousel-react';\nimport {ChevronLeft, ChevronRight} from 'lucide-react';\n\nexport type CarouselApi = UseEmblaCarouselType[1];\nexport type CarouselOptions = Parameters<typeof useEmblaCarousel>[0];\nexport type CarouselPlugin = Parameters<typeof useEmblaCarousel>[1];\n\nexport interface CarouselProps extends React.HTMLAttributes<HTMLDivElement> {\n  options?: CarouselOptions;\n  plugins?: CarouselPlugin;\n  orientation?: 'horizontal' | 'vertical';\n  onApiChange?: (api: CarouselApi) => void;\n}\n\nexport interface CarouselButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement> {\n  variant?: 'default' | 'outline' | 'ghost';\n  size?: 'sm' | 'md' | 'lg';\n}\n\ninterface CarouselContextProps {\n  api: CarouselApi | undefined;\n  options?: CarouselOptions;\n  orientation: 'horizontal' | 'vertical';\n  scrollPrev: () => void;\n  scrollNext: () => void;\n  canScrollPrev: boolean;\n  canScrollNext: boolean;\n  containerRef: React.RefObject<HTMLDivElement | null>;\n}\n\nconst CarouselContext = createContext<CarouselContextProps | null>(null);\n\nexport const useCarousel = () => {\n  const context = useContext(CarouselContext);\n  if (!context) {\n    throw new Error('useCarousel must be used within a <Carousel />');\n  }\n  return context;\n};\n\nconst cn = (...classes: (string | undefined | boolean)[]) => {\n  return classes.filter(Boolean).join(' ');\n};\n\nexport const Carousel = React.forwardRef<HTMLDivElement, CarouselProps>(\n  (\n    {\n      options,\n      plugins,\n      orientation = 'horizontal',\n      onApiChange,\n      className,\n      children,\n      ...props\n    },\n    forwardedRef\n  ) => {\n    const containerRef = React.useRef<HTMLDivElement>(null);\n    const [, emblaApi] = useEmblaCarousel(\n      {\n        ...options,\n        axis: orientation === 'horizontal' ? 'x' : 'y',\n      },\n      plugins\n    );\n\n    const [canScrollPrev, setCanScrollPrev] = useState(false);\n    const [canScrollNext, setCanScrollNext] = useState(false);\n\n    const scrollPrev = useCallback(() => emblaApi?.scrollPrev(), [emblaApi]);\n    const scrollNext = useCallback(() => emblaApi?.scrollNext(), [emblaApi]);\n\n    const handleKeyDown = useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === 'ArrowLeft') {\n          event.preventDefault();\n          scrollPrev();\n        } else if (event.key === 'ArrowRight') {\n          event.preventDefault();\n          scrollNext();\n        }\n      },\n      [scrollPrev, scrollNext]\n    );\n\n    const onSelect = useCallback(() => {\n      if (!emblaApi) return;\n      setCanScrollPrev(emblaApi.canScrollPrev());\n      setCanScrollNext(emblaApi.canScrollNext());\n    }, [emblaApi]);\n\n    useEffect(() => {\n      if (emblaApi && onApiChange) {\n        onApiChange(emblaApi);\n      }\n    }, [emblaApi, onApiChange]);\n\n    useEffect(() => {\n      if (!emblaApi) return;\n\n      onSelect();\n      emblaApi.on('select', onSelect);\n      emblaApi.on('reInit', onSelect);\n\n      return () => {\n        emblaApi.off('select', onSelect);\n        emblaApi.off('reInit', onSelect);\n      };\n    }, [emblaApi, onSelect]);\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          api: emblaApi,\n          options,\n          orientation,\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n          containerRef,\n        }}\n      >\n        <div\n          ref={(node) => {\n            if (forwardedRef) {\n              if (typeof forwardedRef === 'function') {\n                forwardedRef(node);\n              } else {\n                forwardedRef.current = node;\n              }\n            }\n            if (containerRef.current !== node) {\n              containerRef.current = node;\n            }\n          }}\n          className={cn('carousel-container relative', className)}\n          onKeyDownCapture={handleKeyDown}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          tabIndex={0}\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    );\n  }\n);\n\nCarousel.displayName = 'Carousel';\n\nexport const CarouselViewport = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({className, ...props}, ref) => {\n  return (\n    <div\n      ref={ref}\n      className={cn('carousel-viewport overflow-hidden', className)}\n      {...props}\n    />\n  );\n});\n\nCarouselViewport.displayName = 'CarouselViewport';\n\nexport const CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({className, ...props}, ref) => {\n  const {orientation} = useCarousel();\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        'carousel-content flex',\n        orientation === 'horizontal' ? 'flex-row' : 'flex-col',\n        className\n      )}\n      {...props}\n    />\n  );\n});\n\nCarouselContent.displayName = 'CarouselContent';\n\nexport const CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({className, ...props}, ref) => {\n  const {orientation} = useCarousel();\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        'carousel-item min-w-0 flex-shrink-0 flex-grow-0',\n        orientation === 'horizontal' ? 'w-full' : 'h-full',\n        className\n      )}\n      {...props}\n    />\n  );\n});\n\nCarouselItem.displayName = 'CarouselItem';\n\nexport const CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  CarouselButtonProps\n>(({className, variant = 'outline', size = 'md', ...props}, ref) => {\n  const {scrollPrev, canScrollPrev, orientation} = useCarousel();\n\n  return (\n    <button\n      ref={ref}\n      type=\"button\"\n      className={cn(\n        'carousel-previous rounded-full flex items-center justify-center',\n        size === 'sm' ? 'h-8 w-8' : size === 'lg' ? 'h-12 w-12' : 'h-10 w-10',\n        variant === 'outline' ? 'border border-gray-200' : '',\n        variant === 'ghost' ? 'hover:bg-gray-100' : 'bg-white',\n        'absolute z-10',\n        orientation === 'horizontal'\n          ? 'top-1/2 -translate-y-1/2 left-4'\n          : 'left-1/2 -translate-x-1/2 top-4 rotate-90',\n        !canScrollPrev && 'opacity-50 cursor-not-allowed',\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      aria-label=\"Previous slide\"\n      {...props}\n    >\n      <ChevronLeft\n        className={cn(\n          size === 'sm' ? 'h-4 w-4' : size === 'lg' ? 'h-6 w-6' : 'h-5 w-5'\n        )}\n      />\n    </button>\n  );\n});\n\nCarouselPrevious.displayName = 'CarouselPrevious';\n\nexport const CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  CarouselButtonProps\n>(({className, variant = 'outline', size = 'md', ...props}, ref) => {\n  const {scrollNext, canScrollNext, orientation} = useCarousel();\n\n  return (\n    <button\n      ref={ref}\n      type=\"button\"\n      className={cn(\n        'carousel-next rounded-full flex items-center justify-center',\n        size === 'sm' ? 'h-8 w-8' : size === 'lg' ? 'h-12 w-12' : 'h-10 w-10',\n        variant === 'outline' ? 'border border-gray-200' : '',\n        variant === 'ghost' ? 'hover:bg-gray-100' : 'bg-white',\n        'absolute z-10',\n        orientation === 'horizontal'\n          ? 'top-1/2 -translate-y-1/2 right-4'\n          : 'left-1/2 -translate-x-1/2 bottom-4 rotate-90',\n        !canScrollNext && 'opacity-50 cursor-not-allowed',\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      aria-label=\"Next slide\"\n      {...props}\n    >\n      <ChevronRight\n        className={cn(\n          size === 'sm' ? 'h-4 w-4' : size === 'lg' ? 'h-6 w-6' : 'h-5 w-5'\n        )}\n      />\n    </button>\n  );\n});\n\nCarouselNext.displayName = 'CarouselNext';\n\nexport const CarouselIndicators = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & {count: number; activeIndex?: number}\n>(({className, count, activeIndex, ...props}, ref) => {\n  const {api} = useCarousel();\n  const [selectedIndex, setSelectedIndex] = useState(activeIndex || 0);\n\n  useEffect(() => {\n    if (!api) return;\n\n    const onSelect = () => {\n      setSelectedIndex(api.selectedScrollSnap());\n    };\n\n    api.on('select', onSelect);\n    onSelect();\n\n    return () => {\n      api.off('select', onSelect);\n    };\n  }, [api, activeIndex]);\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        'carousel-indicators flex gap-2 justify-center mt-4',\n        className\n      )}\n      {...props}\n    >\n      {Array.from({length: count}).map((_, index) => (\n        <button\n          key={index}\n          type=\"button\"\n          className={cn(\n            'h-2 w-2 rounded-full transition-colors',\n            selectedIndex === index ? 'bg-black' : 'bg-gray-300'\n          )}\n          onClick={() => api?.scrollTo(index)}\n          aria-label={`Go to slide ${index + 1}`}\n        />\n      ))}\n    </div>\n  );\n});\n\nCarouselIndicators.displayName = 'CarouselIndicators';\n",
      "type": "registry:ui",
      "path": "packages/uignite/src/components/Carosuel/Carosuel.tsx"
    }
  ]
}
