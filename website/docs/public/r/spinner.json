{
  "name": "spinner",
  "type": "registry:ui",
  "dependencies": [],
  "registryDependencies": [],
  "files": [
    {
      "path": "packages/uignite/src/components/Spinner/Spinner.tsx",
      "type": "registry:ui",
      "content": "import {cn} from '@/lib/utils';\r\nimport {useEffect, useState, FC} from 'react';\r\n\r\ntype SpinnerProps = {\r\n  className?: string;\r\n  variant?:\r\n    | 'bounce'\r\n    | 'circular'\r\n    | 'bars'\r\n    | 'grid'\r\n    | 'ripple'\r\n    | 'terminal'\r\n    | 'loader';\r\n  text?: string;\r\n};\r\n\r\nexport const Spinner: FC<SpinnerProps> = ({\r\n  className = '',\r\n  variant = 'bounce',\r\n  text = 'Loading...',\r\n}) => {\r\n  // dots\r\n  if (variant === 'bounce') {\r\n    return (\r\n      <div\r\n        className={cn('flex space-x-2 justify-center items-center', className)}\r\n      >\r\n        <div className=\"h-3 w-3 dark:bg-light-primary bg-dark-primary rounded-full animate-bounce [animation-delay:-0.3s]\" />\r\n        <div className=\"h-3 w-3 dark:bg-light-primary bg-dark-primary rounded-full animate-bounce [animation-delay:-0.15s]\" />\r\n        <div className=\"h-3 w-3 dark:bg-light-primary bg-dark-primary rounded-full animate-bounce\" />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  // circular\r\n  if (variant === 'circular') {\r\n    return (\r\n      <div className={cn('flex justify-center items-center', className)}>\r\n        <div className=\"loader-circle\" />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  // bars\r\n  if (variant === 'bars') {\r\n    return (\r\n      <div\r\n        className={cn(\r\n          'flex space-x-1 justify-center items-center h-10',\r\n          className\r\n        )}\r\n      >\r\n        {[0, 0.2, 0.4, 0.6, 0.8].map((delay, idx) => (\r\n          <div\r\n            key={idx}\r\n            className=\"w-2 h-5 bg-dark-primary dark:bg-light-primary rounded animate-grow-shrink\"\r\n            style={{animationDelay: `${delay}s`}}\r\n          />\r\n        ))}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  // ripple\r\n  if (variant === 'ripple') {\r\n    return (\r\n      <div\r\n        className={cn('relative flex justify-center items-center', className)}\r\n      >\r\n        <div className=\"absolute h-16 w-16 rounded-full border-4 border-dark-primary dark:border-light-primary animate-ping opacity-20\" />\r\n        <div className=\"absolute h-12 w-12 rounded-full border-4 border-dark-primary dark:border-light-primary animate-ping opacity-40 [animation-delay:0.3s]\" />\r\n        <div className=\"h-8 w-8 rounded-full border-4 border-dark-primary dark:border-light-primary\" />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  // terminal\r\n  if (variant === 'terminal') {\r\n    const [displayText, setDisplayText] = useState('');\r\n    const [showCursor, setShowCursor] = useState(true);\r\n    const [textIndex, setTextIndex] = useState(0);\r\n\r\n    useEffect(() => {\r\n      if (textIndex < text.length) {\r\n        const timer = setTimeout(() => {\r\n          setDisplayText((prev) => prev + text[textIndex]);\r\n          setTextIndex((prev) => prev + 1);\r\n        }, 150);\r\n        return () => clearTimeout(timer);\r\n      } else {\r\n        const resetTimer = setTimeout(() => {\r\n          setDisplayText('');\r\n          setTextIndex(0);\r\n        }, 1000);\r\n        return () => clearTimeout(resetTimer);\r\n      }\r\n    }, [textIndex, text]);\r\n\r\n    useEffect(() => {\r\n      const blinkTimer = setInterval(() => {\r\n        setShowCursor((prev) => !prev);\r\n      }, 500);\r\n      return () => clearInterval(blinkTimer);\r\n    }, []);\r\n\r\n    return (\r\n      <div\r\n        className={cn(\r\n          'flex items-center justify-start bg-gray-900 text-green-500 p-4 font-mono rounded-md w-[270px]',\r\n          className\r\n        )}\r\n      >\r\n        <div className=\"flex flex-col w-full\">\r\n          <div className=\"flex mb-2 items-center\">\r\n            <span className=\"text-sm mr-auto text-gray-400\">Status</span>\r\n            <div className=\"ml-2 h-3 w-3 rounded-full bg-red-500\" />\r\n            <div className=\"ml-2 h-3 w-3 rounded-full bg-yellow-500\" />\r\n            <div className=\"ml-2 h-3 w-3 rounded-full bg-green-500\" />\r\n          </div>\r\n          <div className=\"h-22 w-full bg-black/50 p-2 rounded-md overflow-hidden text-sm flex items-center\">\r\n            {displayText}\r\n            {showCursor && (\r\n              <span className=\"inline-block w-[1px] h-5 bg-green-500 ml-1\" />\r\n            )}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  // loader\r\n  if (variant === 'loader') {\r\n    return (\r\n      <div className={cn('flex items-center justify-center', className)}>\r\n        <div className=\"relative w-10 h-10\">\r\n          {Array.from({length: 12}).map((_, i) => (\r\n            <div\r\n              key={i}\r\n              className=\"absolute top-0 left-1/2 w-[2px] h-3 bg-dark-primary dark:bg-light-primary origin-center loader-line\"\r\n              style={{\r\n                transform: `rotate(${i * 30}deg) translateY(-20px)`,\r\n                opacity: (i + 1) / 12,\r\n                animation: 'fade 1.2s linear infinite',\r\n                animationDelay: `${(i * 0.1).toFixed(1)}s`,\r\n              }}\r\n            />\r\n          ))}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  // fallback (dots)\r\n  return (\r\n    <div\r\n      className={cn('flex space-x-2 justify-center items-center', className)}\r\n    >\r\n      <div className=\"h-3 w-3 dark:bg-light-primary bg-dark-primary rounded-full animate-bounce [animation-delay:-0.3s]\" />\r\n      <div className=\"h-3 w-3 dark:bg-light-primary bg-dark-primary rounded-full animate-bounce [animation-delay:-0.15s]\" />\r\n      <div className=\"h-3 w-3 dark:bg-light-primary bg-dark-primary rounded-full animate-bounce\" />\r\n    </div>\r\n  );\r\n};\r\n"
    }
  ],
  "$schema": "https://ui.shadcn.com/schema/registry-item.json"
}
