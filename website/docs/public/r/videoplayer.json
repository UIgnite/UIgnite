{"name":"videoplayer","type":"registry:ui","dependencies":[],"files":[{"path":"packages/uignite/src/components/VideoPlayer/VideoPlayer.tsx","type":"registry:ui","content":"import {useCallback, useEffect, useRef, useState, MouseEvent} from 'react';\n\nexport interface VideoPlayerProps {\n  thumbnailUrl?: string;\n  muted?: boolean;\n  autoplay?: boolean;\n}\n\nexport default function VideoPlayer({\n  thumbnailUrl,\n  muted = false,\n  autoplay = false,\n}: VideoPlayerProps) {\n  const videoRef = useRef<HTMLVideoElement | null>(null);\n  const progressRef = useRef<HTMLDivElement | null>(null);\n  const containerRef = useRef<HTMLDivElement | null>(null);\n\n  const [played, setPlayed] = useState(false);\n  const [playing, setPlaying] = useState(false);\n  const [fullScreenMode, setFullScreenMode] = useState(false);\n\n  const [currentTime, setCurrentTime] = useState(0);\n  const [videoDuration, setVideoDuration] = useState(0);\n\n  //   const [volumeBtnHovered, setVolumeBtnHovered] = useState(false);\n\n  const handleTooglePlaying = useCallback(() => {\n    setPlayed(true);\n    if (videoRef.current) {\n      if (!playing) videoRef.current.play();\n      else videoRef.current.pause();\n    }\n  }, [playing]);\n\n  useEffect(() => {\n    const controller = new AbortController();\n\n    if (videoRef.current) {\n      videoRef.current.addEventListener('play', () => setPlaying(true), {\n        signal: controller.signal,\n      });\n\n      videoRef.current.addEventListener('pause', () => setPlaying(false), {\n        signal: controller.signal,\n      });\n\n      videoRef.current.addEventListener(\n        'fullscreenchange',\n        () => setFullScreenMode(!fullScreenMode),\n        {signal: controller.signal}\n      );\n\n      videoRef.current.addEventListener(\n        'contextmenu',\n        (evt) => evt.preventDefault(),\n        {signal: controller.signal}\n      );\n\n      videoRef.current.addEventListener(\n        'timeupdate',\n        () => {\n          if (videoRef.current) {\n            setCurrentTime(videoRef.current.currentTime);\n            setVideoDuration(videoRef.current.duration);\n          }\n        },\n        {signal: controller.signal}\n      );\n    }\n\n    return () => {\n      controller.abort();\n    };\n  }, [fullScreenMode]);\n\n  const handleCurrentTimeChangeClick = useCallback(\n    (evt: MouseEvent<HTMLDivElement>) => {\n      const box = progressRef.current?.getBoundingClientRect();\n      if (videoRef.current && box) {\n        const time =\n          (((evt.clientX - box.x) / box.width) * 100 * videoDuration) / 100;\n        videoRef.current.currentTime = time;\n      }\n    },\n    [videoDuration]\n  );\n\n  const handleToogleFullScreenMode = useCallback(() => {\n    if (containerRef.current) {\n      if (!fullScreenMode) {\n        containerRef.current.requestFullscreen();\n      } else {\n        document.exitFullscreen();\n      }\n      setFullScreenMode(!fullScreenMode);\n    }\n  }, [fullScreenMode]);\n\n  return (\n    <div\n      ref={containerRef}\n      style={{\n        width: 741,\n        height: 416,\n      }}\n      className=\"relative group shadow-xl rounded overflow-hidden\"\n      data-played={played}\n    >\n      <style>\n        {`\n            .parent-volume:hover .child-volume {\n              opacity: 1;\n              height: 20px;\n            }\n            .parent-progress:hover .child-progress {\n              height: 8px;\n            }\n          `}\n      </style>\n      <video\n        preload=\"true\"\n        ref={videoRef}\n        hidden={!played}\n        muted={muted}\n        autoPlay={autoplay}\n        className=\"w-full h-full\"\n      >\n        <source\n          src=\"http://commondatastorage.googleapis.com/gtv-videos-bucket/sample/ForBiggerBlazes.mp4\"\n          type=\"video/mp4\"\n        />\n      </video>\n      <img\n        hidden={played}\n        className=\"w-full h-full object-cover\"\n        src={thumbnailUrl || 'https://picsum.photos/seed/picsum/1482/812'}\n        alt=\"Video thumbnail\"\n      />\n      <div onClick={handleTooglePlaying} className=\"z-2 absolute inset-0\" />\n\n      {/* Controls */}\n      <div\n        style={{\n          opacity: !played ? 1 : undefined,\n        }}\n        data-type=\"controlls\"\n        className=\"absolute bottom-2 right-2 left-2 z-10 h-8 flex items-center gap-x-2 group-hover:opacity-100 duration-300 transition-opacity opacity-0 ease-in-out\"\n      >\n        {/* Play / Pause */}\n        <button\n          onClick={handleTooglePlaying}\n          className=\"px-4 py-1 bg-black/90 rounded cursor-pointer hover:fill-black/90 fill-neutral-100 hover:bg-white/90\"\n        >\n          {playing ? (\n            <svg className=\"size-6\">\n              <path\n                fillRule=\"evenodd\"\n                clipRule=\"evenodd\"\n                d=\"M8 4a2 2 0 00-2 2v12a2 2 0 104 0V6a2 2 0 00-2-2zm8 0a2 2 0 00-2 2v12a2 2 0 104 0V6a2 2 0 00-2-2z\"\n              />\n            </svg>\n          ) : (\n            <svg viewBox=\"0 0 24 24\" className=\"size-6\">\n              <path d=\"M19 12a1 1 0 01-.496.864l-12 7A1 1 0 015 19V5a1 1 0 011.504-.864l12 7A1 1 0 0119 12z\" />\n            </svg>\n          )}\n        </button>\n\n        {/* Progress Bar */}\n        <div className=\"w-full bg-black/90 h-full px-1 rounded flex gap-x-0.5 items-center\">\n          <div className=\"px-2 w-full\">\n            <div\n              onClick={handleCurrentTimeChangeClick}\n              ref={progressRef}\n              className=\"w-full h-full parent-progress flex items-center cursor-pointer\"\n            >\n              <div className=\"w-full h-1 bg-neutral-800 overflow-hidden child-progress rounded-md transition-all\">\n                <div\n                  style={{\n                    width:\n                      currentTime === 0\n                        ? '0%'\n                        : `${(currentTime / videoDuration) * 100}%`,\n                  }}\n                  className=\"bg-neutral-100 h-full\"\n                />\n              </div>\n            </div>\n          </div>\n\n          {/* Volume */}\n          <button className=\"px-1 py-1 cursor-pointer\" data-ctrltype=\"volume\">\n            <svg viewBox=\"0 0 24 24\" className=\"size-5 fill-neutral-100\">\n              <path\n                fillRule=\"evenodd\"\n                clipRule=\"evenodd\"\n                d=\"M20 12c0 3.728-2.55 6.86-6 7.748V21.8c4.564-.927 8-4.962 8-9.8 0-4.838-3.436-8.873-8-9.8v2.052c3.45.888 6 4.02 6 7.748zm-2 0a6.002 6.002 0 00-4-5.659v2.194c1.196.692 2 1.984 2 3.465 0 1.48-.804 2.773-2 3.465v2.194c2.33-.824 4-3.047 4-5.659zM6.586 8.004H4a2 2 0 00-2 2v4a2 2 0 002 2h2.586l3.707 4.707c.63.63 1.707.184 1.707-.707v-16c0-.89-1.077-1.337-1.707-.707L6.586 8.004z\"\n              />\n            </svg>\n          </button>\n\n          {/* Captions */}\n          <button className=\"px-1 py-1 cursor-pointer\" data-ctrltype=\"captions\">\n            <svg viewBox=\"0 0 24 24\" className=\"fill-neutral-100 size-5\">\n              <path\n                fillRule=\"evenodd\"\n                clipRule=\"evenodd\"\n                d=\"...\" // trimmed for brevity\n              />\n            </svg>\n          </button>\n\n          {/* Settings */}\n          <button\n            className=\"px-1 py-1 cursor-pointer relative parent-settings\"\n            data-ctrltype=\"settings\"\n          >\n            <svg className=\"fill-neutral-100 size-5\">\n              <path\n                clipRule=\"evenodd\"\n                d=\"...\" // trimmed for brevity\n              />\n            </svg>\n          </button>\n\n          {/* Fullscreen */}\n          <button\n            onClick={handleToogleFullScreenMode}\n            className=\"px-1 py-1 cursor-pointer\"\n            data-ctrltype=\"fullscreen\"\n          >\n            <svg\n              viewBox=\"0 0 512 512\"\n              xmlSpace=\"preserve\"\n              className=\"size-4 fill-neutral-100\"\n            >\n              <path d=\"...\" /> {/* trimmed for brevity */}\n            </svg>\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n}\n"}]}