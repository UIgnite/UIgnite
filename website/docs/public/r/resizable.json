<<<<<<< HEAD
{"name":"resizable","type":"registry:ui","dependencies":[],"registryDependencies":["https://080a-104-28-199-189.ngrok-free.app/r/resizable.json"],"files":[{"path":"registry/default/ui/Resizable.tsx","type":"registry:ui","content":"import React, {\n  useCallback,\n  useEffect,\n  useRef,\n  useState,\n  ReactNode,\n} from 'react';\nimport {cn} from '@/lib/utils';\n\nexport interface ResizableProps {\n  className?: string;\n  defaultPosition?: number;\n  horizontal?: boolean;\n  children: [ReactNode, ReactNode]; // exactly two children expected\n}\n\nexport default function Resizable({\n  className,\n  defaultPosition,\n  horizontal: horizontalValue,\n  children,\n}: ResizableProps) {\n  const containerRef = useRef<HTMLDivElement | null>(null);\n  const draggerRef = useRef<HTMLDivElement | null>(null);\n\n  const [dividerPosition, setDividerPosition] = useState(\n    (defaultPosition ?? horizontalValue)\n      ? window.innerHeight - window.innerHeight / 3\n      : window.innerWidth / 5\n  );\n  const [mouseX, setMouseX] = useState(0);\n  const [mouseDown, setMouseDown] = useState(false);\n\n  const handleMouseUpDown = useCallback(() => {\n    const controller = new AbortController();\n    if (draggerRef.current) {\n      draggerRef.current.addEventListener(\n        'mousedown',\n        () => setMouseDown(true),\n        {signal: controller.signal}\n      );\n      draggerRef.current.addEventListener(\n        'mouseup',\n        () => setMouseDown(false),\n        {signal: controller.signal}\n      );\n    }\n    return () => {\n      controller.abort();\n    };\n  }, []);\n\n  useEffect(() => {\n    handleMouseUpDown();\n  }, [handleMouseUpDown]);\n\n  useEffect(() => {\n    if (mouseDown) setDividerPosition(mouseX);\n  }, [mouseX, mouseDown]);\n\n  return (\n    <div\n      ref={containerRef}\n      onMouseMove={(ev: React.MouseEvent<HTMLDivElement>) => {\n        console.log(ev);\n        setMouseX(horizontalValue ? ev.clientY : ev.clientX);\n      }}\n      className={cn(\n        `w-full h-full flex ${horizontalValue ? 'flex-col' : ''}`,\n        className\n      )}\n    >\n      <div\n        style={{\n          width: horizontalValue ? '100%' : dividerPosition,\n          height: horizontalValue ? dividerPosition : '100%',\n        }}\n      >\n        {children[0]}\n      </div>\n      <div\n        ref={draggerRef}\n        className={`${\n          horizontalValue\n            ? 'w-auto h-1 cursor-row-resize'\n            : 'h-full w-1 cursor-col-resize'\n        } relative group`}\n      >\n        <div\n          role=\"separator\"\n          aria-checked={mouseDown ? 'true' : 'false'}\n          className={`${\n            horizontalValue\n              ? 'top-1/2 left-0 right-0 bottom-1/2 -translate-y-1/2 h-0.5 group-hover:h-1'\n              : 'top-0 left-1/2 right-1/2 bottom-0 -translate-x-1/2 w-0.5 group-hover:w-1'\n          } absolute z-10 bg-[#263147] transition-all group-hover:bg-amber-300 aria-checked:bg-amber-300`}\n        />\n      </div>\n      <div\n        style={{\n          width: horizontalValue\n            ? '100%'\n            : containerRef.current\n              ? containerRef.current.offsetWidth - dividerPosition\n              : 0,\n          height: horizontalValue\n            ? containerRef.current\n              ? containerRef.current.offsetHeight - dividerPosition\n              : 0\n            : '100%',\n        }}\n      >\n        {children[1]}\n      </div>\n    </div>\n  );\n}\n"}],"$schema":"https://ui.shadcn.com/schema/registry-item.json"}
=======
{
  "name": "resizable",
  "type": "registry:ui",
  "dependencies": [],
  "registryDependencies": [],
  "files": [
    {
      "path": "registry/default/ui/resizable",
      "type": "registry:ui",
      "content": "import React, {\n  useCallback,\n  useEffect,\n  useRef,\n  useState,\n  ReactNode,\n} from 'react';\nimport {cn} from '@/lib/utils';\n\nexport interface ResizableProps {\n  className?: string;\n  defaultPosition?: number;\n  horizontal?: boolean;\n  children: [ReactNode, ReactNode]; // exactly two children expected\n}\n\nexport default function Resizable({\n  className,\n  defaultPosition,\n  horizontal: horizontalValue,\n  children,\n}: ResizableProps) {\n  const containerRef = useRef<HTMLDivElement | null>(null);\n  const draggerRef = useRef<HTMLDivElement | null>(null);\n\n  const [dividerPosition, setDividerPosition] = useState(\n    (defaultPosition ?? horizontalValue)\n      ? window.innerHeight - window.innerHeight / 3\n      : window.innerWidth / 5\n  );\n  const [mouseX, setMouseX] = useState(0);\n  const [mouseDown, setMouseDown] = useState(false);\n\n  const handleMouseUpDown = useCallback(() => {\n    const controller = new AbortController();\n    if (draggerRef.current) {\n      draggerRef.current.addEventListener(\n        'mousedown',\n        () => setMouseDown(true),\n        {signal: controller.signal}\n      );\n      draggerRef.current.addEventListener(\n        'mouseup',\n        () => setMouseDown(false),\n        {signal: controller.signal}\n      );\n    }\n    return () => {\n      controller.abort();\n    };\n  }, []);\n\n  useEffect(() => {\n    handleMouseUpDown();\n  }, [handleMouseUpDown]);\n\n  useEffect(() => {\n    if (mouseDown) setDividerPosition(mouseX);\n  }, [mouseX, mouseDown]);\n\n  return (\n    <div\n      ref={containerRef}\n      onMouseMove={(ev: React.MouseEvent<HTMLDivElement>) => {\n        console.log(ev);\n        setMouseX(horizontalValue ? ev.clientY : ev.clientX);\n      }}\n      className={cn(\n        `w-full h-full flex ${horizontalValue ? 'flex-col' : ''}`,\n        className\n      )}\n    >\n      <div\n        style={{\n          width: horizontalValue ? '100%' : dividerPosition,\n          height: horizontalValue ? dividerPosition : '100%',\n        }}\n      >\n        {children[0]}\n      </div>\n      <div\n        ref={draggerRef}\n        className={`${\n          horizontalValue\n            ? 'w-auto h-1 cursor-row-resize'\n            : 'h-full w-1 cursor-col-resize'\n        } relative group`}\n      >\n        <div\n          role=\"separator\"\n          aria-checked={mouseDown ? 'true' : 'false'}\n          className={`${\n            horizontalValue\n              ? 'top-1/2 left-0 right-0 bottom-1/2 -translate-y-1/2 h-0.5 group-hover:h-1'\n              : 'top-0 left-1/2 right-1/2 bottom-0 -translate-x-1/2 w-0.5 group-hover:w-1'\n          } absolute z-10 bg-[#263147] transition-all group-hover:bg-amber-300 aria-checked:bg-amber-300`}\n        />\n      </div>\n      <div\n        style={{\n          width: horizontalValue\n            ? '100%'\n            : containerRef.current\n              ? containerRef.current.offsetWidth - dividerPosition\n              : 0,\n          height: horizontalValue\n            ? containerRef.current\n              ? containerRef.current.offsetHeight - dividerPosition\n              : 0\n            : '100%',\n        }}\n      >\n        {children[1]}\n      </div>\n    </div>\n  );\n}\n"
    }
  ],
  "$schema": "https://ui.shadcn.com/schema/registry-item.json"
}
>>>>>>> c2c830a0373599bead4655913fb85d18ddc17095
