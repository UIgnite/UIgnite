{"name":"resizable","type":"registry:ui","dependencies":[],"registryDependencies":["https://080a-104-28-199-189.ngrok-free.app/r/resizable.json"],"files":[{"path":"registry/default/ui/Resizable.tsx","type":"registry:ui","content":"import React, {\r\n  useCallback,\r\n  useEffect,\r\n  useRef,\r\n  useState,\r\n  ReactNode,\r\n} from 'react';\r\nimport {cn} from '@/lib/utils';\r\n\r\nexport interface ResizableProps {\r\n  className?: string;\r\n  defaultPosition?: number;\r\n  horizontal?: boolean;\r\n  children: [ReactNode, ReactNode]; // exactly two children expected\r\n}\r\n\r\nfunction Resizable({\r\n  className,\r\n  defaultPosition,\r\n  horizontal: horizontalValue,\r\n  children,\r\n}: ResizableProps) {\r\n  const containerRef = useRef<HTMLDivElement | null>(null);\r\n  const draggerRef = useRef<HTMLDivElement | null>(null);\r\n\r\n  const [dividerPosition, setDividerPosition] = useState(\r\n    (defaultPosition ?? horizontalValue)\r\n      ? window.innerHeight - window.innerHeight / 3\r\n      : window.innerWidth / 5\r\n  );\r\n  const [mouseX, setMouseX] = useState(0);\r\n  const [mouseDown, setMouseDown] = useState(false);\r\n\r\n  const handleMouseUpDown = useCallback(() => {\r\n    const controller = new AbortController();\r\n    if (draggerRef.current) {\r\n      draggerRef.current.addEventListener(\r\n        'mousedown',\r\n        () => setMouseDown(true),\r\n        {signal: controller.signal}\r\n      );\r\n      draggerRef.current.addEventListener(\r\n        'mouseup',\r\n        () => setMouseDown(false),\r\n        {signal: controller.signal}\r\n      );\r\n    }\r\n    return () => {\r\n      controller.abort();\r\n    };\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    handleMouseUpDown();\r\n  }, [handleMouseUpDown]);\r\n\r\n  useEffect(() => {\r\n    if (mouseDown) setDividerPosition(mouseX);\r\n  }, [mouseX, mouseDown]);\r\n\r\n  return (\r\n    <div\r\n      ref={containerRef}\r\n      onMouseMove={(ev: React.MouseEvent<HTMLDivElement>) => {\r\n        console.log(ev);\r\n        setMouseX(horizontalValue ? ev.clientY : ev.clientX);\r\n      }}\r\n      className={cn(\r\n        `w-full h-full flex ${horizontalValue ? 'flex-col' : ''}`,\r\n        className\r\n      )}\r\n    >\r\n      <div\r\n        style={{\r\n          width: horizontalValue ? '100%' : dividerPosition,\r\n          height: horizontalValue ? dividerPosition : '100%',\r\n        }}\r\n      >\r\n        {children[0]}\r\n      </div>\r\n      <div\r\n        ref={draggerRef}\r\n        className={`${\r\n          horizontalValue\r\n            ? 'w-auto h-1 cursor-row-resize'\r\n            : 'h-full w-1 cursor-col-resize'\r\n        } relative group`}\r\n      >\r\n        <div\r\n          role=\"separator\"\r\n          aria-checked={mouseDown ? 'true' : 'false'}\r\n          className={`${\r\n            horizontalValue\r\n              ? 'top-1/2 left-0 right-0 bottom-1/2 -translate-y-1/2 h-0.5 group-hover:h-1'\r\n              : 'top-0 left-1/2 right-1/2 bottom-0 -translate-x-1/2 w-0.5 group-hover:w-1'\r\n          } absolute z-10 bg-[#263147] transition-all group-hover:bg-amber-300 aria-checked:bg-amber-300`}\r\n        />\r\n      </div>\r\n      <div\r\n        style={{\r\n          width: horizontalValue\r\n            ? '100%'\r\n            : containerRef.current\r\n              ? containerRef.current.offsetWidth - dividerPosition\r\n              : 0,\r\n          height: horizontalValue\r\n            ? containerRef.current\r\n              ? containerRef.current.offsetHeight - dividerPosition\r\n              : 0\r\n            : '100%',\r\n        }}\r\n      >\r\n        {children[1]}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport {Resizable};\r\n","filename":"Resizable"}],"$schema":"https://ui.shadcn.com/schema/registry-item.json"}