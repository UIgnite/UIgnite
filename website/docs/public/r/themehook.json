{"name":"themehook","type":"registry:hook","dependencies":[],"registryDependencies":[],"files":[{"path":"packages/uignite/src/hooks/theme.tsx","type":"registry:hook","content":"import React, {\r\n  createContext,\r\n  useContext,\r\n  useState,\r\n  useEffect,\r\n  ReactNode,\r\n} from 'react';\r\n\r\nexport interface ThemeContextType {\r\n  theme: 'light' | 'dark';\r\n  toggleTheme(): any;\r\n}\r\n\r\nconst ThemeContext = createContext<ThemeContextType>({\r\n  theme: 'dark',\r\n  toggleTheme: () => {},\r\n});\r\n\r\nexport interface ThemeProviderProps {\r\n  children: ReactNode;\r\n}\r\n\r\nexport const ThemeProvider: React.FC<ThemeProviderProps> = ({children}) => {\r\n  const [theme, setTheme] = useState<'light' | 'dark'>(() => {\r\n    const savedTheme = localStorage.getItem('theme') as 'light' | 'dark' | null;\r\n    return savedTheme ?? 'dark';\r\n  });\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem('theme', theme);\r\n    document.body.classList.toggle('dark', theme === 'dark');\r\n  }, [theme]);\r\n\r\n  const toggleTheme = () => {\r\n    console.log('Toggle clicked');\r\n    setTheme((prev) => (prev === 'light' ? 'dark' : 'light'));\r\n  };\r\n\r\n  return (\r\n    <ThemeContext.Provider value={{theme, toggleTheme}}>\r\n      <div\r\n        className={`${\r\n          theme === 'dark'\r\n            ? 'bg-dark-primary text-white'\r\n            : 'bg-light-primary text-black'\r\n        }`}\r\n      >\r\n        {children}\r\n      </div>\r\n    </ThemeContext.Provider>\r\n  );\r\n};\r\n\r\nconst useTheme = () => {\r\n  const context = useContext(ThemeContext);\r\n  if (!context) throw new Error('useTheme must be used within a ThemeProvider');\r\n  return context;\r\n};\r\n\r\nexport {useTheme};\r\n"}],"$schema":"https://ui.shadcn.com/schema/registry-item.json"}