{
  "name": "themehook",
  "type": "registry:hook",
  "dependencies": [],
  "registryDependencies": [
    "https://080a-104-28-199-189.ngrok-free.app/r/themehook.json"
  ],
  "files": [
    {
      "path": "registry/default/ui/theme.tsx",
      "type": "registry:hook",
      "content": "import React, {\n  createContext,\n  useContext,\n  useState,\n  useEffect,\n  ReactNode,\n} from 'react';\n\nexport interface ThemeContextType {\n  theme: 'light' | 'dark';\n  toggleTheme(): any;\n}\n\nconst ThemeContext = createContext<ThemeContextType>({\n  theme: 'dark',\n  toggleTheme: () => {},\n});\n\nexport interface ThemeProviderProps {\n  children: ReactNode;\n}\n\nexport const ThemeProvider: React.FC<ThemeProviderProps> = ({children}) => {\n  const [theme, setTheme] = useState<'light' | 'dark'>(() => {\n    const savedTheme = localStorage.getItem('theme') as 'light' | 'dark' | null;\n    return savedTheme ?? 'dark';\n  });\n\n  useEffect(() => {\n    localStorage.setItem('theme', theme);\n    document.body.classList.toggle('dark', theme === 'dark');\n  }, [theme]);\n\n  const toggleTheme = () => {\n    console.log('Toggle clicked');\n    setTheme((prev) => (prev === 'light' ? 'dark' : 'light'));\n  };\n\n  return (\n    <ThemeContext.Provider value={{theme, toggleTheme}}>\n      <div\n        className={`${\n          theme === 'dark'\n            ? 'bg-dark-primary text-white'\n            : 'bg-light-primary text-black'\n        }`}\n      >\n        {children}\n      </div>\n    </ThemeContext.Provider>\n  );\n};\n\nconst useTheme = () => {\n  const context = useContext(ThemeContext);\n  if (!context) throw new Error('useTheme must be used within a ThemeProvider');\n  return context;\n};\n\nexport {useTheme};\n",
      "filename": "theme"
    }
  ],
  "$schema": "https://ui.shadcn.com/schema/registry-item.json"
}
