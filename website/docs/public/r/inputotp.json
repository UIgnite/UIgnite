{
  "name": "inputotp",
  "type": "registry:ui",
  "dependencies": [],
  "registryDependencies": ["https://uignite.in/r/inputotp.json"],
  "files": [
    {
      "path": "components/ui/InputOTP.tsx",
      "type": "registry:ui",
      "content": "import React, {useEffect, useRef, useState} from 'react';\n\ninterface InputOTPProps {\n  length?: number;\n  onOTPSubmit?: (otp: string) => void;\n}\n\nconst InputOTP: React.FC<InputOTPProps> = ({\n  length = 4,\n  onOTPSubmit = () => {},\n}) => {\n  const [otp, setOtp] = useState<string[]>(new Array(length).fill(''));\n  const inputRefs = useRef<(HTMLInputElement | null)[]>([]);\n\n  useEffect(() => {\n    inputRefs.current[0]?.focus();\n  }, []);\n\n  const handleChange = (\n    index: number,\n    e: React.ChangeEvent<HTMLInputElement>\n  ) => {\n    const value = e.target.value;\n    if (isNaN(Number(value))) return;\n\n    const newOtp = [...otp];\n    newOtp[index] = value.slice(-1); // Only last digit\n    setOtp(newOtp);\n\n    const combined = newOtp.join('');\n    if (combined.length === length && !newOtp.includes('')) {\n      onOTPSubmit(combined);\n    }\n\n    const nextIndex = newOtp.findIndex((val, i) => i > index && val === '');\n    if (nextIndex !== -1 && inputRefs.current[nextIndex]) {\n      inputRefs.current[nextIndex]?.focus();\n    }\n  };\n\n  const handleKeyDown = (\n    index: number,\n    e: React.KeyboardEvent<HTMLInputElement>\n  ) => {\n    if (e.key === 'Backspace' && !otp[index] && index > 0) {\n      const newOtp = [...otp];\n      newOtp[index - 1] = '';\n      setOtp(newOtp);\n      inputRefs.current[index - 1]?.focus();\n    }\n  };\n\n  const handleClick = (index: number) => {\n    inputRefs.current[index]?.setSelectionRange(1, 1);\n  };\n\n  return (\n    <div className=\"flex items-center justify-center gap-3 mt-10\">\n      {otp.map((digit, index) => (\n        <input\n          key={index}\n          type=\"text\"\n          inputMode=\"numeric\"\n          maxLength={1}\n          value={digit}\n          ref={(el) => {\n            inputRefs.current[index] = el;\n          }}\n          onChange={(e) => handleChange(index, e)}\n          onKeyDown={(e) => handleKeyDown(index, e)}\n          onClick={() => handleClick(index)}\n          className=\"w-14 h-14 text-center text-xl -mt-4 shadow-lg  dark:shadow-black dark:text-black rounded-sm dark:bg-zinc-200 bg-zinc-800 text-white outline-none focus:ring-2 focus:ring-blue-500 transition-all duration-150\"\n        />\n      ))}\n    </div>\n  );\n};\n\nexport {InputOTP};\n",
      "filename": "InputOTP"
    }
  ],
  "$schema": "https://ui.shadcn.com/schema/registry-item.json"
}
