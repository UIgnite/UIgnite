{
  "name": "button",
  "type": "registry:ui",
  "dependencies": ["class-variance-authority"],
  "registryDependencies": [
    "https://uignite.in/r/spinner.json",
    "https://uignite.in/r/button.json"
  ],
  "files": [
    {
      "path": "components/ui/Button.tsx",
      "type": "registry:ui",
      "content": "import React, {useEffect, useState} from 'react';\nimport {cn} from '@/lib/utils';\nimport {cva} from 'class-variance-authority';\nimport {Spinner} from '@/components/ui/Spinner';\n\nexport interface ButtonParams\n  extends React.ButtonHTMLAttributes<HTMLButtonElement> {\n  size?: 'default' | 'sm' | 'lg' | 'xl' | 'icon';\n  className?: string;\n  isLoading?: boolean;\n  icon?: React.ReactNode;\n  variant?:\n    | 'primary'\n    | 'destructive'\n    | 'success'\n    | 'warning'\n    | 'outline'\n    | 'secondary'\n    | 'ghost'\n    | 'glass'\n    | 'gradient'\n    | 'dark'\n    | 'light'\n    | 'movingBorder';\n  fullWidth?: boolean;\n  animatedBorder?: boolean;\n  gradientBorder?: boolean;\n  responsiveSize?: 'auto' | 'compact' | 'expand';\n}\n\nconst Button = React.forwardRef<\n  HTMLButtonElement,\n  React.PropsWithChildren<ButtonParams>\n>(\n  (\n    {\n      children,\n      size = 'default',\n      className = '',\n      isLoading = false,\n      icon,\n      variant = 'primary',\n      fullWidth,\n      animatedBorder = false,\n      gradientBorder = false,\n      responsiveSize,\n      ...props\n    },\n    ref\n  ) => {\n    const [animationPosition, setAnimationPosition] = useState({x: 0, y: 0});\n\n    useEffect(() => {\n      if (!animatedBorder) return;\n\n      const interval = setInterval(() => {\n        setAnimationPosition((prev) => ({\n          x: (prev.x + 1) % 100,\n          y: (prev.y + 1) % 100,\n        }));\n      }, 50);\n\n      return () => clearInterval(interval);\n    }, [animatedBorder]);\n\n    const buttonVariants = cva(\n      'inline-flex text-4xl items-center cursor-pointer justify-center whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 relative',\n      {\n        variants: {\n          variant: {\n            primary: 'bg-[#305CDE] text-white hover:bg-blue-700',\n            destructive: 'bg-red-500 text-white hover:bg-red-600',\n            success: 'bg-[#00b306] text-white hover:bg-green-600',\n            warning: 'bg-[#ff8a00] text-white hover:bg-yellow-600',\n            outline:\n              'border border-gray-500 bg-transparent hover:bg-gray-700 hover:text-white',\n            secondary: 'bg-rose-500 text-white hover:bg-rose-400',\n            ghost:\n              'dark:hover:bg-zinc-800 dark:text-white text-gray-700 hover:bg-zinc-800 hover:text-gray-100',\n            glass:\n              'dark:bg-white/10 backdrop-blur-md border border-black/10 dark:border-white/20 dark:text-white dark:hover:bg-white/20 hover:bg-white/60',\n            gradient:\n              'bg-gradient-to-r from-[#d60db8] to-[#1919e0] text-white hover:from-blue-600 hover:to-purple-700',\n            dark: 'bg-black text-white hover:bg-black/70',\n            light: 'bg-gray-50 text-black hover:bg-gray-100',\n            movingBorder: 'text-white bg-black border-none',\n          },\n          size: {\n            default: 'h-10 px-4 py-2 min-w-[90px]',\n            sm: 'h-9 rounded-md px-3 min-w-[80px]',\n            lg: 'h-11 rounded-md px-8 min-w-[110px]',\n            xl: 'h-12 rounded-md px-10 min-w-[130px] text-base',\n            icon: 'h-10 w-10 min-w-[40px]',\n          },\n          fullWidth: {\n            true: 'w-full',\n            false: '',\n          },\n          responsiveSize: {\n            auto: 'md:text-base text-xs md:h-10 h-8 md:px-4 px-2',\n            compact:\n              'lg:h-10 md:h-9 h-8 lg:px-4 md:px-3 px-2 lg:text-sm text-xs',\n            expand: 'lg:h-12 md:h-11 h-10 lg:px-8 md:px-6 px-4',\n          },\n        },\n        defaultVariants: {\n          variant: 'primary',\n          size: 'default',\n          fullWidth: false,\n          responsiveSize: undefined,\n        },\n      }\n    );\n\n    const getBorderStyle = () => {\n      if (animatedBorder) {\n        return {\n          backgroundImage: `linear-gradient(90deg, #00f0ff, #00ff6a, #ff00e6, #0096ff)`,\n          backgroundSize: '300% 300%',\n          backgroundPosition: `${animationPosition.x}% ${animationPosition.y}%`,\n          padding: '2px',\n          borderRadius: '0.375rem',\n          animation: '5s ease infinite',\n        };\n      }\n      if (gradientBorder) {\n        return {\n          backgroundImage:\n            'linear-gradient(to right, #4f46e5, #9333ea, #e11d48)',\n          padding: '2px',\n          borderRadius: '0.375rem',\n        };\n      }\n      return undefined;\n    };\n\n    const buttonContent = (\n      <>\n        {isLoading ? (\n          <Spinner className={cn(children ? 'mr-2' : '')} />\n        ) : icon ? (\n          <span className={cn(children ? 'mr-2' : '')}>{icon}</span>\n        ) : null}\n        {children}\n      </>\n    );\n\n    const renderButton = () => (\n      <button\n        {...props}\n        ref={ref}\n        className={cn(\n          buttonVariants({\n            variant: animatedBorder || gradientBorder ? 'dark' : variant,\n            size,\n            fullWidth,\n            responsiveSize,\n            className: cn(\n              (animatedBorder || gradientBorder) &&\n                'w-full m-0 rounded-[calc(0.375rem-1px)]',\n              className\n            ),\n          })\n        )}\n      >\n        {buttonContent}\n      </button>\n    );\n\n    const borderStyle = getBorderStyle();\n\n    return borderStyle ? (\n      <div\n        className={cn('inline-flex', fullWidth && 'w-full')}\n        style={borderStyle}\n      >\n        {renderButton()}\n      </div>\n    ) : (\n      renderButton()\n    );\n  }\n);\n\nButton.displayName = 'Button';\n\nexport {Button};\n",
      "filename": "Button"
    }
  ],
  "$schema": "https://ui.shadcn.com/schema/registry-item.json"
}
