{
  "name": "button",
  "type": "registry:ui",
  "dependencies": [],
  "files": [
    {
      "path": "packages/uignite/src/components/Button/Button.tsx",
      "type": "registry:ui",
      "content": "import React, {useEffect, useState} from 'react';\r\nimport {cn} from '@/lib/utils';\r\nimport {cva} from 'class-variance-authority';\r\nimport {Spinner} from '@/components/Spinner';\r\n\r\nexport interface ButtonParams\r\n  extends React.ButtonHTMLAttributes<HTMLButtonElement> {\r\n  size?: 'default' | 'sm' | 'lg' | 'xl' | 'icon';\r\n  className?: string;\r\n  isLoading?: boolean;\r\n  icon?: React.ReactNode;\r\n  variant?:\r\n    | 'primary'\r\n    | 'destructive'\r\n    | 'success'\r\n    | 'warning'\r\n    | 'outline'\r\n    | 'secondary'\r\n    | 'ghost'\r\n    | 'glass'\r\n    | 'gradient'\r\n    | 'dark'\r\n    | 'light'\r\n    | 'movingBorder';\r\n  fullWidth?: boolean;\r\n  animatedBorder?: boolean;\r\n  gradientBorder?: boolean;\r\n  responsiveSize?: 'auto' | 'compact' | 'expand';\r\n}\r\n\r\nexport const Button = React.forwardRef<\r\n  HTMLButtonElement,\r\n  React.PropsWithChildren<ButtonParams>\r\n>(\r\n  (\r\n    {\r\n      children,\r\n      size = 'default',\r\n      className = '',\r\n      isLoading = false,\r\n      icon,\r\n      variant = 'primary',\r\n      fullWidth,\r\n      animatedBorder = false,\r\n      gradientBorder = false,\r\n      responsiveSize,\r\n      ...props\r\n    },\r\n    ref\r\n  ) => {\r\n    const [animationPosition, setAnimationPosition] = useState({x: 0, y: 0});\r\n\r\n    useEffect(() => {\r\n      if (!animatedBorder) return;\r\n\r\n      const interval = setInterval(() => {\r\n        setAnimationPosition((prev) => ({\r\n          x: (prev.x + 1) % 100,\r\n          y: (prev.y + 1) % 100,\r\n        }));\r\n      }, 50);\r\n\r\n      return () => clearInterval(interval);\r\n    }, [animatedBorder]);\r\n\r\n    const buttonVariants = cva(\r\n      'inline-flex text-4xl items-center cursor-pointer justify-center whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 relative',\r\n      {\r\n        variants: {\r\n          variant: {\r\n            primary: 'bg-[#305CDE] text-white hover:bg-blue-600',\r\n            destructive: 'bg-red-500 text-white hover:bg-red-600',\r\n            success: 'bg-[#00b306] text-white hover:bg-green-600',\r\n            warning: 'bg-[#ff8a00] text-white hover:bg-yellow-600',\r\n            outline:\r\n              'border border-gray-500 bg-transparent hover:bg-gray-700 hover:text-white',\r\n            secondary: 'bg-rose-500 text-white hover:bg-rose-400',\r\n            ghost:\r\n              'dark:hover:bg-gray-700 dark:text-white text-gray-700 hover:bg-gray-800 hover:text-gray-100',\r\n            glass:\r\n              'dark:bg-white/10 backdrop-blur-md border border-black/10 dark:border-white/20 dark:text-white dark:hover:bg-white/20 hover:bg-white/60',\r\n            gradient:\r\n              'bg-gradient-to-r from-[#d60db8] to-[#1919e0] text-white hover:from-blue-600 hover:to-purple-700',\r\n            dark: 'bg-black text-white hover:bg-black/70',\r\n            light: 'bg-gray-50 text-black hover:bg-gray-100',\r\n            movingBorder: 'text-white bg-black border-none',\r\n          },\r\n          size: {\r\n            default: 'h-10 px-4 py-2 min-w-[90px]',\r\n            sm: 'h-9 rounded-md px-3 min-w-[80px]',\r\n            lg: 'h-11 rounded-md px-8 min-w-[110px]',\r\n            xl: 'h-12 rounded-md px-10 min-w-[130px] text-base',\r\n            icon: 'h-10 w-10 min-w-[40px]',\r\n          },\r\n          fullWidth: {\r\n            true: 'w-full',\r\n            false: '',\r\n          },\r\n          responsiveSize: {\r\n            auto: 'md:text-base text-xs md:h-10 h-8 md:px-4 px-2',\r\n            compact:\r\n              'lg:h-10 md:h-9 h-8 lg:px-4 md:px-3 px-2 lg:text-sm text-xs',\r\n            expand: 'lg:h-12 md:h-11 h-10 lg:px-8 md:px-6 px-4',\r\n          },\r\n        },\r\n        defaultVariants: {\r\n          variant: 'primary',\r\n          size: 'default',\r\n          fullWidth: false,\r\n          responsiveSize: undefined,\r\n        },\r\n      }\r\n    );\r\n\r\n    const getBorderStyle = () => {\r\n      if (animatedBorder) {\r\n        return {\r\n          backgroundImage: `linear-gradient(90deg, #00f0ff, #00ff6a, #ff00e6, #0096ff)`,\r\n          backgroundSize: '300% 300%',\r\n          backgroundPosition: `${animationPosition.x}% ${animationPosition.y}%`,\r\n          padding: '2px',\r\n          borderRadius: '0.375rem',\r\n          animation: '5s ease infinite',\r\n        };\r\n      }\r\n      if (gradientBorder) {\r\n        return {\r\n          backgroundImage:\r\n            'linear-gradient(to right, #4f46e5, #9333ea, #e11d48)',\r\n          padding: '2px',\r\n          borderRadius: '0.375rem',\r\n        };\r\n      }\r\n      return undefined;\r\n    };\r\n\r\n    const buttonContent = (\r\n      <>\r\n        {isLoading ? (\r\n          <Spinner className={cn(children ? 'mr-2' : '')} />\r\n        ) : icon ? (\r\n          <span className={cn(children ? 'mr-2' : '')}>{icon}</span>\r\n        ) : null}\r\n        {children}\r\n      </>\r\n    );\r\n\r\n    const renderButton = () => (\r\n      <button\r\n        {...props}\r\n        ref={ref}\r\n        className={cn(\r\n          buttonVariants({\r\n            variant: animatedBorder || gradientBorder ? 'dark' : variant,\r\n            size,\r\n            fullWidth,\r\n            responsiveSize,\r\n            className: cn(\r\n              (animatedBorder || gradientBorder) &&\r\n                'w-full m-0 rounded-[calc(0.375rem-1px)]',\r\n              className\r\n            ),\r\n          })\r\n        )}\r\n      >\r\n        {buttonContent}\r\n      </button>\r\n    );\r\n\r\n    const borderStyle = getBorderStyle();\r\n\r\n    return borderStyle ? (\r\n      <div\r\n        className={cn('inline-flex', fullWidth && 'w-full')}\r\n        style={borderStyle}\r\n      >\r\n        {renderButton()}\r\n      </div>\r\n    ) : (\r\n      renderButton()\r\n    );\r\n  }\r\n);\r\n\r\nButton.displayName = 'Button';\r\n"
    }
  ],
  "$schema": "https://ui.shadcn.com/schema/registry-item.json"
}
