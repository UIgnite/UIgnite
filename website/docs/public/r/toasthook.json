{"name":"toasthook","type":"registry:hook","dependencies":[],"registryDependencies":["toast"],"files":[{"path":"packages/uignite/src/hooks/toast.tsx","type":"registry:hook","content":"import {Toast} from '../components/Toast';\r\nimport React, {\r\n  useCallback,\r\n  useContext,\r\n  createContext,\r\n  useState,\r\n  ReactNode,\r\n} from 'react';\r\n\r\ninterface ToastOptions {\r\n  variant?: 'default' | 'success' | 'error' | 'info' | string;\r\n  desc?: string;\r\n  timeout?: number;\r\n}\r\n\r\ninterface ToastType {\r\n  id: string;\r\n  title: string;\r\n  options: ToastOptions;\r\n}\r\n\r\ninterface ToastContextType {\r\n  showToast: (title: string, options?: ToastOptions) => void;\r\n}\r\n\r\nconst ToastContext = createContext<ToastContextType | null>(null);\r\n\r\ninterface ToastProviderProps {\r\n  children: ReactNode;\r\n}\r\n\r\nconst ToastProvider: React.FC<ToastProviderProps> = ({children}) => {\r\n  const [toasts, setToasts] = useState<ToastType[]>([]);\r\n  const [hovered, setHovered] = useState<boolean>(false);\r\n\r\n  const handleShowToast = useCallback(\r\n    (title: string, opt?: ToastOptions) => {\r\n      const toast: ToastType = {\r\n        id: crypto.randomUUID(),\r\n        title,\r\n        options: {\r\n          variant: 'default',\r\n          desc: undefined,\r\n          timeout: 5000,\r\n          ...opt,\r\n        },\r\n      };\r\n\r\n      setToasts((prevToasts) => {\r\n        const newToasts = [...prevToasts];\r\n        if (newToasts.length > 2) newToasts.splice(1, 1);\r\n        return [...newToasts, toast];\r\n      });\r\n\r\n      setTimeout(() => {\r\n        setToasts((prevToasts) => {\r\n          const lToasts = [...prevToasts];\r\n          const index = lToasts.findIndex((value) => value.id === toast.id);\r\n          if (index <= -1) return lToasts;\r\n          lToasts.splice(index, 1);\r\n          if (lToasts.length <= 1) setHovered(false);\r\n          return lToasts;\r\n        });\r\n      }, toast.options.timeout);\r\n    },\r\n    [setToasts, hovered, setHovered]\r\n  );\r\n\r\n  return (\r\n    <ToastContext.Provider value={{showToast: handleShowToast}}>\r\n      {children}\r\n      <div\r\n        onMouseEnter={() => setHovered(true)}\r\n        onMouseLeave={() => setHovered(false)}\r\n      >\r\n        {toasts.map((toast, idx) =>\r\n          toast.options.timeout ? (\r\n            <Toast\r\n              idx={idx}\r\n              key={toast.id}\r\n              title={toast.title}\r\n              options={toast.options}\r\n              hovered={hovered}\r\n            />\r\n          ) : null\r\n        )}\r\n      </div>\r\n    </ToastContext.Provider>\r\n  );\r\n};\r\n\r\nconst useToast = (): ToastContextType => {\r\n  const context = useContext(ToastContext);\r\n  if (!context) throw new Error('useToast must be used within a ToastProvider');\r\n  return context;\r\n};\r\n\r\nexport {useToast, ToastProvider};\r\n"}],"$schema":"https://ui.shadcn.com/schema/registry-item.json"}