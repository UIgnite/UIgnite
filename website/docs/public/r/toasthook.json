{
  "name": "toasthook",
  "type": "registry:hook",
  "dependencies": [],
  "registryDependencies": ["toast"],
  "files": [
    {
      "path": "packages/uignite/src/hooks/toast.tsx",
      "type": "registry:hook",
      "content": "import {Toast} from '../components/Toast';\nimport React, {\n  useCallback,\n  useContext,\n  createContext,\n  useState,\n  ReactNode,\n} from 'react';\n\ninterface ToastOptions {\n  variant?: 'default' | 'success' | 'error' | 'info' | string;\n  desc?: string;\n  timeout?: number;\n}\n\ninterface ToastType {\n  id: string;\n  title: string;\n  options: ToastOptions;\n}\n\ninterface ToastContextType {\n  showToast: (title: string, options?: ToastOptions) => void;\n}\n\nconst ToastContext = createContext<ToastContextType | null>(null);\n\ninterface ToastProviderProps {\n  children: ReactNode;\n}\n\nconst ToastProvider: React.FC<ToastProviderProps> = ({children}) => {\n  const [toasts, setToasts] = useState<ToastType[]>([]);\n  const [hovered, setHovered] = useState<boolean>(false);\n\n  const handleShowToast = useCallback(\n    (title: string, opt?: ToastOptions) => {\n      const toast: ToastType = {\n        id: crypto.randomUUID(),\n        title,\n        options: {\n          variant: 'default',\n          desc: undefined,\n          timeout: 5000,\n          ...opt,\n        },\n      };\n\n      setToasts((prevToasts) => {\n        const newToasts = [...prevToasts];\n        if (newToasts.length > 2) newToasts.splice(1, 1);\n        return [...newToasts, toast];\n      });\n\n      setTimeout(() => {\n        setToasts((prevToasts) => {\n          const lToasts = [...prevToasts];\n          const index = lToasts.findIndex((value) => value.id === toast.id);\n          if (index <= -1) return lToasts;\n          lToasts.splice(index, 1);\n          if (lToasts.length <= 1) setHovered(false);\n          return lToasts;\n        });\n      }, toast.options.timeout);\n    },\n    [setToasts, hovered, setHovered]\n  );\n\n  return (\n    <ToastContext.Provider value={{showToast: handleShowToast}}>\n      {children}\n      <div\n        onMouseEnter={() => setHovered(true)}\n        onMouseLeave={() => setHovered(false)}\n      >\n        {toasts.map((toast, idx) =>\n          toast.options.timeout ? (\n            <Toast\n              idx={idx}\n              key={toast.id}\n              title={toast.title}\n              options={toast.options}\n              hovered={hovered}\n            />\n          ) : null\n        )}\n      </div>\n    </ToastContext.Provider>\n  );\n};\n\nconst useToast = (): ToastContextType => {\n  const context = useContext(ToastContext);\n  if (!context) throw new Error('useToast must be used within a ToastProvider');\n  return context;\n};\n\nexport {useToast, ToastProvider};\n"
    }
  ]
}
