[
  {
    "id": "Accordion",
    "name": "Accordion",
    "desc": "A sleek, accessible, and customizable Accordion component for React. Perfect for FAQs, menus, or any collapsible contentâ€”fully controllable and easy to integrate.",
    "path": "/components/ui/Accordion/Accordion.tsx",
    "previewImageUrl": "/assets/previewimages/accordian.png",
    "installation": [
      {
        "title": "Install dependencies",
        "codeBlock": "npm i lucide-react",
        "path": "/components/ui/Accordion/Accordion.tsx"
      },
      {
        "title": "Copy the code",
        "codeBlock": "",
        "path": "/utils/lib.ts"
      }
    ],
    "props": [
      {
        "prop": "title",
        "type": "string",
        "desc": "The clickable header text for the accordion. Keep it catchy.",
        "defaultValue": "â€”"
      },
      {
        "prop": "content",
        "type": "ReactNode",
        "desc": "The content inside the accordion that expands or collapses.",
        "defaultValue": "â€”"
      },
      {
        "prop": "className",
        "type": "string",
        "desc": "Optional additional class names for styling the wrapper.",
        "defaultValue": "\"\""
      },
      {
        "prop": "defaultOpen",
        "type": "boolean",
        "desc": "If true, the accordion will be open by default on mount.",
        "defaultValue": "false"
      },
      {
        "prop": "open",
        "type": "boolean",
        "desc": "(Controlled) Determines whether the accordion is open.",
        "defaultValue": "false"
      },
      {
        "prop": "isOpen",
        "type": "boolean",
        "desc": "Internal flag (used with AccordionWrapper) to manage open state for grouped accordions.",
        "defaultValue": "null"
      },
      {
        "prop": "onToggle",
        "type": "function",
        "desc": "Callback triggered when the accordion is toggled.",
        "defaultValue": "undefined"
      }
    ]
  },
  {
    "id": "AlertDialogBox",
    "name": "AlertDialogBox",
    "desc": "A simple and reusable alert dialog for confirming critical user actions like deleting data, logging out, or other irreversible steps.",
    "path": "/components/ui/AlertDialogBox/AlertDialogBox.tsx",
    "previewImageUrl": "/assets/previewimages/alertdialogbox.png",
    "installation": [
      {
        "title": "Install dependencies",
        "codeBlock": "",
        "path": "/components/ui/AlertDialogBox/AlertDialogBox.tsx"
      },
      {
        "title": "Copy the code",
        "codeBlock": "",
        "path": "/utils/lib.ts"
      }
    ],
    "props": [
      {
        "prop": "title",
        "type": "string",
        "desc": "The heading text displayed at the top of the alert dialog.",
        "defaultValue": "â€”"
      },
      {
        "prop": "description",
        "type": "string",
        "desc": "The description message that explains the alert action.",
        "defaultValue": "â€”"
      }
    ]
  },
  {
    "id": "Avatar",
    "name": "Avatar",
    "desc": "A minimal, aesthetic Avatar component to show off user profile pics in a rounded and responsive way. Plug it anywhere â€” chat apps, dashboards, or comment sections.",
    "path": "/components/ui/Avatar/Avatar.tsx",
    "previewImageUrl": "/assets/previewimages/avatar.png",
    "installation": [
      {
        "title": "Install dependencies",
        "codeBlock": "",
        "path": "/components/ui/Avatar/Avatar.tsx"
      },
      {
        "title": "Copy the code",
        "codeBlock": "",
        "path": "/utils/lib.ts"
      }
    ],
    "props": [
      {
        "prop": "url",
        "type": "string",
        "desc": "The image URL for the avatar. Make sure itâ€™s a valid link or your users go faceless. ",
        "defaultValue": "â€”"
      },
      {
        "prop": "alt",
        "type": "string",
        "desc": "Alternative text for the image. Accessibility matters. ",
        "defaultValue": "â€”"
      },
      {
        "prop": "className",
        "type": "string",
        "desc": "Extra Tailwind classes to style or resize the avatar your way.",
        "defaultValue": "\"\""
      }
    ]
  },
  {
    "id": "Button",
    "name": "Button",
    "desc": "A powerful, stylish, and customizable button component with support for animations, gradients, and full Tailwind-powered flexibility. Perfect for when you wanna flex your UI. ",
    "path": "/components/ui/Button/Button.tsx",
    "previewImageUrl": "",
    "installation": [
      {
        "title": "Install dependencies",
        "codeBlock": "npm i class-variance-authority",
        "path": "/components/ui/Button/Button.tsx"
      },
      {
        "title": "Copy the code",
        "codeBlock": "",
        "path": "/utils/lib.ts"
      }
    ],
    "props": [
      {
        "prop": "children",
        "type": "ReactNode",
        "desc": "Anything you wanna put inside the button. Text, emoji, whatever makes it click.",
        "defaultValue": "â€”"
      },
      {
        "prop": "variant",
        "type": "\"primary\" | \"destructive\" | \"success\" | \"warning\" | \"outline\" | \"secondary\" | \"ghost\" | \"glass\" | \"gradient\" | \"dark\" | \"light\" | \"movingBorder\"",
        "desc": "Defines the buttonâ€™s vibe â€” choose your mood.",
        "defaultValue": "\"primary\""
      },
      {
        "prop": "size",
        "type": "\"default\" | \"sm\" | \"lg\" | \"xl\" | \"icon\"",
        "desc": "Size control. Want a chunky button or something cute and compact?",
        "defaultValue": "\"default\""
      },
      {
        "prop": "fullWidth",
        "type": "boolean",
        "desc": "Make the button stretch across the full width of its container.",
        "defaultValue": "false"
      },
      {
        "prop": "responsiveSize",
        "type": "\"auto\" | \"compact\" | \"expand\"",
        "desc": "Auto-scales size based on screen size. Ideal for making your UI mobile-friendly without sweating.",
        "defaultValue": "null"
      },
      {
        "prop": "isLoading",
        "type": "boolean",
        "desc": "Add a loading spinner inside the button. Because sometimes patience is a UX feature.",
        "defaultValue": "false"
      },
      {
        "prop": "icon",
        "type": "ReactNode",
        "desc": "Add an icon before the text. Works great with @tabler/icons-react or any SVG.",
        "defaultValue": "null"
      },
      {
        "prop": "animatedBorder",
        "type": "boolean",
        "desc": "Adds a colorful animated border. Looks like a vibe, works like a CTA. ðŸš€",
        "defaultValue": "false"
      },
      {
        "prop": "gradientBorder",
        "type": "boolean",
        "desc": "Wraps the button in a cool gradient border. Static version of animatedBorder.",
        "defaultValue": "false"
      },
      {
        "prop": "className",
        "type": "string",
        "desc": "Tailwind classes to customize styling even more.",
        "defaultValue": "\"\""
      }
    ]
  },
  {
    "id": "Card",
    "name": "Card",
    "desc": "A flexible and customizable card component for displaying content, built with React.",
    "path": "/components/ui/Card/Card.tsx",
    "previewImageUrl": "/assets/previewimages/card.png",
    "installation": [
      {
        "title": "Install dependencies",
        "codeBlock": "",
        "path": "/components/ui/Card/Card.tsx"
      },
      {
        "title": "Copy the code",
        "codeBlock": "npm i clsx tailwind-merge lucid",
        "path": "/tailwind.config.ts"
      }
    ],
    "props": [
      {
        "prop": "className",
        "type": "string",
        "desc": "Optional additional class names for styling the card wrapper.",
        "defaultValue": "\"\""
      }
    ]
  },
  {
    "id": "Carosuel",
    "name": "Carosuel",
    "desc": "A smooth, responsive Carosuel component to slide through child elements. Includes left and right navigation with smooth scroll transitions.",
    "path": "/components/ui/Carosuel/Carosuel.tsx",
    "previewImageUrl": "",
    "installation": [
      {
        "title": "Install dependencies",
        "codeBlock": "npm i class-variance-authority lucide-react",
        "path": "/components/ui/Carosuel/Carosuel.tsx"
      },
      {
        "title": "Copy the code",
        "codeBlock": "",
        "path": "/lib/utils.ts"
      }
    ],
    "props": [
      {
        "prop": "children",
        "type": "ReactNode[]",
        "desc": "An array of JSX elements to slide through. Each child will occupy full width.",
        "defaultValue": "â€”"
      },
      {
        "prop": "className",
        "type": "string",
        "desc": "Optional classes to customize the Carosuel wrapper's styling.",
        "defaultValue": "\"\""
      }
    ],
    "usage": {
      "title": "Basic Usage",
      "codeBlock": "import { Carosuel } from '@/components/ui/Carosuel/Carosuel';\n\nexport default function DemoCarosuel() {\n  return (\n    <Carosuel className=\"h-64\">\n      <div className=\"bg-red-500 flex items-center justify-center text-white text-xl\">Slide 1</div>\n      <div className=\"bg-green-500 flex items-center justify-center text-white text-xl\">Slide 2</div>\n      <div className=\"bg-blue-500 flex items-center justify-center text-white text-xl\">Slide 3</div>\n    </Carosuel>\n  );\n}"
    }
  },
  {
    "id": "Dropdown",
    "name": "Dropdown",
    "desc": "A sleek, no-jank Dropdown component. Tap to toggle, sprinkle your actions or menus inside. Renders a floating panel near the trigger with automatic layering.",
    "path": "/components/ui/Dropdown/Dropdown.tsx",
    "previewImageUrl": "",
    "installation": [
      {
        "title": "Install dependencies",
        "codeBlock": "",
        "path": "/components/ui/Dropdown/Dropdown.tsx"
      },
      {
        "title": "Copy the code",
        "codeBlock": "",
        "path": "/components/ui/Button/Button.tsx"
      }
    ],
    "props": [
      {
        "prop": "title",
        "type": "string",
        "desc": "Fallback text for the trigger button if no `button` prop is passed.",
        "defaultValue": "\"Open\""
      },
      {
        "prop": "button",
        "type": "ReactNode",
        "desc": "Custom JSX element for the dropdown trigger. Go wild or keep it minimal.",
        "defaultValue": "null"
      },
      {
        "prop": "children",
        "type": "ReactNode",
        "desc": "The dropdown content. Add buttons, links, filters, vibes â€” whatever you want inside.",
        "defaultValue": "â€”"
      }
    ]
  },
  {
    "id": "Footer",
    "name": "Footer",
    "desc": "A clean, modern footer component with logo, links, socials, and copyright. Dark-mode ready and responsive. Add your brand sauce and you're good to go.",
    "path": "/components/ui/Footer/Footer.tsx",
    "previewImageUrl": "",
    "installation": [
      {
        "title": "Install dependencies",
        "codeBlock": "npm i react-icons",
        "path": "/components/ui/Footer/Footer.tsx"
      },
      {
        "title": "Copy the code",
        "codeBlock": "",
        "path": "/tailwind.config.ts"
      }
    ],
    "props": [
      {
        "prop": "lightLogo",
        "type": "string (URL)",
        "desc": "Image URL for the logo used in light mode. Keep it brand-relevant and aesthetic.",
        "defaultValue": "â€”"
      },
      {
        "prop": "darkLogo",
        "type": "string (URL)",
        "desc": "Logo URL for dark mode. Automatically swaps when `dark` class is active.",
        "defaultValue": "â€”"
      },
      {
        "prop": "description",
        "type": "string",
        "desc": "Short brand blurb or tagline that goes under the logo. Emojis welcome ",
        "defaultValue": "\"\""
      },
      {
        "prop": "socials",
        "type": "Array<{ type: 'linkedin' | 'twitter' | 'instagram' | 'youtube', link: string }>",
        "desc": "List of social icons to display. Icons come auto-packed via `react-icons`. Just pass the type and link.",
        "defaultValue": "[]"
      },
      {
        "prop": "sections",
        "type": "Array<{ title: string, links: { label: string, href: string }[] }>",
        "desc": "Footer link sections. Think: 'Product', 'Company', 'Support', etc. Label & link your way.",
        "defaultValue": "[]"
      },
      {
        "prop": "copyright",
        "type": "string",
        "desc": "Custom copyright text. Add your Â©, year, company name, or some quirky message.",
        "defaultValue": "â€”"
      }
    ]
  },
  {
    "id": "Input",
    "name": "Input",
    "desc": "Aesthetic, minimal, and totally customizable input field for forms. Focus-ring? Yup. Dark mode? Of course.",
    "path": "/components/ui/Input/Input.tsx",
    "previewImageUrl": "/assets/previewimages/input.png",
    "installation": [
      {
        "title": "Add Tailwind & utils",
        "codeBlock": "",
        "path": "/lib/utils.ts"
      },
      {
        "title": "Copy the code",
        "codeBlock": "",
        "path": "/tailwind.config.ts"
      }
    ],
    "props": [
      {
        "prop": "type",
        "type": "string",
        "desc": "HTML input type like 'text', 'email', 'password', etc. Keep it classic or go wild.",
        "defaultValue": "\"text\""
      },
      {
        "prop": "className",
        "type": "string",
        "desc": "Optional custom styles to override or extend default Tailwind classes.",
        "defaultValue": "\"\""
      },
      {
        "prop": "...props",
        "type": "any",
        "desc": "All native input props are supported. Bring your placeholder, value, onChange, whatever.",
        "defaultValue": "â€”"
      }
    ]
  },
  {
    "id": "InputOtp",
    "name": "InputOtp",
    "desc": "A sleek lil input for taking OTP ",
    "path": "/components/ui/InputOTP/InputOTP.tsx",
    "previewImageUrl": "",
    "installation": [
      {
        "title": "Set up chatbot component",
        "codeBlock": "",
        "path": "/components/ui/MessageBot/MessageBot.tsx"
      },
      {
        "title": "Copy the code",
        "codeBlock": "// pass your logo/avatar URLs and org name as props",
        "path": "/pages/index.tsx"
      }
    ],
    "props": [
      {
        "prop": "orgName",
        "type": "string",
        "desc": "The name displayed on top of the chatbot. Keeps it branded.",
        "defaultValue": "\"UIgnite\""
      },
      {
        "prop": "themeColor",
        "type": "string",
        "desc": "Tailwind class for primary color. Controls button and header theme.",
        "defaultValue": "\"bg-gray-800\""
      },
      {
        "prop": "url",
        "type": "string",
        "desc": "Image URL for the **user** avatar.",
        "defaultValue": "â€”"
      },
      {
        "prop": "alt",
        "type": "string",
        "desc": "Image URL for the **bot** avatar (can be same or different from user).",
        "defaultValue": "â€”"
      }
    ]
  },
  {
    "id": "MessageBot",
    "name": "MessageBot",
    "desc": "A lightweight, responsive floating chatbot for seamless user interaction. Ideal for support, onboarding, or adding a dynamic, conversational touch to your site.",
    "path": "/components/ui/MessageBot/MessageBot.tsx",
    "previewImageUrl": "",
    "installation": [
      {
        "title": "Set up chatbot component",
        "codeBlock": "npm i lucide-react",
        "path": "/components/ui/MessageBot/MessageBot.tsx"
      },
      {
        "title": "Copy the code",
        "codeBlock": "// pass your logo/avatar URLs and org name as props",
        "path": "/pages/index.tsx"
      }
    ],
    "props": [
      {
        "prop": "orgName",
        "type": "string",
        "desc": "The name displayed on top of the chatbot. Keeps it branded.",
        "defaultValue": "\"UIgnite\""
      },
      {
        "prop": "themeColor",
        "type": "string",
        "desc": "Tailwind class for primary color. Controls button and header theme.",
        "defaultValue": "\"bg-gray-800\""
      },
      {
        "prop": "url",
        "type": "string",
        "desc": "Image URL for the **user** avatar.",
        "defaultValue": "â€”"
      },
      {
        "prop": "alt",
        "type": "string",
        "desc": "Image URL for the **bot** avatar (can be same or different from user).",
        "defaultValue": "â€”"
      }
    ]
  },
  {
    "id": "Navbar",
    "name": "Navbar",
    "desc": "A sticky top navigation bar that supports theme toggling, responsive design, dynamic nav links, and GitHub integration. Fully vibe-checked for light & dark modes.",
    "path": "/components/ui/Navbar/Navbar.tsx",
    "previewImageUrl": "/assets/previewimages/navbar.png",
    "installation": [
      {
        "title": "Import the Navbar",
        "codeBlock": "npm i react-icons",
        "path": "/components/ui/Navbar/Navbar.tsx"
      },
      {
        "title": "Copy the code",
        "codeBlock": "// Ensure useTheme is implemented for toggleTheme functionality",
        "path": "/hooks/theme.ts"
      }
    ],
    "props": [
      {
        "prop": "lightLogo",
        "type": "string",
        "desc": "Image path for light mode logo.",
        "defaultValue": "â€”"
      },
      {
        "prop": "darkLogo",
        "type": "string",
        "desc": "Image path for dark mode logo.",
        "defaultValue": "â€”"
      },
      {
        "prop": "lightGithub",
        "type": "string",
        "desc": "GitHub icon for light mode.",
        "defaultValue": "â€”"
      },
      {
        "prop": "darkGithub",
        "type": "string",
        "desc": "GitHub icon for dark mode.",
        "defaultValue": "â€”"
      },
      {
        "prop": "lightThemeIcon",
        "type": "string",
        "desc": "Icon for switching to light mode.",
        "defaultValue": "â€”"
      },
      {
        "prop": "darkThemeIcon",
        "type": "string",
        "desc": "Icon for switching to dark mode.",
        "defaultValue": "â€”"
      },
      {
        "prop": "navLinks",
        "type": "array",
        "desc": "Array of navigation links. Each item must have `label` and `href`.",
        "defaultValue": "[]"
      }
    ]
  },
  {
    "id": "PricingCard",
    "name": "PricingCard",
    "desc": "Flexible pricing card with theme-based styling, animated hover effects, and support for highlighting popular plans. Includes theme toggle via ThemeSelector.",
    "path": "/components/ui/PricingCard/PricingCard.tsx",
    "previewImageUrl": "/assets/previewimages/pricingcard.png",
    "installation": [
      {
        "title": "Import PricingCard and ThemeSelector",
        "codeBlock": "npm i react-icons",
        "path": "/components/ui/PricingCard/PricingCard.tsx"
      },
      {
        "title": "Copy the code",
        "codeBlock": "import { themes } from '@/utils/theme';",
        "path": "/utils/theme.ts"
      }
    ],
    "props": [
      {
        "prop": "title",
        "type": "string",
        "desc": "Plan title (e.g., Starter, Pro, Unlimited)",
        "defaultValue": "â€”"
      },
      {
        "prop": "price",
        "type": "string",
        "desc": "Price of the plan (e.g., â‚¹499)",
        "defaultValue": "â€”"
      },
      {
        "prop": "validity",
        "type": "string",
        "desc": "Duration label next to price (e.g., /month, /year)",
        "defaultValue": "â€”"
      },
      {
        "prop": "description",
        "type": "string",
        "desc": "Short text describing the plan's focus or value.",
        "defaultValue": "â€”"
      },
      {
        "prop": "features",
        "type": "string[]",
        "desc": "List of features offered in the plan.",
        "defaultValue": "[]"
      },
      {
        "prop": "highlighted",
        "type": "boolean",
        "desc": "Apply gradient and emphasize the card visually.",
        "defaultValue": "false"
      },
      {
        "prop": "popular",
        "type": "boolean",
        "desc": "Shows 'Most Popular' badge on top of the card.",
        "defaultValue": "false"
      },
      {
        "prop": "theme",
        "type": "string",
        "desc": "Key from `themes` object to determine card styling.",
        "defaultValue": "\"default\""
      }
    ]
  },
  {
    "id": "Skeleton",
    "name": "Skeleton",
    "desc": "A simple animated placeholder component used to indicate loading UI blocks.",
    "path": "/components/ui/Skeleton/Skeleton.tsx",
    "installation": [
      {
        "title": "Import Skeleton",
        "codeBlock": "",
        "path": "/components/ui/Skeleton/Skeleton.tsx"
      },
      {
        "title": "Copy the code",
        "codeBlock": "import Skeleton from '@/components/ui/Skeleton';",
        "path": "/components/ui/Skeleton/Skeleton.tsx"
      }
    ],
    "props": [
      {
        "prop": "className",
        "type": "string",
        "desc": "Tailwind utility classes for shape, size, spacing etc.",
        "defaultValue": "\"rounded-full w-6 h-6\""
      }
    ]
  },
  {
    "id": "Spinner",
    "name": "Spinner",
    "desc": "A minimalist 3-dot loading spinner that adapts to light and dark themes using the theme context. Smooth bounce animation included.",
    "path": "/components/ui/Spinner/Spinner.tsx",
    "previewImageUrl": "",
    "installation": [
      {
        "title": "Import the Spinner",
        "codeBlock": "",
        "path": "/components/ui/Spinner/Spinner.tsx"
      },
      {
        "title": "Copy the code",
        "codeBlock": "// Spinner depends on useTheme to switch dot color\nimport { useTheme } from '@/hooks/theme';",
        "path": "/hooks/theme.ts"
      }
    ],
    "props": [
      {
        "prop": "className",
        "type": "string",
        "desc": "Optional utility classes to control layout, spacing, or positioning.",
        "defaultValue": "\"\""
      }
    ]
  },
  {
    "id": "Switch",
    "name": "Switch",
    "desc": "A sleek lil' toggle â€” like a light switch but for devs.Great for toggling themes, states, or anything boolean.",
    "path": "/components/ui/Switch/Switch.tsx",
    "previewImageUrl": "/assets/previewimages/toggle.png",
    "installation": [
      {
        "title": "Import the component",
        "codeBlock": "",
        "path": "/components/ui/Switch/Switch.tsx"
      },
      {
        "title": "Copy the code",
        "codeBlock": "<Switch defaultState={true} />",
        "path": "/pages/index.tsx"
      }
    ],
    "props": [
      {
        "prop": "defaultState",
        "type": "boolean",
        "desc": "Controls the initial position of the switch. `true` = ON.",
        "defaultValue": "false"
      }
    ]
  },
  {
    "id": "Tabs",
    "name": "Tabs",
    "desc": "A minimal, accessible, and theme-friendly modular tab system. Designed for clean organization and smooth content switchingâ€”no more tab clutter.",
    "path": "/components/ui/Tabs/Tabs.tsx",
    "previewImageUrl": "",
    "installation": [
      {
        "title": "Install utils",
        "codeBlock": "",
        "path": "/utils/lib.ts"
      },
      {
        "title": "Copy the code",
        "codeBlock": "",
        "path": "/components/ui/Tabs/Tabs.tsx"
      }
    ],
    "props": [
      {
        "prop": "Tabs",
        "type": "React component",
        "desc": "The outer shell managing tab state. Like your friendly neighborhood tab controller.",
        "defaultValue": "defaultVal = 'preview'"
      },
      {
        "prop": "TabList",
        "type": "React component",
        "desc": "Holds all your `<Tab />` buttons in one line. Basically the navigation bar of tabs.",
        "defaultValue": "â€”"
      },
      {
        "prop": "Tab",
        "type": "React component",
        "desc": "The clickable tab itself. Pass in `value` (the ID of the tab) and `title` (what users see).",
        "defaultValue": "\"Here is the Title\""
      },
      {
        "prop": "TabContent",
        "type": "React component",
        "desc": "Renders content based on the currently active tab. Only one shows at a time. Magic.",
        "defaultValue": "â€”"
      },
      {
        "prop": "className",
        "type": "string",
        "desc": "Customize vibes with Tailwind utility classes. Use it on Tabs, TabList, or Tab.",
        "defaultValue": "\"\""
      }
    ]
  },
  {
    "id": "Testimonials",
    "name": "Testimonials",
    "desc": "Drop the receipts with this sleek testimonial card. Profile pic? Check. Star ratings? Of course. Perfect for showing love from users, clients, or fans.",
    "path": "/components/ui/Testimonials/Testimonials.tsx",
    "previewImageUrl": "",
    "installation": [
      {
        "title": "Install Lucide for icons",
        "codeBlock": "npm i lucide-react",
        "path": "/components/ui/Testimonials/Testimonials.tsx"
      },
      {
        "title": "Copy the code",
        "codeBlock": "",
        "path": "/components/ui/Testimonials/Testimonials.tsx"
      }
    ],
    "props": [
      {
        "prop": "imageSrc",
        "type": "string",
        "desc": "URL of the user's photo. Defaults to a placeholder if not provided. We love Hitesh sir, but you can change it ðŸ˜….",
        "defaultValue": "\"hitesh-sir.png\""
      },
      {
        "prop": "name",
        "type": "string",
        "desc": "Name of the person giving the testimonial. Show who's hyping you up.",
        "defaultValue": "â€”"
      },
      {
        "prop": "title",
        "type": "string",
        "desc": "Their role or positionâ€”like 'Web Dev at Google' or 'Your biggest fan'.",
        "defaultValue": "â€”"
      },
      {
        "prop": "rating",
        "type": "number (1-5)",
        "desc": "How many stars they gave you. Defaults to 5 (because youâ€™re that good).",
        "defaultValue": "5"
      },
      {
        "prop": "message",
        "type": "string",
        "desc": "The actual testimonial message. Can be deep, sweet, or straight fire.",
        "defaultValue": "â€”"
      }
    ]
  },
  {
    "id": "TextArea",
    "name": "TextArea",
    "desc": "A fully styled, dark modeâ€“ready TextArea component for extended input. Clean design, smooth interactions, and accessible focus states for a polished user experience.",
    "path": "/components/ui/TextArea/TextArea.tsx",
    "previewImageUrl": "/assets/previewimages/textarea.png",
    "installation": [
      {
        "title": "Add Tailwind & utils",
        "codeBlock": "",
        "path": "/lib/utils.ts"
      },
      {
        "title": "Copy the code",
        "codeBlock": "npm i clsx tailwind-merge",
        "path": "/lib/utils.ts"
      }
    ],
    "props": [
      {
        "prop": "className",
        "type": "string",
        "desc": "Add your own Tailwind or custom styles if you're feelin' fancy.",
        "defaultValue": "\"\""
      },
      {
        "prop": "...props",
        "type": "any",
        "desc": "Standard textarea props â€” placeholder, onChange, value, disabled, etc. Bring your own flavor.",
        "defaultValue": "â€”"
      }
    ]
  },
  {
    "id": "Toast",
    "name": "Toast",
    "desc": "A minimal, stylish toast component with smooth slide-in animations and stackable notifications. Clean in both light and dark modes, and fully customizable via classNames.",
    "path": "/components/ui/Toast/Toast.tsx",
    "previewImageUrl": "",
    "installation": [
      {
        "title": "Add utility support",
        "codeBlock": "",
        "path": "/utils/lib.ts"
      },
      {
        "title": "Copy the code",
        "codeBlock": "npm i clsx tailwind-merge",
        "path": "/utils/lib.ts"
      }
    ],
    "props": [
      {
        "prop": "idx",
        "type": "number",
        "desc": "Index of the toast (used to dynamically space stacked toasts).",
        "defaultValue": "0"
      },
      {
        "prop": "title",
        "type": "string",
        "desc": "Main text shown in the toast. Keep it snappy.",
        "defaultValue": "\"\""
      },
      {
        "prop": "options",
        "type": "object",
        "desc": "Customization options (containerClassName, titleClassName, desc, descClassName).",
        "defaultValue": "{}"
      },
      {
        "prop": "hovered",
        "type": "boolean",
        "desc": "Enables hover animation with expanded spacing & scale. Fancy mode ON.",
        "defaultValue": "false"
      }
    ]
  },
  {
    "id": "Tooltip",
    "name": "Tooltip",
    "desc": "Hoverable tooltip for quick hints, labels, or sass. Comes with delay and styling props. Smooth fade. Works well with icons, buttons, or anything inline.",
    "path": "/components/ui/Tooltip/Tooltip.tsx",
    "previewImageUrl": "",
    "installation": [
      {
        "title": "Utility support",
        "codeBlock": "",
        "path": "/utils/lib.ts"
      },
      {
        "title": "Copy the code",
        "codeBlock": "",
        "path": "/utils/lib.ts"
      }
    ],
    "props": [
      {
        "prop": "children",
        "type": "ReactNode",
        "desc": "Any component or element that should show the tooltip on hover.",
        "defaultValue": "â€”"
      },
      {
        "prop": "title",
        "type": "string",
        "desc": "Tooltip content. Keep it short or itâ€™ll get trimmed.",
        "defaultValue": "\"\""
      },
      {
        "prop": "options.delay",
        "type": "number",
        "desc": "Delay (in ms) before tooltip appears/disappears.",
        "defaultValue": "300"
      },
      {
        "prop": "options.containerClassName",
        "type": "string",
        "desc": "Optional class for the outer wrapper.",
        "defaultValue": "\"\""
      },
      {
        "prop": "options.tooltipClassName",
        "type": "string",
        "desc": "Extra classes to style the tooltip itself.",
        "defaultValue": "\"\""
      },
      {
        "prop": "options.tooltipStyle",
        "type": "object",
        "desc": "Inline styles (JS object) to override tooltip positioning or design.",
        "defaultValue": "{}"
      }
    ]
  },
  {
    "id": "VideoPlayer",
    "name": "VideoPlayer",
    "desc": "A professional, fully responsive VideoPlayer component with intuitive controls and seamless playback. Supports multiple video formats, ensures cross-device compatibility, and integrates effortlessly with any design system.",
    "path": "/components/ui/VideoPlayer/VideoPlayer.tsx",
    "previewImageUrl": "",
    "installation": [
      {
        "title": "Install dependencies",
        "codeBlock": "npm i lucide-react",
        "path": "/components/ui/TextArea/TextArea.tsx"
      },
      {
        "title": "Copy the code",
        "codeBlock": "",
        "path": "/components/ui/TextArea/TextArea.tsx"
      }
    ],
    "props": [
      {
        "prop": "src",
        "type": "string",
        "desc": "The source URL of the video to play.",
        "defaultValue": "â€”"
      },
      {
        "prop": "srcType",
        "type": "string",
        "desc": "The MIME type of the video. E.g., 'video/mp4', 'video/webm'.",
        "defaultValue": "-"
      },
      {
        "prop": "thumbnailUrl",
        "type": "string",
        "desc": "Optional thumbnail image shown before the video plays.",
        "defaultValue": "â€”"
      },
      {
        "prop": "muted",
        "type": "boolean",
        "desc": "Whether the video should be muted by default.",
        "defaultValue": "false"
      },
      {
        "prop": "autoplay",
        "type": "boolean",
        "desc": "Plays the video automatically on load if set to true.",
        "defaultValue": "false"
      },
      {
        "prop": "loop",
        "type": "boolean",
        "desc": "Loops the video playback when it ends.",
        "defaultValue": "false"
      },
      {
        "prop": "defaultVolume",
        "type": "number",
        "desc": "Sets the default volume level (from 0 to 1).",
        "defaultValue": "20"
      },
      {
        "prop": "className",
        "type": "string",
        "desc": "Custom CSS classes for the video wrapper.",
        "defaultValue": "â€”"
      }
    ]
  }
]
